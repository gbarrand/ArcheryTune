// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file ArcheryTune.license for terms.

#ifndef ArcheryTune_ArcheryTune_gui
#define ArcheryTune_ArcheryTune_gui

#include "scene_graph"

namespace ArcheryTune {

INLIB_GLOBAL_STRING_VALUE(dsoe,eye/scope)

INLIB_GLOBAL_STRING_VALUE(dioptrie,diopter)
INLIB_GLOBAL_STRING_VALUE(0_25,0.25)
INLIB_GLOBAL_STRING_VALUE(0_5,0.5)
INLIB_GLOBAL_STRING_VALUE(0_625,0.625)
INLIB_GLOBAL_STRING_VALUE(0_75,0.75)
INLIB_GLOBAL_STRING_VALUE(0_8,0.8)
INLIB_GLOBAL_STRING_VALUE(1,1)
INLIB_GLOBAL_STRING_VALUE(1_2,1.2)

INLIB_GLOBAL_STRING_VALUE(dist_cible,distance)

INLIB_GLOBAL_STRING_VALUE(diam_scope,scope)
INLIB_GLOBAL_STRING(29)
//INLIB_GLOBAL_STRING(35)
INLIB_GLOBAL_STRING(42)
INLIB_GLOBAL_STRING_VALUE(diam_pastille,dot)

INLIB_GLOBAL_STRING_VALUE(label_hippopotame,hippopotamus)
INLIB_GLOBAL_STRING_VALUE(label_chameau,camel)
INLIB_GLOBAL_STRING_VALUE(label_daim,deer)
INLIB_GLOBAL_STRING_VALUE(label_loupgris,grey wolf)
INLIB_GLOBAL_STRING_VALUE(label_paon,peacock)
INLIB_GLOBAL_STRING_VALUE(label_pandaroux,red panda)
INLIB_GLOBAL_STRING_VALUE(label_canardmandarin,mandarin duck)
INLIB_GLOBAL_STRING_VALUE(label_lapin,rabbit)

INLIB_GLOBAL_STRING_VALUE(label_indoor_80,80cm single)
INLIB_GLOBAL_STRING_VALUE(label_indoor_60,60cm single)
INLIB_GLOBAL_STRING_VALUE(label_indoor_40,40cm single)
INLIB_GLOBAL_STRING_VALUE(label_indoor_40_31,40cm Vertical Tri-spot)

INLIB_GLOBAL_STRING_VALUE(label_outdoor_122,122cm single)
INLIB_GLOBAL_STRING_VALUE(label_outdoor_80,80cm single)
INLIB_GLOBAL_STRING_VALUE(label_outdoor_80_22,4 x reduced 80cm)

INLIB_GLOBAL_STRING_VALUE(label_field_80,80cm single)
INLIB_GLOBAL_STRING_VALUE(label_field_60,60cm single)
INLIB_GLOBAL_STRING_VALUE(label_field_40_22,2x2 40cm)
INLIB_GLOBAL_STRING_VALUE(label_field_20_34,3x4 20cm)

INLIB_GLOBAL_STRING_VALUE(blason,target)

inline inlib::sg::bcbk::return_action action_create_scope(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                          inlib::sg::entries& a_entries,void* a_tag) {
  const std::vector<std::string>& vals = a_entries.values.values();

  unsigned int blason_id = *((unsigned int*)a_tag);

  double dsoe;
  if(!inlib::to(vals[1],dsoe)) dsoe = 0.8;

  double dioptrie;
  if(!inlib::to(vals[2],dioptrie)) dioptrie  = 0.75;

  double dCible;
  if(!inlib::to(vals[3],dCible)) dCible = 50;

  double diamScope;
  if(!inlib::to(vals[4],diamScope)) diamScope = 29;
  diamScope *= 0.001; //now in meter.

  double diamPastille;
  if(!inlib::to(vals[5],diamPastille)) diamPastille = 2;
  diamPastille *= 0.001; //now in meter.

  double slider_dist_min = 10;
  double slider_dist_max = 80;
 {std::map<unsigned int,mnmx_t>::const_iterator it = blason_mnmxs().find(blason_id);
  if(it!=blason_mnmxs().end()) {
    slider_dist_min = (*it).second.first;
    slider_dist_max = (*it).second.second;
  }}

  create_scope_sg(a_gv,blason_id,diamScope,dsoe,dCible,dioptrie,diamPastille,slider_dist_min,slider_dist_max);

  return inlib::sg::bcbk::return_to_render;     
}

///////////////////////////////////////////////////////////////////////////////////
/// menu nature : /////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
INLIB_GLOBAL_STRING(Enter)

inline inlib::sg::bcbk::return_action _action_nature(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                     inlib::sg::list&,void* a_tag) {

  unsigned int blason_id = *((unsigned int*)a_tag);

  inlib::sg::entries* node = new inlib::sg::entries(a_gv.ttf());
  node->cancel_label = s_Enter();
  a_gv.set_colors(*node);
  node->add_callback(new inlib::sg::funtag_cbk<inlib::sg::entries>(a_gv,*node,action_create_scope,a_tag));

 {std::string v;
  std::map<unsigned int,std::string>::const_iterator it = blason_names().find(blason_id);
  if(it!=blason_names().end()) v = (*it).second;
  node->add_not_editable(s_blason(),v);}
  
  node->add_double(s_dsoe()+" (m)",0.8);
  
 {std::vector<std::string> opts;
  opts.push_back(s_0_25());
  opts.push_back(s_0_5());
  opts.push_back(s_0_625());
  opts.push_back(s_0_75());
  opts.push_back(s_0_8());
  opts.push_back(s_1());
  opts.push_back(s_1_2());
  node->add_combo(s_dioptrie()+" (1/m)",s_0_5(),opts);}

 {dists_t v;
  std::map<unsigned int,distelem>::const_iterator it = blason_dists().find(blason_id);
  if(it!=blason_dists().end()) v = (*it).second.first;
  node->add_combo(s_dist_cible()+" (m)",(*it).second.second,v);}

 {std::vector<std::string> opts;
  opts.push_back(s_29());
  opts.push_back(s_35());
  opts.push_back(s_42());
  node->add_combo(s_diam_scope()+" (mm)",s_42(),opts);}
  
  node->add_double(s_diam_pastille()+" (mm)",2);
  
  a_gv.push_list(node);
  
  return inlib::sg::bcbk::return_to_render;
}

#define ACTION_ID(a__name) \
inline void* _blason_##a__name()  {static unsigned int s_v = blason_##a__name();return &s_v;}

ACTION_ID(nature_hippopotame)
ACTION_ID(nature_chameau)

#define ADD_ITEM_NATURE(a__name) \
  inlib::sg::add_label_item(a_gv,*list,s_label_##a__name(),_action_nature,_blason_nature_##a__name());

inline inlib::sg::bcbk::return_action action_nature_big(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                        inlib::sg::list&,void*) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_colors(*list);
  ADD_ITEM_NATURE(hippopotame)
  ADD_ITEM_NATURE(chameau)
  a_gv.push_list(list);
  return inlib::sg::bcbk::return_to_render;
}

ACTION_ID(nature_daim)
ACTION_ID(nature_loupgris)

inline inlib::sg::bcbk::return_action action_nature_medium(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                           inlib::sg::list&,void*) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_colors(*list);
  ADD_ITEM_NATURE(daim)
  ADD_ITEM_NATURE(loupgris)  
  a_gv.push_list(list);
  return inlib::sg::bcbk::return_to_render;
}

ACTION_ID(nature_paon)
ACTION_ID(nature_pandaroux)

inline inlib::sg::bcbk::return_action action_nature_little(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                           inlib::sg::list&,void*) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_colors(*list);
  ADD_ITEM_NATURE(paon)
  ADD_ITEM_NATURE(pandaroux)
  a_gv.push_list(list);
  return inlib::sg::bcbk::return_to_render;
}

ACTION_ID(nature_canardmandarin)
ACTION_ID(nature_lapin)

inline inlib::sg::bcbk::return_action action_nature_tiny(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                         inlib::sg::list&,void*) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_colors(*list);
  ADD_ITEM_NATURE(canardmandarin)
  ADD_ITEM_NATURE(lapin)
  a_gv.push_list(list);
  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_nature(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                    inlib::sg::list&,void*) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_colors(*list);

  inlib::sg::add_label_item(a_gv,*list,"Big",action_nature_big);
  inlib::sg::add_label_item(a_gv,*list,"Medium",action_nature_medium);
  inlib::sg::add_label_item(a_gv,*list,"Small",action_nature_little);
  inlib::sg::add_label_item(a_gv,*list,"Birdy",action_nature_tiny);
  
  a_gv.push_list(list);
  return inlib::sg::bcbk::return_to_render;
}

///////////////////////////////////////////////////////////////////////////////////
/// menu FITA : ///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

#define ADD_ITEM(a__name) \
  inlib::sg::add_label_item(a_gv,*list,s_label_##a__name(),_action_nature,_blason_##a__name());

ACTION_ID(indoor_80)
ACTION_ID(indoor_60)
ACTION_ID(indoor_40)
ACTION_ID(indoor_40_31)

inline inlib::sg::bcbk::return_action action_FITA_indoor(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                         inlib::sg::list&,void*) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_colors(*list);
  ADD_ITEM(indoor_80)
  ADD_ITEM(indoor_60)
  ADD_ITEM(indoor_40)
  ADD_ITEM(indoor_40_31)
  a_gv.push_list(list);
  return inlib::sg::bcbk::return_to_render;
}

ACTION_ID(outdoor_122)
ACTION_ID(outdoor_80)
ACTION_ID(outdoor_80_22)

inline inlib::sg::bcbk::return_action action_FITA_outdoor(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                          inlib::sg::list&,void*) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_colors(*list);
  ADD_ITEM(outdoor_122)
  ADD_ITEM(outdoor_80)
  ADD_ITEM(outdoor_80_22)
  a_gv.push_list(list);
  return inlib::sg::bcbk::return_to_render;
}

///////////////////////////////////////////////////////////////////////////////////
/// menu field : //////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

ACTION_ID(field_80)
ACTION_ID(field_60)
ACTION_ID(field_40_22)
ACTION_ID(field_20_34)

inline inlib::sg::bcbk::return_action action_field(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                   inlib::sg::list&,void*) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_colors(*list);
  ADD_ITEM(field_80)
  ADD_ITEM(field_60)
  ADD_ITEM(field_40_22)
  ADD_ITEM(field_20_34)
  a_gv.push_list(list);
  return inlib::sg::bcbk::return_to_render;
}

///////////////////////////////////////////////////////////////////////////////////
/// menu scope : //////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

inline inlib::sg::bcbk::return_action action_main_scope(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                        inlib::sg::list&,void*) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_colors(*list);

  inlib::sg::add_label_item(a_gv,*list,"FITA indoor",action_FITA_indoor);
  inlib::sg::add_label_item(a_gv,*list,"FITA outdoor",action_FITA_outdoor);
  inlib::sg::add_label_item(a_gv,*list,"Field",action_field);
  inlib::sg::add_label_item(a_gv,*list,"2D - Animals",action_nature);
  
  a_gv.push_list(list);
  return inlib::sg::bcbk::return_to_render;
}

///////////////////////////////////////////////////////////////////////////////////
/// menu FOC : ////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

inline void _map_warn(inlib::sg::entries& a_entries,const std::string& a_s) {
  a_entries.label = a_s;
  a_entries.label_back_color = inlib::colorf::salmon();
  //m_gv.map_warn(a_s);
}

#define GET_VAL(a__variable,a__index) \
  double a__variable;\
 {if(!inlib::to<double>(vals[a__index],a__variable)){\
    _map_warn(a_entries,"param["+inlib::to(a__index)+"] not a double");\
    return inlib::sg::bcbk::return_to_render;\
  }}

#define GET_VAL_GT_0(a__variable,a__index) \
  double a__variable;\
 {if(!inlib::to<double>(vals[a__index],a__variable)){\
    _map_warn(a_entries,"param["+inlib::to(a__index)+"] not a double");\
    return inlib::sg::bcbk::return_to_render;\
  }\
  if(a__variable<=0) {\
    _map_warn(a_entries,"param["+inlib::to(a__index)+"] must be >0");\
    return inlib::sg::bcbk::return_to_render;\
  }}

#define GET_VAL_GE_0(a__variable,a__index) \
  double a__variable;\
 {if(!inlib::to<double>(vals[a__index],a__variable)){\
    _map_warn(a_entries,"param["+inlib::to(a__index)+"] not a double");\
    return inlib::sg::bcbk::return_to_render;\
  }\
  if(a__variable<0) {\
    _map_warn(a_entries,"param["+inlib::to(a__index)+"] must be >=0");\
    return inlib::sg::bcbk::return_to_render;\
  }}

#define GET_VAL_RANGE(a__variable,a__index,a__min,a__max) \
  double a__variable;\
 {if(!inlib::to<double>(vals[a__index],a__variable)){\
    _map_warn(a_entries,"param["+inlib::to(a__index)+"] not a double");\
    return inlib::sg::bcbk::return_to_render;\
  }\
  if(a__variable<a__min) {\
    _map_warn(a_entries,"param["+inlib::to(a__index)+"] must be >="+inlib::to(a__min));\
    return inlib::sg::bcbk::return_to_render;\
  }\
  if(a__variable>a__max) {\
    _map_warn(a_entries,"param["+inlib::to(a__index)+"] must be <="+inlib::to(a__max));\
    return inlib::sg::bcbk::return_to_render;\
  }}

inline inlib::sg::bcbk::return_action action__FOC_LA(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                     inlib::sg::entries& a_entries,void*) {
  const std::vector<std::string>& vals = a_entries.values.values();

  GET_VAL_GT_0(L,0)

  double A;
 {if(!inlib::to<double>(vals[1],A)){
    _map_warn(a_entries,"param[1] not a double");
    return inlib::sg::bcbk::return_to_render;
  }
  if(((2*A)<=L)||(A>=L)) {
    _map_warn(a_entries,"param[1] must be in ]L/2,L[");
    return inlib::sg::bcbk::return_to_render;
  }}

  double FOC = FOC_LA(L,A);

  a_entries.label = inlib::to(FOC)+" %";
  a_entries.label_back_color = inlib::colorf::springgreen();

  return inlib::sg::bcbk::return_to_render;     
}

inline inlib::sg::bcbk::return_action action_FOC_LA(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                    inlib::sg::list&,void*) {
  inlib::sg::entries* node = new inlib::sg::entries(a_gv.ttf());
  node->cancel_label = s_Enter();
  a_gv.set_colors(*node);
  node->add_callback(new inlib::sg::funtag_cbk<inlib::sg::entries>(a_gv,*node,action__FOC_LA,0));

  node->shown_label_color = inlib::colorf::pink();

  double def_L = 100; //cm
  double def_A = 60;  //cm

  node->add_double("Total length (cm)",def_L);
  node->add_double("Nock - Balance Pt (cm)",def_A);

  double def_FOC = FOC_LA(def_L,def_A);
  node->label = inlib::to(def_FOC)+" %";

  a_gv.push_list(node);
  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action__FOC_dm(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                     inlib::sg::entries& a_entries,void*) {
  const std::vector<std::string>& vals = a_entries.values.values();

  double old_FOC;
 {if(!inlib::to<double>(vals[0],old_FOC)){
    _map_warn(a_entries,"param[0] not a double");
    return inlib::sg::bcbk::return_to_render;
  }
  if((old_FOC<0)||(old_FOC>50)) {
    _map_warn(a_entries,"param[0] not in [0,50]");
    return inlib::sg::bcbk::return_to_render;
  }}

  double mass;
  if(!inlib::to<double>(vals[1],mass)){
    _map_warn(a_entries,"param[1] not a double");
    return inlib::sg::bcbk::return_to_render;
  }

  double new_FOC;
 {if(!inlib::to<double>(vals[2],new_FOC)){
    _map_warn(a_entries,"param[2] not a double");
    return inlib::sg::bcbk::return_to_render;
  }
  if((new_FOC<0)||(new_FOC>=50)) {
    _map_warn(a_entries,"param[2] not in [0,50[");
    return inlib::sg::bcbk::return_to_render;
  }}

  double dm = FOC_dm(old_FOC,new_FOC,mass);

  //m_gv.map_warn(inlib::to(dm)+" grains",false);

  std::string s;
  if(dm>=0) {
    inlib::sprintf(s,128,"Add %.1f gn",dm);
  } else {
    inlib::sprintf(s,128,"Remove %.1f gn",-dm);
  }

  a_entries.label = s;
  a_entries.label_back_color = inlib::colorf::springgreen();

  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_FOC_dm(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                    inlib::sg::list&,void*) {
  inlib::sg::entries* node = new inlib::sg::entries(a_gv.ttf());
  node->cancel_label = s_Enter();
  a_gv.set_colors(*node);
  node->add_callback(new inlib::sg::funtag_cbk<inlib::sg::entries>(a_gv,*node,action__FOC_dm,0));

  node->shown_label_color = inlib::colorf::pink();

  double def_old = 15;
  double def_mass = 475;
  double def_new = 14;

  node->add_double("Current FOC (%)"   ,def_old);
  node->add_double("Tot. arrow weight (gn)",def_mass);
  node->add_double("Target FOC (%)"   ,def_new);

  double def_dm = FOC_dm(def_old,def_new,def_mass);
 {std::string s;
  if(def_dm>=0) {
    inlib::sprintf(s,128,"Add %.1f gn",def_dm);
  } else {
    inlib::sprintf(s,128,"Remove %.1f gn",-def_dm);
  }
  node->label = s;}

  a_gv.push_list(node);
  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action__FOC_full(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                       inlib::sg::entries& a_entries,void*) {
  const std::vector<std::string>& vals = a_entries.values.values();

  GET_VAL_GT_0(m_Pt,0)
  GET_VAL_GT_0(rho_T,1)
  GET_VAL_GT_0(L_T,2)
  GET_VAL_GT_0(m_PL,3)
  GET_VAL_GE_0(m_W,4)
  GET_VAL_GE_0(m_B,5)
  GET_VAL_GE_0(m_Pn,6)
  GET_VAL_GT_0(m_N,7)

  double m_Tot;
  double FOC;
  FOC_full(m_Pt,rho_T,L_T,m_PL,m_W,m_B,m_Pn,m_N,m_Tot,FOC);

  std::string s;
  inlib::sprintf(s,512,"Tot. weight %.1f gn, FOC %.1f %%",m_Tot,FOC);
  a_entries.label = s;
  a_entries.label_confine = true;

  a_entries.label_back_color = inlib::colorf::springgreen();

  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_FOC_full(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                      inlib::sg::list&,void*) {
  inlib::sg::entries* node = new inlib::sg::entries(a_gv.ttf());
  node->cancel_label = s_Enter();
  a_gv.set_colors(*node);
  node->add_callback(new inlib::sg::funtag_cbk<inlib::sg::entries>(a_gv,*node,action__FOC_full,0));

  //node->visible_items = 8;
  node->shown_label_color = inlib::colorf::pink();

  double def_m_Pt = 120;   //gn
  double def_rho_T = 5.9;  //gn/in
  double def_L_T = 27;     //in
  double def_m_PL = 9;     //gn
  double def_m_W = 0;      //gn
  double def_m_B = 0;      //gn
  double def_m_Pn = 0;     //gn
  double def_m_N = 6.8;    //gn

  node->add_double("Point/insert weight (gn)",def_m_Pt);
  node->add_double("Shaft per inch (gn/in)",def_rho_T);
  node->add_double("Shaft length (in)",def_L_T);
  node->add_double("All fletch weight (gn)",def_m_PL);
  node->add_double("Wrap weight (gn)",def_m_W);
  node->add_double("Bushing weight (gn)",def_m_B);
  node->add_double("Pin-nock weight (gn)",def_m_Pn);
  node->add_double("nock weight (gn)",def_m_N);

  double def_m_Tot;
  double def_FOC;
  FOC_full(def_m_Pt,def_rho_T,
           def_L_T,def_m_PL,
           def_m_W,def_m_B,
           def_m_Pn,def_m_N,
           def_m_Tot,def_FOC);
   
  std::string s;
  inlib::sprintf(s,512,"Tot. weight %.1f gn, FOC %.1f %%",def_m_Tot,def_FOC);
  node->label = s;
  node->label_confine = true;

  a_gv.push_list(node);
  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_main_FOC(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,inlib::sg::list&,void*) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_colors(*list);

  inlib::sg::add_label_item(a_gv,*list,"FOC from Lengths",action_FOC_LA);
  inlib::sg::add_label_item(a_gv,*list,"Adjust point mass",action_FOC_dm);
  inlib::sg::add_label_item(a_gv,*list,"FOC from Weights",action_FOC_full);
  
  a_gv.push_list(list);
  return inlib::sg::bcbk::return_to_render;
}

///////////////////////////////////////////////////////////////////////////////////
/// menu sight charts : ///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

inline inlib::sg::bcbk::return_action action_sight_charts_def(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                              inlib::sg::entries& a_entries,void*) {
  const std::vector<std::string>& vals = a_entries.values.values();

  a_entries.label = "";

  GET_VAL_GT_0(doesco,0)
  GET_VAL_GT_0(hoenock,1)
  GET_VAL_RANGE(qpDegree,2,-90,90)
  GET_VAL_GT_0(v0,3)
  GET_VAL_GT_0(auTomm,4)

#define SIGHT_CHART_SG
#ifdef SIGHT_CHART_SG
  double qpDegreeRef = qpDegree;
  double xFmin = 5.0;
  double xFmax = 60.0;
  double xFstep = (60-5)/11;
  create_sight_chart_sg(a_gv,doesco,hoenock,qpDegreeRef,qpDegree,v0,auTomm,xFmin,xFmax,xFstep);
#else
  double xFref = 5.0;
  double mark0 = sight_chart(doesco,hoenock,qpDegree,v0,auTomm,xFref);

  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_colors(*list);

 {for(unsigned int index=1;index<=12;index++) {
    double xF = 5*index; //m
    double mark = sight_chart(doesco,hoenock,qpDegree,v0,auTomm,xF)-mark0;

    std::string _x = inlib::to<double>(xF);
    inlib::sprintf(_x,128,"%.1f",xF);
    inlib::justify(_x,8,inlib::side_left);

    std::string _v = inlib::to<double>(mark);
    inlib::sprintf(_v,128,"%.1f",mark);
    inlib::justify(_v,8,inlib::side_right);

    inlib::sg::add_label_item(a_gv,*list,_x+_v,inlib::sg::action_none);
  }}

  a_gv.push_list(list);
#endif

  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_sight_charts_def_menu(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                                   inlib::sg::list&,void*) {
  // from for_1_1/test.cpp/func1()

  inlib::sg::entries* node = new inlib::sg::entries(a_gv.ttf());
  node->cancel_label = s_Enter();
  a_gv.set_colors(*node);
  node->add_callback(new inlib::sg::funtag_cbk<inlib::sg::entries>(a_gv,*node,action_sight_charts_def,0));

  double def_doesco   = 31.5;  //inch
  double def_hoenock  = 4.7;   //inch
  double def_qpDegree = 0;     //deg
  double def_v0       = 289;   //fps
  double def_auTomm   = 1;     //

  node->add_double("Eye to scope (in)",def_doesco);
  node->add_double("Eye to nock (in)" ,def_hoenock);
  node->add_double("Slope (deg)"      ,def_qpDegree);
  node->add_double("Arrow speed (fps)",def_v0);
  node->add_double("A.U to mm conv."  ,def_auTomm);

  a_gv.push_list(node);
  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_sight_charts_1_0(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                               inlib::sg::entries& a_entries,void*) {
  // from for_1_1/test.cpp/func1_1_0()
  // Evolution of func1 with sight chart computed in the range [xFMin,xFMax] and steping xFStep
  // the v0 in known anf the Reference distance is the xFMin

  const std::vector<std::string>& vals = a_entries.values.values();

  a_entries.label = "";

  GET_VAL_GT_0(doesco,0)
  GET_VAL_GT_0(hoenock,1)
  GET_VAL_RANGE(qpDegreeRef,2,-90,90)
  GET_VAL_RANGE(qpDegree,3,-90,90)
  GET_VAL_GT_0(v0,4)
  GET_VAL_GT_0(auTomm,5)

  GET_VAL_GT_0(xFmin,6)
  GET_VAL_GT_0(xFmax,7)
  GET_VAL_GT_0(xFstep,8)

  if(xFmax<=xFmin) {
    _map_warn(a_entries,"xFmax<=xFmin !");
    return inlib::sg::bcbk::return_to_render;
  }

  create_sight_chart_sg(a_gv,doesco,hoenock,qpDegree,qpDegree,v0,auTomm,xFmin,xFmax,xFstep);

  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_sight_charts_1_0_menu(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                                   inlib::sg::list&,void*) {
  // from for_1_1/test.cpp/func1_1_0()

  inlib::sg::entries* node = new inlib::sg::entries(a_gv.ttf());
  node->cancel_label = s_Enter();
  a_gv.set_colors(*node);
  node->add_callback(new inlib::sg::funtag_cbk<inlib::sg::entries>(a_gv,*node,action_sight_charts_1_0,0));

  double def_doesco      = 31.5;  //inch
  double def_hoenock     = 4.7;   //inch
  double def_qpDegreeRef = 0;     //deg
  double def_qpDegree    = 0;     //deg
  double def_v0          = 289;   //fps
  double def_auTomm      = 1;     //

  double def_xFmin       = 15.0;  //m
  double def_xFmax       = 45.0;  //m
  double def_xFstep      = 2.0;   //m

  node->add_double("Eye to scope (in)",def_doesco);
  node->add_double("Eye to nock (in)" ,def_hoenock);
  node->add_double("Slope ref (deg)"  ,def_qpDegreeRef);
  node->add_double("Slope (deg)"      ,def_qpDegree);
  node->add_double("Arrow speed (fps)",def_v0);
  node->add_double("A.U to mm conv."  ,def_auTomm);

  node->add_double("xFmin (m)"        ,def_xFmin);
  node->add_double("xFmax (m)"        ,def_xFmax);
  node->add_double("xFstep (m)"       ,def_xFstep);

  a_gv.push_list(node);
  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_sight_charts_1_1(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                              inlib::sg::entries& a_entries,void*) {
  // from for_1_1/test.cpp/func1_1_1()
  // Alternative to 1_0 where v0 in unknown so the user provide 2 reference distances and the diference
  // of mark sight (<0 means mark2 lower than mark1 with positive vertical axis pointing to the sky)

  const std::vector<std::string>& vals = a_entries.values.values();

  a_entries.label = "";

  GET_VAL_GT_0(doesco,0)
  GET_VAL_GT_0(hoenock,1)
  GET_VAL_RANGE(qpDegreeRef,2,-90,90)
  GET_VAL_RANGE(qpDegree,3,-90,90)
  GET_VAL_GT_0(auTomm,4)

  GET_VAL_GT_0(xFmin,5)
  GET_VAL_GT_0(xFmax,6)
  GET_VAL_GT_0(xFstep,7)

  if(xFmax<=xFmin) {
    _map_warn(a_entries,"xFmax<=xFmin !");
    return inlib::sg::bcbk::return_to_render;
  }

  GET_VAL_GT_0(xFref1,8)
  GET_VAL_GT_0(xFref2,9)
  GET_VAL(markRef2mRef1,10)

  //Find v0 by dichotomie :
  markRef2mRef1 /= auTomm; // transform the sight arbitrary units into mm (auTomm units = au.mm^(-1)
  double v0max = 1000.0;
  double v0min = 100.0;
  double eps = 0.000001;
  unsigned int nLoop = 0;
  unsigned int nMax = 100;
  double v0,epscur;
  do {
    v0 = (v0max+v0min)/2.;
    epscur = sight_chart(doesco,hoenock,qpDegreeRef,v0,auTomm,xFref2)
           - sight_chart(doesco,hoenock,qpDegreeRef,v0,auTomm,xFref1)
           - markRef2mRef1;
    if (epscur > 0) {
      v0max = v0;
    } else {
      v0min = v0;
    }
    nLoop++;
  } while( (::fabs(epscur)>eps) && (nLoop < nMax) );

  create_sight_chart_sg(a_gv,doesco,hoenock,qpDegree,qpDegree,v0,auTomm,xFmin,xFmax,xFstep);

  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_sight_charts_1_1_menu(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                                   inlib::sg::list&,void*) {
  // from for_1_1/test.cpp/func1_1_1()

  inlib::sg::entries* node = new inlib::sg::entries(a_gv.ttf());
  node->cancel_label = s_Enter();
  a_gv.set_colors(*node);
  node->add_callback(new inlib::sg::funtag_cbk<inlib::sg::entries>(a_gv,*node,action_sight_charts_1_1,0));

  double def_doesco      = 31.5;  //inch
  double def_hoenock     = 4.7;   //inch
  double def_qpDegreeRef = 0;     //deg
  double def_qpDegree    = 0;     //deg
  double def_auTomm      = 1;     //

  double def_xFmin       = 15.0;  //m
  double def_xFmax       = 45.0;  //m
  double def_xFstep      = 2.0;   //m

  double def_xFref1          = 15.0;    // lowest reference distance (m)
  double def_xFref2          = 30.0;    // highest reference distance (m)
  double def_markRef2mRef1   = -4.40843; //relative distance between the two marks

  node->add_double("Eye to scope (in)",def_doesco);
  node->add_double("Eye to nock (in)" ,def_hoenock);
  node->add_double("Slope ref (deg)"  ,def_qpDegreeRef);
  node->add_double("Slope (deg)"      ,def_qpDegree);
  node->add_double("A.U to mm conv."  ,def_auTomm);

  node->add_double("xFmin (m)"        ,def_xFmin);
  node->add_double("xFmax (m)"        ,def_xFmax);
  node->add_double("xFstep (m)"       ,def_xFstep);

  node->add_double("xFref1 (m)"        ,def_xFref1);
  node->add_double("xFref2 (m)"        ,def_xFref2);
  node->add_double("markRef2mRef1 (m)" ,def_markRef2mRef1);

  a_gv.push_list(node);
  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_sight_charts_1_2(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                              inlib::sg::entries& a_entries,void*) {
  // from for_1_1/test.cpp/func1_1_2()
  // Provide to the user the different equivalent distance to the target at different slope of the field
  // xF' such that mark(xF,qp) = m(xF',qpRef)
  // in this function v0 is known

  const std::vector<std::string>& vals = a_entries.values.values();

  a_entries.label = "";

  GET_VAL_GT_0(doesco,0)
  GET_VAL_GT_0(hoenock,1)
  GET_VAL_RANGE(qpDegreeRef,2,-90,90)
  GET_VAL_GT_0(auTomm,3)
  GET_VAL_GT_0(v0,4)

  GET_VAL_GT_0(xF,5)
  GET_VAL_RANGE(qpDegreeMin,6,-90,90)
  GET_VAL_RANGE(qpDegreeMax,7,-90,90)
  GET_VAL_GT_0(qpDegreeStep,8)

  //Code

  //find by dichotomy the distance xF' such that mark(xF,qp) = m(xF',qpRef);
  double eps = 0.000001;
  int nMax = 100;
  double xFcur;

  typedef std::pair<double,double> item;
  std::vector<item> ticks;

  for (double qpDegree=qpDegreeMin;qpDegree<=qpDegreeMax; qpDegree+=qpDegreeStep) {
    double xFMin = 0;
    double xFMax = 100;
    int nLoop = 0;
    double epscur;
    do {
      xFcur = (xFMax+xFMin)/2.;
      epscur = sight_chart(doesco,hoenock,qpDegreeRef,v0,auTomm,xFcur)
             - sight_chart(doesco,hoenock,qpDegree,v0,auTomm,xF);
      if (epscur < 0) {
        xFMax = xFcur;
      } else {
	xFMin = xFcur;
      }
      nLoop++;
    } while( (::fabs(epscur)>eps) && (nLoop < nMax) );

    //::printf("Angle %12.6f, Dist Equi. %12.6f\n",qpDegree,xFcur);
    //ticks.push_front(item(qpDegree,xFcur));
    ticks.insert(ticks.begin(),item(qpDegree,xFcur));

  }//for

  create_ruler_sg(a_gv,ticks,"Angle (deg)","Dist Equi. (m)");

  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_sight_charts_1_2_menu(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                                   inlib::sg::list&,void*) {
  // from for_1_1/test.cpp/func1_1_2()

  inlib::sg::entries* node = new inlib::sg::entries(a_gv.ttf());
  node->cancel_label = s_Enter();
  a_gv.set_colors(*node);
  node->add_callback(new inlib::sg::funtag_cbk<inlib::sg::entries>(a_gv,*node,action_sight_charts_1_2,0));

  double def_doesco      = 31.5;  //inch
  double def_hoenock     = 4.7;   //inch
  double def_qpDegreeRef = 0;     //deg
  double def_auTomm      = 1;     //
  double def_v0          = 289.0; // here v0 is supposed to be known (fps)

  double def_xF           = 40.0;  //m
  double def_qpDegreeMin  = -25;     //slope min deg
  double def_qpDegreeMax  = 25;      //slope max deg
  double def_qpDegreeStep = 5;       //slope step deg

  node->add_double("Eye to scope (in)",def_doesco);
  node->add_double("Eye to nock (in)" ,def_hoenock);
  node->add_double("Slope ref (deg)"  ,def_qpDegreeRef);
  node->add_double("A.U to mm conv."  ,def_auTomm);
  node->add_double("Arrow speed (fps)",def_v0);

  node->add_double("xF (m)"            ,def_xF);
  node->add_double("Slope min (deg)"   ,def_qpDegreeMin);
  node->add_double("Slope max (deg)"   ,def_qpDegreeMax);
  node->add_double("Slope step (deg)"  ,def_qpDegreeStep);

  a_gv.push_list(node);
  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_sight_charts_1_3(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                              inlib::sg::entries& a_entries,void*) {
  // from for_1_1/test.cpp/func1_1_3()
  // Provide to the user the different equivalent distance to the target at different slope of the field
  // xF' such that mark(xF,qp) = m(xF',qpRef)
  // in this function v0 is not known and the user provides 2 ref distances and 
  // the diffrence of marks.

  const std::vector<std::string>& vals = a_entries.values.values();

  a_entries.label = "";

  GET_VAL_GT_0(doesco,0)
  GET_VAL_GT_0(hoenock,1)
  GET_VAL_RANGE(qpDegreeRef,2,-90,90)
  GET_VAL_GT_0(auTomm,3)

  GET_VAL_GT_0(xFref1,4)
  GET_VAL_GT_0(xFref2,5)
  GET_VAL(markRef2mRef1,6)

  GET_VAL_GT_0(xF,7)
  GET_VAL_RANGE(qpDegreeMin,8,-90,90)
  GET_VAL_RANGE(qpDegreeMax,9,-90,90)
  GET_VAL_GT_0(qpDegreeStep,10)

  //Code
  markRef2mRef1 /= auTomm; // transform the sight arbitrary units into mm (auTomm units = au.mm^(-1)

  //Find v0 by dichotomie
  double v0max = 1000.0;
  double v0min = 100.0; 
  double eps = 0.000001;
  int nLoop = 0;
  int nMax = 100;
  double epscur;
  double v0cur;
  do {
    v0cur = (v0max+v0min)/2.;
    epscur = sight_chart(doesco,hoenock,qpDegreeRef,v0cur,auTomm,xFref2)
           - sight_chart(doesco,hoenock,qpDegreeRef,v0cur,auTomm,xFref1)
           - markRef2mRef1;
    if (epscur > 0) {
      v0max = v0cur;
    } else {
      v0min = v0cur;
    }
    nLoop++;
  } while( (::fabs(epscur)>eps) && (nLoop < nMax) );

  //find by dichotomy the distance xF' such that mark(xF,qp) = m(xF',qpRef);

  double v0 = v0cur;
  eps = 0.000001;
  nMax = 100;
  double xFcur;

  typedef std::pair<double,double> item;
  std::vector<item> ticks;

  for (double qpDegree=qpDegreeMin;qpDegree<=qpDegreeMax; qpDegree+=qpDegreeStep) {
    double xFMin = 0;
    double xFMax = 100;
    int nLoop = 0;
    double epscur;    
    do {
      xFcur = (xFMax+xFMin)/2.;
      epscur = sight_chart(doesco,hoenock,qpDegreeRef,v0,auTomm,xFcur)
             - sight_chart(doesco,hoenock,qpDegree,v0,auTomm,xF);
      if (epscur < 0) {
        xFMax = xFcur;
      } else {
	xFMin = xFcur;
      }
      nLoop++;
    } while( (fabs(epscur)>eps) && (nLoop < nMax) );
    
    //::printf("Angle %12.6f, Dist Equi. %12.6f\n",qpDegree,xFcur);
    //ticks.push_front(item(qpDegree,xFcur));
    ticks.insert(ticks.begin(),item(qpDegree,xFcur));
    
  }//for

  create_ruler_sg(a_gv,ticks,"Angle (deg)","Dist Equi. (m)");

  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_sight_charts_1_3_menu(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                                   inlib::sg::list&,void*) {
  // from for_1_1/test.cpp/func1_1_3()

  inlib::sg::entries* node = new inlib::sg::entries(a_gv.ttf());
  node->cancel_label = s_Enter();
  a_gv.set_colors(*node);
  node->add_callback(new inlib::sg::funtag_cbk<inlib::sg::entries>(a_gv,*node,action_sight_charts_1_3,0));

  double def_doesco      = 31.5;  //inch
  double def_hoenock     = 4.7;   //inch
  double def_qpDegreeRef = 0;     //deg
  double def_auTomm      = 1;     //

  double def_xFref1          = 15.0;    // lowest reference distance (m)
  double def_xFref2          = 30.0;    // highest reference distance (m)
  double def_markRef2mRef1   = -4.40843; //relative distance between the two marks

  double def_xF           = 40.0;  //m
  double def_qpDegreeMin  = -25;     //slope min deg
  double def_qpDegreeMax  = 25;      //slope max deg
  double def_qpDegreeStep = 5;       //slope step deg

  node->add_double("Eye to scope (in)",def_doesco);
  node->add_double("Eye to nock (in)" ,def_hoenock);
  node->add_double("Slope ref (deg)"  ,def_qpDegreeRef);
  node->add_double("A.U to mm conv."  ,def_auTomm);

  node->add_double("xFref1 (m)"        ,def_xFref1);
  node->add_double("xFref2 (m)"        ,def_xFref2);
  node->add_double("markRef2mRef1 (m)" ,def_markRef2mRef1);

  node->add_double("xF (m)"            ,def_xF);
  node->add_double("Slope min (deg)"   ,def_qpDegreeMin);
  node->add_double("Slope max (deg)"   ,def_qpDegreeMax);
  node->add_double("Slope step (deg)"  ,def_qpDegreeStep);

  a_gv.push_list(node);
  return inlib::sg::bcbk::return_to_render;
}

inline inlib::sg::bcbk::return_action action_main_sight_charts(inlib::sg::gui_viewer& a_gv,const inlib::sg::bcbk&,
                                                               inlib::sg::list&,void*) {
  inlib::sg::list* node = new inlib::sg::list(a_gv.ttf());
  a_gv.set_colors(*node);
  inlib::sg::add_label_item(a_gv,*node,"default",action_sight_charts_def_menu);
  inlib::sg::add_label_item(a_gv,*node,"[xFmin,xFmax]",action_sight_charts_1_0_menu);
  inlib::sg::add_label_item(a_gv,*node,"1_1",action_sight_charts_1_1_menu);
  inlib::sg::add_label_item(a_gv,*node,"1_2",action_sight_charts_1_2_menu);
  inlib::sg::add_label_item(a_gv,*node,"1_3",action_sight_charts_1_3_menu);
  a_gv.push_list(node);
  return inlib::sg::bcbk::return_to_render;
}

}

#endif
