// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_app_main
#define exlib_app_main

// this file needs the cpp macros :
// - EXLIB_APP_NAME : for exa #define EXLIB_APP_NAME "ioda"
// - EXLIB_APP_VERSION : for exa #define EXLIB_APP_VERSION 1.0

#ifndef EXLIB_APP_NAME
#define EXLIB_APP_NAME "exlib"
#endif
#ifndef EXLIB_APP_VERSION
#define EXLIB_APP_VERSION "1.0"
#endif

//cpp macros EXLIB_HAS_<EXTERNAL> are decided from the build scripts.

//////////////////////////////////////
//////////////////////////////////////
//////////////////////////////////////

#include <inlib/sg/gui_viewer>

#include "../xml/xml_style"
#include "../xml/xml_ftp"
#include "../xml/xml_srv"

#ifdef WALL_DATA_CLIENT
#include "wall_client"
#endif

#include <inlib/help/help_description>
#include <inlib/help/help_usage>
#include <inlib/help/help_top_menu>
#include <inlib/help/help_files>
#include <inlib/help/help_exas>
#include <inlib/help/help_camera_panel>
#include <inlib/help/help_styles>
#include <inlib/help/help_fits>
#include <inlib/help/help_web>

#include <inlib/touplow>
#include <inlib/web>

#include <inlib/cbk/image_popup>
#include <inlib/cbk/help>

namespace exlib {
namespace app {

class main 
#ifdef WALL_DATA_CLIENT
:public wall_client
#else
:public inlib::sg::gui_viewer 
#endif
{
#ifdef WALL_DATA_CLIENT
  typedef wall_client parent;
#else
  typedef inlib::sg::gui_viewer parent;
#endif

protected:
  INLIB_CLASS_STRING(scene)
  INLIB_CLASS_STRING(gui_Apple_black_on_white)  
public:
  main(std::ostream& a_out,
       inlib::sg::gl_manager& a_gl_mgr,
       const inlib::sg::base_freetype& a_ttf,
       const std::string& a_data_dir,
       const std::string& a_res_dir,
       const std::string& a_out_dir,
       const std::string& a_tmp_dir,
       bool a_verbose,
       unsigned int /*a_mem_limit*/)
#ifdef WALL_DATA_CLIENT
  :parent(a_out,a_gl_mgr,a_ttf,EXLIB_APP_NAME,a_data_dir,a_verbose)
#else
  :parent(a_out,a_gl_mgr,a_ttf,0,0,a_verbose)
#endif
  ,m_web_cache(a_out,false) //false = no verbose
  {
    m_res_dir = a_res_dir;
    m_out_dir = a_out_dir;
    m_tmp_dir = a_tmp_dir;

   {std::string _pwd;
    if(!inlib::dir::pwd(_pwd)) {
      m_out << "exlib::app::main::main : can't get pwd." << std::endl;
    } else {
      //m_out << "pwd : " << _pwd << std::endl;
    }
    m_pwd = _pwd;}

    m_data_dirs.clear();
    m_data_dirs.push_back(a_data_dir);

    // res_dir :
    //   desktop : <install_path>/<app>/<version>/res.
    //   Cocoa : <app>.app/Contents/Resources.
    //   Android : /data/data/fr.in2p3.lal.<app>/files
    //   iPhone : <app>.app/res
   {std::vector<std::string> vals;
    vals.push_back(a_res_dir);
    vals.push_back(a_data_dir); // So that user can download a font if needed :
    inlib::env_path_append("EXLIB_FONT_PATH",vals);}

    m_app_name = EXLIB_APP_NAME;

    m_app_version = EXLIB_APP_VERSION;

    m_web_cache.set_tmp_dir(a_tmp_dir);

    ////////////////////////////////////////////
    /// help ///////////////////////////////////
    ////////////////////////////////////////////
    typedef inlib::cbk::help::help_item help_item;
    m_help.push_back(help_item("description",description_help));
    m_help.push_back(help_item("usage",usage_help));
    m_help.push_back(help_item("web",web_help));
    m_help.push_back(help_item(inlib::sg::s_files(),files_help));
    m_help.push_back(help_item("examples",exas_help));
    m_help.push_back(help_item("top menu",top_menu_help));
    m_help.push_back(help_item("camera panel",camera_panel_help));
    m_help.push_back(help_item("styles",styles_help));
    m_help.push_back(help_item("fits",fits_help));

    ////////////////////////////////////////////
    /// cmaps //////////////////////////////////
    ////////////////////////////////////////////
    m_styles.add_colormap("default",inlib::sg::style_default_colormap());
    m_styles.add_colormap("ROOT",inlib::sg::style_ROOT_colormap());

    ////////////////////////////////////////////
    /// <app>.style ////////////////////////////
    ////////////////////////////////////////////
    //look for a <app>.style in the res dir :
   {std::string path = a_res_dir;
    path += inlib::sep();
    path += m_app_name;
    path += ".style";
    if(inlib::file::exists(path)) {
      xml::load_style_file(m_styles,path);
    } else { //Android res file names are lowercase.
      std::string _path = a_res_dir;
      _path += inlib::sep();
      std::string _app_name = m_app_name;
      inlib::tolowercase(_app_name);
      _path += _app_name;
      _path += ".style";
      if(inlib::file::exists(_path)) {
        xml::load_style_file(m_styles,_path);
      }
    }}

    //look for a <app>.style in the data dir :
    // any found style with same name will override existing one.
   {std::string path = a_data_dir;
    path += inlib::sep();
    path += m_app_name;
    path += ".style";
    if(inlib::file::exists(path)) {
      xml::load_style_file(m_styles,path);
    } else { //Android res file names are lowercase.
      std::string _path = a_data_dir;
      _path += inlib::sep();
      std::string _app_name = m_app_name;
      inlib::tolowercase(_app_name);
      _path += _app_name;
      _path += ".style";
      if(inlib::file::exists(_path)) {
        xml::load_style_file(m_styles,_path);
      }
    }}

    m_styles.res_color(s_scene(),"screen_color",m_params.m_scene_screen_color);
    set_gui_style(s_gui());

    // old ioda.style in data dir : if gui_Apple_white_on_black gui style,
    // avoid orange back on m_gui_label_back_color.
   {std::string alias;
    if(m_styles.is_alias(s_gui(),alias)){
      if(alias==s_gui_Apple_black_on_white()) {
        if(m_params.m_gui_label_back_color==inlib::colorf::orange()){
          m_params.m_gui_label_back_color = inlib::colorf(0.97f,.97f,0.97f);
        }
      }
    }}

    if(m_verbose) m_styles.dump();

    ////////////////////////////////////////////
    /// <app>.ftp //////////////////////////////
    ////////////////////////////////////////////
    //look for a <app>.ftp in the res dir :
   {std::string path = a_res_dir;
    path += inlib::sep();
    path += m_app_name;
    path += ".ftp";
    if(inlib::file::exists(path)) m_xml_ftp.load_ftp_file(m_out,path);}

    //look for a <app>.ftp in the data dir :
   {std::string path = a_data_dir;
    path += inlib::sep();
    path += m_app_name;
    path += ".ftp";
    if(inlib::file::exists(path)) m_xml_ftp.load_ftp_file(m_out,path);}

    ////////////////////////////////////////////
    /// <app>.srv //////////////////////////////
    ////////////////////////////////////////////
    //look for a <app>.srv in the res dir :
   {std::string path = a_res_dir;
    path += inlib::sep();
    path += m_app_name;
    path += ".srv";
    if(inlib::file::exists(path)) m_xml_srv.load_srv_file(m_out,path);}

    //look for a <app>.srv in the data dir :
   {std::string path = a_data_dir;
    path += inlib::sep();
    path += m_app_name;
    path += ".srv";
    if(inlib::file::exists(path)) m_xml_srv.load_srv_file(m_out,path);}

    ////////////////////////////////////////////
    ////////////////////////////////////////////
    ////////////////////////////////////////////
    m_popup_cbks.add(new inlib::cbk::image_popup(*this));
    ////////////////////////////////////////////
    ////////////////////////////////////////////
    ////////////////////////////////////////////
  }
  virtual ~main() {m_web_cache.clear();}
protected:
  main(const main& a_from)
  :inlib::sg::ui(a_from)
  ,inlib::sg::alert(a_from)
  ,parent(a_from)
  ,m_xml_ftp(a_from.m_xml_ftp)
  ,m_xml_srv(a_from.m_xml_srv)
  ,m_web_cache(m_out,false)
  {}
  main& operator=(const main& a_from){
    parent::operator=(a_from);
    return *this;
  }

public:
  void clear_tmp() {}
protected:
  xml::xml_ftp m_xml_ftp;
  xml::xml_srv m_xml_srv;
  inlib::web::cache m_web_cache;
  inlib::cbk::help::help_t m_help;
};

}}

#endif

//exlib_build_use inlib glutess freetype expat png zlib jpeg
