// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sjust
#define inlib_sjust

#include "strip"
#include "sto"

namespace inlib {

enum side { side_left, side_right, side_middle }; //have side_ for SWIG.

inline bool justify(std::string& a_string,
                    unsigned int a_size,
                    side a_side = side_left){
  // a_size is the final string length.
  strip(a_string);
  if(std::string::size_type(a_size)<=a_string.size()) {
    a_string.resize(a_size);
    return false;
  } else {
    if(a_side==side_left) {
      a_string = a_string + std::string(a_size-a_string.size(),' ');
    } else if(a_side==side_right) {
      a_string = std::string(a_size-a_string.size(),' ') + a_string;
    } else if(a_side==side_middle) {
      int l = a_size - a_string.size();
      int h = l/2;
      if(h*2==l) { //even number of spaces :
        a_string = std::string(h,' ') + a_string + std::string(h,' ');
      } else { // odd number of spaces :
        a_string = std::string(h,' ') + a_string + std::string(h+1,' ');
      }
    }
    return false;
  }
}

inline std::string sjust(const std::string& a_string,
                         unsigned int a_size,
                         side a_side = side_left){
  std::string s(a_string); 
  justify(s,a_size,a_side);
  return s;
}

template <class T>
inline std::string sjust(T a_value,unsigned int a_size,
                         side a_side = side_left) {
  std::string s = to<T>(a_value);
  justify(s,a_size,a_side);
  return s;
}

}

#endif
