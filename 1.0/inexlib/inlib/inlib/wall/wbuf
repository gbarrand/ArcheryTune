// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_wall_wbuf
#define inlib_wall_wbuf

#include "../realloc"
#include "../platform"
#include "../typedefs"
#include "../mnmx"

#include <ostream>

#ifdef INLIB_MEM
#include "../mem"
#endif

namespace inlib {
namespace wall {

class wbuf {
#ifdef INLIB_MEM
  static const std::string& s_class() {
    static const std::string s_v("inlib::wall::wbuf");
    return s_v;
  }
#endif
public:
  const char* buf() const {return m_buffer;}
  uint32 length() const {return m_pos-m_buffer;}
public:
  wbuf(std::ostream& a_out,uint32 a_size = 1024)
  :m_out(a_out)
  ,m_size(0)
  ,m_buffer(0)
  ,m_max(0)
  ,m_pos(0)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    m_buffer = new char[a_size];
    if(!m_buffer) return;
    m_size = a_size;
    m_max = m_buffer+m_size;
    m_pos = m_buffer;
  }
  virtual ~wbuf(){
    delete [] m_buffer;
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  wbuf(const wbuf& a_from)
  :m_out(a_from.m_out){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
  wbuf& operator=(const wbuf&){return *this;}
public:
  void reset_pos() {m_pos = m_buffer;}

  template <class T>
  bool write(const T& a_v) {
    size_t sz = sizeof(T);
    if((m_pos+sz)>m_max) {
      if(!expand(inlib::mx<uint32>(2*m_size,m_size+sz))) return false;
    }
    if(!m_buffer) return false;

    if(is_little_endian()) {
      ::memcpy(m_pos,&a_v,sz);
    } else {
      char* pos = (char*)&a_v;
      for(unsigned int i=0;i<sz;i++,pos++) m_pos[sz-1-i] = *pos;
    }

    m_pos += sz;
    return true;
  }

  bool write(unsigned int a_sz,const char* a_b) {
    if((m_pos+a_sz)>m_max) {
      if(!expand(inlib::mx<uint32>(2*m_size,m_size+a_sz))) return false;
    }
    if(!m_buffer) return false;
    ::memcpy(m_pos,a_b,a_sz);
    m_pos += a_sz;
    return true;
  }
protected:
  bool expand(uint32 a_new_size) {
    unsigned long len = m_pos-m_buffer;
    if(!realloc<char>(m_buffer,a_new_size,m_size)) {
      m_out << "inlib::wall::wbuf::expand :"
            << " can't realloc " << a_new_size << " bytes."
            << std::endl;
      m_size = 0;
      m_max = 0;
      m_pos = 0;
      return false;
    }
    m_size = a_new_size;
    m_max = m_buffer + m_size;
    m_pos = m_buffer + len;
    return true;
  }
protected:
  std::ostream& m_out;
  uint32 m_size;
  char* m_buffer;
  char* m_max;
  char* m_pos;
};

}}

#endif
