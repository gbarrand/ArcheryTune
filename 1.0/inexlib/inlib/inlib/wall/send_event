// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_wall_send_event
#define inlib_wall_send_event

#include "../net/base_socket"
#include "event"
#include "wbuf"
#include "evt_user"

#ifdef INLIB_MEM
#include "../mem"
#endif

namespace inlib {
namespace wall {

inline bool send_event(net::base_socket& a_sock,const event& a_event) {
  if(a_event.type==EVT_MOUSEMOTION) {
    wbuf b(a_sock.out(),
           4*sizeof(uchar)+2*sizeof(coord_t)+2*sizeof(rcoord_t));

    if(!b.write<uchar>(a_event.type)) return false;
    if(!b.write<uchar>(a_event.motion.type)) return false;
    if(!b.write<uchar>(a_event.motion.which)) return false;
    if(!b.write<uchar>(a_event.motion.state)) return false;
    if(!b.write<coord_t>(a_event.motion.x)) return false;
    if(!b.write<coord_t>(a_event.motion.y)) return false;
    if(!b.write<rcoord_t>(a_event.motion.xrel)) return false;
    if(!b.write<rcoord_t>(a_event.motion.yrel)) return false;

    if(!a_sock.send<uint64>(b.length())) return false;
    if(!a_sock.send_buffer(b.buf(),b.length())) return false;

    return true;

  } else if((a_event.type==EVT_MOUSEBUTTONDOWN)  ||
            (a_event.type==EVT_MOUSEBUTTONUP)    ){
    wbuf b(a_sock.out(),5*sizeof(uchar)+2*sizeof(ushort));

    if(!b.write<uchar>(a_event.type)) return false;
    if(!b.write<uchar>(a_event.button.type)) return false;
    if(!b.write<uchar>(a_event.button.which)) return false;
    if(!b.write<uchar>(a_event.button.button)) return false;
    if(!b.write<uchar>(a_event.button.state)) return false;
    if(!b.write<coord_t>(a_event.button.x)) return false;
    if(!b.write<coord_t>(a_event.button.y)) return false;

    if(!a_sock.send<uint64>(b.length())) return false;
    if(!a_sock.send_buffer(b.buf(),b.length())) return false;

    return true;

  } else if( (a_event.type==EVT_QUIT) ||
             (a_event.type==EVT_NOEVENT) ){
    wbuf b(a_sock.out(),sizeof(uchar));

    if(!b.write<uchar>(a_event.type)) return false;

    if(!a_sock.send<uint64>(b.length())) return false;
    if(!a_sock.send_buffer(b.buf(),b.length())) return false;

    return true;

  } else if( (a_event.type==EVT_KEYDOWN) ||
             (a_event.type==EVT_KEYUP)   ){
    wbuf b(a_sock.out(),2*sizeof(uchar)+2*sizeof(ushort));

    if(!b.write<uchar>(a_event.type)) return false;
    if(!b.write<uchar>(a_event.key.type)) return false;
    if(!b.write<ushort>(a_event.key.keysym.sym)) return false;
    if(!b.write<ushort>(a_event.key.keysym.mod)) return false;

    if(!a_sock.send<uint64>(b.length())) return false;
    if(!a_sock.send_buffer(b.buf(),b.length())) return false;

    return true;

  } else if(a_event.type==EVT_USEREVENT) {

    if(   (a_event.user.code==EVT_USER_QUIT())
       || (a_event.user.code==EVT_USER_SYNC_MOVE())
       || (a_event.user.code==EVT_USER_SYNC_ANIM())
       || (a_event.user.code==EVT_USER_SYNC_CLIENT())
       ){
      // user event with no data1, data2 :

      wbuf b(a_sock.out(),2*sizeof(uchar)+1*sizeof(int)+2*4);

      if(!b.write<uchar>(a_event.type)) return false;
      if(!b.write<uchar>(a_event.user.type)) return false;
      if(!b.write<int>(a_event.user.code)) return false;

      if(!a_sock.send<uint64>(b.length())) return false;
      if(!a_sock.send_buffer(b.buf(),b.length())) return false;

      return true;

    } else if(    (a_event.user.code==EVT_USER_FILE())
               || (a_event.user.code==EVT_USER_DOCUMENT()) 
               || (a_event.user.code==EVT_USER_COMMAND()) 
               || (a_event.user.code==EVT_USER_STRING()) 
               || (a_event.user.code==EVT_USER_GET_FILE()) 
               || (a_event.user.code==EVT_USER_ANIM())
               ){

      unsigned int ls;
      read_buffer<unsigned int>((const char*)&(a_event.user.data1),ls);

      wbuf b(a_sock.out(),2*sizeof(uchar)+1*sizeof(int)+4+(ls+1));

      if(!b.write<uchar>(a_event.type)) return false;
      if(!b.write<uchar>(a_event.user.type)) return false;
      if(!b.write<int>(a_event.user.code)) return false;

      if(!b.write(4,(char*)&(a_event.user.data1))) return false;
      if(!b.write(ls+1,(char*)a_event.user.data2)) return false;

      if(!a_sock.send<uint64>(b.length())) return false;
      uint64 BLOCK = 1048576;
      if(!a_sock.send_buffer(b.buf(),b.length(),BLOCK)) return false;

      return true;
     
    } else if( (a_event.user.code==EVT_USER_UPDATE_KEY_MOTION())
	    || (a_event.user.code==EVT_USER_WINDOW_MASTER_SIZE())
            ){

      wbuf b(a_sock.out(),2*sizeof(uchar)+1*sizeof(int)+2*4);

      if(!b.write<uchar>(a_event.type)) return false;
      if(!b.write<uchar>(a_event.user.type)) return false;
      if(!b.write<int>(a_event.user.code)) return false;

      //WARNING : sizeof(void*) is not portable but is at least 4 bytes.
      //          The below assumes that only 4 bytes of data
      //          had been deposited on data1,data2.
      if(!b.write(4,(char*)&(a_event.user.data1))) return false;
      if(!b.write(4,(char*)&(a_event.user.data2))) return false;

      if(!a_sock.send<uint64>(b.length())) return false;
      if(!a_sock.send_buffer(b.buf(),b.length())) return false;

      return true;

    } else {
      a_sock.out() << "inlib::wall::send_event :"
                   << " EVT_USEREVENT : unknow user code "
                   << a_event.user.code << "."
                   << std::endl;
      return false;

    }

  } else {
    a_sock.out() << "inlib::wall::send_event :"
                 << " unknow event type " << a_event.type << "."
                 << std::endl;
    return false;
  }
}

}}

#include "../sout"

namespace inlib {
namespace wall {

inline void fill_event_with_string(const std::string& a_string,event& a_event){
  a_event.type = EVT_USEREVENT;
  a_event.user.type = EVT_USEREVENT;
  //do not set a_event.user.code here.
  unsigned int length = a_string.size();
  write_buffer<unsigned int>(length,(char*)&(a_event.user.data1));
  char* buffer = new char[length+1];  //to be free by the user.  
#ifdef INLIB_MEM
  inlib::mem::increment(inlib::s_new().c_str());
#endif
  ::memcpy(buffer,a_string.c_str(),length+1);
  a_event.user.data2 = buffer;
}

inline void fill_event_with_file(std::ostream& a_out,
                                 const std::string& a_file,
                                 event& a_event) {
  a_event.type = EVT_USEREVENT;
  a_event.user.type = EVT_USEREVENT;
  //do not set a_event.user.code here.

  char* bufile;
  long length;
  if(!file::read_bytes(a_file,bufile,length)) {
    a_out << "fill_event_with_file : "
          << " can't read file " << sout(a_file) << "."
          << std::endl;
    //a_event.user.data1 = 0;
    //a_event.user.data2 = 0;
    //return false;
    //continue;
    length = 0;
    bufile = new char[1];    
#ifdef INLIB_MEM
    mem::increment(s_new().c_str());
#endif
  }
  //bufile is length+1

  //a_out << "fill_event_with_file : "
  //      << " file " << sout(a_file) 
  //      << " size " << (unsigned int)length << "."
  //      << std::endl;

  //length could be 0. But bufile is not 0.

  write_buffer<unsigned int>(length,(char*)&(a_event.user.data1));
  a_event.user.data2 = bufile;

  //return true;
}

}}

#endif
