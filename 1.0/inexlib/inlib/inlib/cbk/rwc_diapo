// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_rwc_diapo
#define inlib_cbk_rwc_diapo

// rwc = remote wall control = for exa controlling wall from a ioda app.

#include "base_diapo"

#include "../wall/data_client"
#include "../wall/protocol"
#include "../wall/strings"

namespace inlib {
namespace cbk {

class rwc_diapo : public base_diapo {
  typedef base_diapo parent;
protected:
  INLIB_CLASS_STRING(rwc_diapo_timer)
protected:
  inline const std::string& s_old_timer_diaporama() {
    static const std::string s_v("diaporama");
    return s_v;
  }

public:
  virtual return_action action() {
    if(parent::m_action==parent::action_setup()) {

      std::vector<std::string> opts;
      if(m_dc.socket().is_connected()) {
        if(!m_dc.socket().send_string
              (wall::protocol::s_rwc_get_data_sub_dirs())) {}
        if(!m_dc.socket().send_string(wall::s_dir_diaporama())) {}
        std::string slist;
        if(!m_dc.socket().fetch_string(slist)) {}
        words(slist,"\n",false,opts);
      }
      //opts.push_back("hep");
      //opts.push_back("space");
      //opts.push_back("landscape");
      //opts.push_back("Van_Gogh");
 
      sg::entries* entries = new sg::entries(m_gv.ttf());
      m_gv.set_colors(*entries);

      entries->add_opts("dir",opts.size()?opts[0]:"",opts);

      entries->add_uint("millisecs",15000);

      entries->add_color("image back",colorf::grey());

      entries->add_uint("clear at",1);
      entries->add_bool("same on all screens",true);
      entries->add_bool("if same, one screen ?",true);

      rwc_diapo* _cbk = new rwc_diapo(*this);
      _cbk->m_action = parent::action_start();
      _cbk->m_entries = entries;
      entries->add_callback(_cbk);

      m_gv.push_list(entries);
      return parent::return_to_render;     

    } else if(parent::m_action==parent::action_start()) {
      if(!parent::m_entries) {
        m_gv.map_warn_failed();
        return parent::return_to_render;     
      }

      // if changing the below, have to change wall/screen_dispatch.

      std::string opts;
      opts += sg::s_no_hide_menu();
      opts += ";";
      opts += sg::s_back_color();
      opts += "=";
      opts += parent::m_entries->values[parent::entry_back_color()];

      std::string prot;
      prot += wall::protocol::s_rwc_diapo_start();
      prot += "\n";

      // have a similar cmd than in wall/cbk/diaporama action_start() :
      std::string cmd;
      cmd += wall::s_timer_start();     //0
      cmd += "\n";
      cmd += parent::m_entries->values[parent::entry_time()];  //1
      cmd += "\n";
      cmd += s_old_timer_diaporama();          //2 //backcomp. No more used.
      cmd += "\n";
      cmd += parent::m_entries->values[parent::entry_what()];  //3
      cmd += "\n";
      cmd += parent::m_entries->values[parent::entry_same()];  //4
      cmd += "\n";
      cmd += parent::m_entries->values[parent::entry_one()];   //5
      cmd += "\n";
      cmd += parent::m_entries->values[parent::entry_clear()]; //6
      cmd += "\n";
      cmd += opts; //passed to exlib::opener opts. //7

      if(m_dc.socket().is_connected()) {
        if(!m_dc.socket().send_string(prot+cmd)) {}
      }

      return parent::return_none;     
  
    } else if(parent::m_action==parent::action_old_stop()) { //backcomp.

      if(m_dc.socket().is_connected()) {
        if(!m_dc.socket().send_string
              (wall::protocol::s_rwc_clear_scene())) {}
      }
 
      return parent::return_none;     

    } else {
      //action_setup()
      return parent::action();
    }
  }
  virtual sg::bcbk* copy() const {return new rwc_diapo(*this);}
public:
  rwc_diapo(sg::gui_viewer& a_gv,
            wall::data_client& a_dc,
            unsigned int a_action)
  :parent(a_gv,true,a_action)
  ,m_dc(a_dc)
  {}
  virtual ~rwc_diapo(){}
public:
  rwc_diapo(const rwc_diapo& a_from)
  :parent(a_from)
  ,m_dc(a_from.m_dc)
  {}
  rwc_diapo& operator=(const rwc_diapo& a_from){
    parent::operator=(a_from);
    return *this;
  }
protected:
  wall::data_client& m_dc;
};
  
}}

#endif
