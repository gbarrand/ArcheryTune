// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_app
#define inlib_app

#include "system"
#include "file"
#include "forit"
#include "sys/dir"

namespace inlib {

#ifdef __APPLE__
inline bool is_mac_app(const std::string& a_arg0){
  if(a_arg0.empty()) return false;
  std::string bname = inlib::base_name(inlib::dir_name(a_arg0));
  if(bname=="MacOS") return true;
  return false;
}
#else
inline bool is_mac_app(const std::string&){return false;}
#endif

inline bool program_path(const std::string& a_arg0,std::string& a_path) {
  if(a_arg0.empty()) {
    a_path = "";
    return false;
  }
  std::string path,name,suffix;
  path_name_suffix(a_arg0,path,name,suffix);
  if(path.empty()) {
    std::string PATH;
    if(inlib::getenv("PATH",PATH)) {
      std::string program = a_arg0;
#if defined(WIN32) || (defined(__CYGWIN__) && defined(__GNUC__))
      if(program.find(".exe")==std::string::npos) program += ".exe";
#endif
      std::vector<std::string> paths = words(PATH,psep());
      inlib_vforit(std::string,paths,it) {
        std::string dir = *it;
        if(file::exists(dir+sep()+program)) {
          path = dir;
          break;
        }
      }
    }
  }
  if(path.empty()) {
    a_path = "";
    return false;
  }
  if(!is_absolute_path(path)) {
    std::string pwd;
    if(!dir::pwd(pwd)) {
      a_path = "";
      return false;
    }
    path = pwd+sep()+path;
  }
  //printf("debug : path : %s\n",path.c_str());
  a_path = path;
  return true;
}

inline bool if_mouse_startup(const std::string& a_arg0,const std::string& a_env_HOME_DIR,const std::vector<std::string>& a_home_dirs,std::ostream& a_out){
  std::string exe_dir = inlib::dir_name(a_arg0);
  std::string bname = inlib::base_name(exe_dir);
  if(bname=="MacOS") {
    // cd in a_doc_dir :
    if(!inlib::dir::cd_home()) {
      a_out << "if_mouse_startup : can't go home." << std::endl;
      return false;
    }
    inlib_vforcit(std::string,a_home_dirs,it) {
      if(!inlib::dir::mkcd(*it)) {
        a_out << "if_mouse_startup :"
              << " can't mkcd " << sout(*it)
              << std::endl;
        return false;
      }
    }

    // set a_env_HOME_DIR from exe_dir :
    std::string Contents_dir = inlib::dir_name(exe_dir);
    if(!inlib::putenv(a_env_HOME_DIR,Contents_dir)) {
      a_out << "if_mouse_startup :"
            << " can't putenv " << a_env_HOME_DIR 
            << " to " << inlib::sout(Contents_dir)
            << "."
            << std::endl;
      return false;
    }

   {std::vector<std::string> vals;
    vals.push_back(Contents_dir+"/bin");
    vals.push_back("."); // for on-the-fly compilation and loading :
    if(!inlib::env_path_append("DYLD_LIBRARY_PATH",vals)) return false;}

    if(!inlib::isenv("DISPLAY")) {
      if(!inlib::putenv("DISPLAY",":0.0")) return false;
    }

  } else if(bname=="bin") {
    //Linux, Windows : mouse startup ?

/* FIXME : do we want to treat the case of a terminal startup
           whence the user did not <source setup> ???
           If so if_mouse_startup should be renamed no_env_startup.

  } else if(exe_dir=="") { //for exa when typing "osc-plot".
    if(!program_path(a_arg0,exe_dir)) {
      a_out << "if_mouse_startup :"
            << " program_path failed for " << inlib::sout(bname) << "."
            << std::endl;
      return false;
    }
    a_out << "if_mouse_startup :"
          << " program_path is " << inlib::sout(exe_dir) << "."
          << std::endl;

#if defined(__APPLE__) || defined(Linux)
    bool is_abs,is_win;
    std::string drive;
    std::vector<std::string> words = path_words(exe_dir,is_abs,is_win,drive);
    std::vector<std::string>::size_type n = words.size();
    
    if( (n>=3) && 
        (words[n-1]=="bin") && 
        is_version(words[n-2]) &&
        (words[n-3].substr(0,4)=="osc_") 
      ){

      std::string osc_vers_dir = inlib::dir_name(exe_dir);

      printf("debug : auto env 000 \"%s\"\n",osc_vers_dir.c_str());

      //if(a_env_HOME_DIR.size()) {
        if(!inlib::putenv(a_env_HOME_DIR,osc_vers_dir)) {
          a_out << "arg0_setenv :"
                << " can't putenv " << a_env_HOME_DIR 
                << " to " << inlib::sout(osc_vers_dir)
                << "."
                << std::endl;
          return false;
        }
      //}

#ifdef __APPLE__

     {std::vector<std::string> vals;
      vals.push_back(osc_vers_dir+"/bin");
      vals.push_back(osc_vers_dir+"/lib");
      vals.push_back("."); // for on-the-fly compilation and loading :
      if(!inlib::env_path_append("DYLD_LIBRARY_PATH",vals)) return false;}

#else
#endif

      if(!inlib::isenv("DISPLAY")) {
        if(!inlib::putenv("DISPLAY",":0.0")) return false;
      }

    }
#endif
*/

  }

  return true;
}

}

#endif
