// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_histo_h1d
#define inlib_histo_h1d

#include "h1"

namespace inlib {
namespace histo {

// d in h1d is for double (and not dimension).

class h1d : public h1<double,unsigned int,double,double> {
  typedef h1<double,unsigned int,double,double> parent;
public:
  static const std::string& s_class() {
    static const std::string s_v("inlib::histo::h1d");
    return s_v;
  }
public:
  h1d(const std::string& a_title,unsigned int aXnumber,double aXmin,double aXmax)
  :parent(a_title,aXnumber,aXmin,aXmax){}

  h1d(const std::string& a_title,const std::vector<double>& aEdges)
  :parent(a_title,aEdges){}

  virtual ~h1d(){}
public:
  h1d(const h1d& a_from): parent(a_from){}
  h1d& operator=(const h1d& a_from){
    parent::operator=(a_from);
    return *this;
  }
public:
#ifdef __CINT__
  bool fill(double aX,double aW = 1) {return parent::fill(aX,aW);}
  double mean() const {return parent::mean();}
  double rms() const {return parent::rms();}
  unsigned int entries() const {return parent::entries();}
  void hprint(std::ostream& a_out) {parent::hprint(a_out);}
#endif

private:static void check_instantiation() {h1d h("",10,0,1);h.gather_bins(5);}
};

}}

#endif




