// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_doc_anim
#define inlib_sg_doc_anim

#include "base_anim"
#include "node"

#include "../file_iterator"
#include "../file_opener"
#include "../file"
#include "../sys/file"

#include "strings"

#include "sfs"

namespace inlib {
namespace sg {

class doc_anim : public base_anim, public node {
  INLIB_NODE_NO_CAST(doc_anim,inlib::sg::doc_anim,node)
public:
  virtual void* cast(const std::string& a_class) const {
    {if(void* p = cmp_cast<doc_anim>(this,a_class)) return p;}
    {if(void* p = base_anim::cast(a_class)) return p;}
    return parent::cast(a_class);
  }
public:
  sf<unsigned int> time_interval; //msecs
public:
  virtual const std::vector<field_desc>& node_fields() const {
    static std::vector<field_desc> s_v;
    if(s_v.empty()) {
      s_v = parent::node_fields();
      INLIB_ADD_FIELD_DESC(delay)
      INLIB_ADD_FIELD_DESC(time_interval)
    }
    return s_v;
  }
private:
  void add_fields(){
    add_field(&delay);
    add_field(&time_interval);
  }
public: //base_anim
  virtual bool action(std::ostream& a_out,const atime& a_now) {
    if(!m_it.entries()) return true;
  
    if(time_interval.value()) {
      unsigned int elaps =
        (unsigned int)atime::diff(a_now,m_prev).milli_seconds();
      if(elaps<=time_interval.value()) return false; //do not set m_prev.
    }

    inlib::args args = m_args;

   {if(!m_iclear) args.add(inlib::sg::s_clear_scene());
    m_iclear++;
    if(m_iclear>=m_nclear) m_iclear = 0;}

    unsigned int sz;
    char* buffer;
    if(m_it.begin_buffer(sz,buffer)) {
      if(sz && buffer) {        
        bool done;
        if(!m_opener.open(sz,buffer,args,done)){
          a_out << "inlib::sg::doc_anim::action :"
                << " file_opener.open() failed."
                << std::endl;
        } else {
          if(done) {
          } else {
            std::string DOCUMENT;
            if(!inlib::tmpname(m_tmp_dir,"inlib_sg_doc_anim_","",DOCUMENT)) {
              a_out << "inlib::sg::doc_anim::action :"
                    << " can't get tmp file name."
                    << std::endl;
            } else {
              if(!inlib::file::write_bytes(DOCUMENT,buffer,(size_t)sz)) {
                a_out << "inlib::sg::doc_anim::action :"
                      << " can't write file " << inlib::sout(DOCUMENT) << "."
                      << std::endl;
              } else {
                if(!m_opener.open(DOCUMENT,inlib::file::s_format_guessed(),
                                  args,done) || !done) {
                  a_out << "inlib::sg::doc_anim::action :"
                        << " open_file failed."
                        << std::endl;
                } else {
                }
              }
              ::remove(DOCUMENT.c_str());
            }
          }
        }
      }
      m_it.end_buffer(buffer);
    } else {
      a_out << "inlib::sg::doc_anim::action :"
            << " file_iterator::begin_buffer() failed."
            << std::endl;
    }

    m_it.next();
    if(m_it.index()>=m_it.entries()) m_it.rewind();

    return true;
  }
public: //node
  virtual void event(event_action& a_action) {
    //node::event(a_action);
    if(touched()) {
      m_it.rewind();
      reset_touched();
    }
    do_event(a_action);
  }
public:
  doc_anim(const atime& a_start,
           file_iterator& a_it,file_opener& a_opener,
           const std::string& a_tmp_dir,
           unsigned int a_nclear,
           const args& a_args)
  :base_anim(a_start)
  ,parent()

  ,time_interval(0)

  ,m_it(a_it)
  ,m_opener(a_opener)
  ,m_tmp_dir(a_tmp_dir)
  ,m_nclear(a_nclear)
  ,m_args(a_args)
  ,m_iclear(0)
  {
    add_fields();
  }
  virtual ~doc_anim(){}
public:
  doc_anim(const doc_anim& a_from)
  :base_anim(a_from)
  ,parent(a_from)

  ,time_interval(a_from.time_interval)

  ,m_it(a_from.m_it)
  ,m_opener(a_from.m_opener)
  ,m_tmp_dir(a_from.m_tmp_dir)
  ,m_nclear(a_from.m_nclear)
  ,m_args(a_from.m_args)
  ,m_iclear(a_from.m_iclear)
  {
    add_fields();
  }
  doc_anim& operator=(const doc_anim& a_from){
    base_anim::operator=(a_from);
    parent::operator=(a_from);

    time_interval = a_from.time_interval;

    m_tmp_dir = a_from.m_tmp_dir;
    m_nclear = a_from.m_nclear;
    m_args = a_from.m_args;
    m_iclear = a_from.m_iclear;
    return *this;
  }
protected:
  file_iterator& m_it;
  file_opener& m_opener;
  std::string m_tmp_dir;
  unsigned int m_nclear;
  args m_args;
  unsigned int m_iclear;
};

}}

#endif
