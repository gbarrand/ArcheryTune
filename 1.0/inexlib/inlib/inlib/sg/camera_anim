// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_camera_anim
#define inlib_sg_camera_anim

#include "base_anim"
#include "node"

#include "enums"

#include "../mathf"
#include "../curve"

namespace inlib {
namespace sg {

class base_cam_anim {
public:
  INLIB_SCLASS(inlib::sg::base_cam_anim)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<base_cam_anim>(this,a_class)) return p;
    return 0;
  }
public:
  base_cam_anim():m_curve(0){}
  virtual ~base_cam_anim(){delete m_curve;}
public:
  base_cam_anim(const base_cam_anim& a_from):m_curve(0) {
    if(a_from.m_curve) a_from.m_curve->copy(m_curve);
  }
  base_cam_anim& operator=(const base_cam_anim& a_from){
    delete m_curve;
    m_curve = 0;
    if(a_from.m_curve) a_from.m_curve->copy(m_curve);
    return *this;
  }
public:
  void set_curve(curve* a_curve) { //get ownership.
    delete m_curve;
    m_curve = a_curve;
  }
protected:
  curve* m_curve;
};

template <class CAMERA>
class camera_anim : public base_anim, public base_cam_anim, public CAMERA {
public:
  INLIB_T_SCLASS(CAMERA,inlib::sg::camera_anim)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = cmp_cast<camera_anim>(this,a_class)) return p;
    if(void* p = base_anim::cast(a_class)) return p;
    if(void* p = base_cam_anim::cast(a_class)) return p;
    return CAMERA::cast(a_class);
  }
public: //node
  virtual node* copy() const {return new camera_anim(*this);}
  virtual const std::string& s_cls() const {return s_class();}
public:
  virtual bool action(std::ostream&,const atime& a_now) {
    //float t = float(atime::diff(a_now,m_start).value());
    //float tp = float(atime::diff(m_prev,m_start).value());

    float _dx = CAMERA::dx;
    float _da = CAMERA::da;
    float _ds = CAMERA::ds;

    if(m_what==move_rotate_right) {
      CAMERA::rotate_around_up(-_da);
    } else if(m_what==move_rotate_left) {
      CAMERA::rotate_around_up(_da);

    } else if(m_what==move_translate_right) {
      CAMERA::translate_along_side(_dx);
    } else if(m_what==move_translate_left) {
      CAMERA::translate_along_side(-_dx);

    } else if(m_what==move_up) {
      CAMERA::translate_along_up(_dx);
    } else if(m_what==move_down) {
      CAMERA::translate_along_up(-_dx);

    } else if(m_what==move_forward) {
      CAMERA::translate_along_dir(_dx);
    } else if(m_what==move_backward) {
      CAMERA::translate_along_dir(-_dx);

    } else if(m_what==move_zoom_in) {
      CAMERA::zoom(_ds);
    } else if(m_what==move_zoom_out) {
      CAMERA::zoom(1.0f/_ds);

    } else if(m_what==move_rotate_around_focal_right) {
      CAMERA::rotate_around_y_at_focal(-_da);

    } else if(m_what==move_rotate_around_focal_left) {
      CAMERA::rotate_around_y_at_focal(_da);

    } else if(m_what==move_zoom_in_out) {
      float t = float(atime::diff(a_now,m_start).value());
      //float tp = float(atime::diff(m_prev,m_start).value());

      float cycle = m_cycle?float(m_cycle):10;
      float omega = ftwo_pi()/cycle;

      _ds = 1.0f - (1.0f-_ds) * (2.0f * (steps(omega*t)-0.5f));

      CAMERA::zoom(_ds);

    } else if(m_what==move_zoom_in_out_rot) {
      float t = float(atime::diff(a_now,m_start).value());
      float tp = float(atime::diff(m_prev,m_start).value());

      float f3_pi = 3.0f*fpi();

      float cycle = m_cycle?float(m_cycle):10;
      float omega = f3_pi/cycle;

      float angle = omega*t;
      int n = int(angle/f3_pi);
      float r = angle-n*f3_pi;

      if(r<fpi()) {
        CAMERA::zoom(_ds);
      } else if( (fpi()<=r) && (r<ftwo_pi()) ) {
        CAMERA::zoom(1.0f/_ds);
      } else {
        // 10/3 s -> fhalf_pi()
        _da = (t-tp)*3*fhalf_pi()/cycle;        
        CAMERA::rotate_around_y_at_focal(-_da);
      }

    } else if(m_what==move_curve) {
      float t = float(atime::diff(a_now,m_start).value());
      //float tp = float(atime::diff(m_prev,m_start).value());

      curve* _curve = m_curve;
      if(_curve) {

        float cycle = m_cycle?float(m_cycle):10;
        float omega = ftwo_pi()/cycle;
        float _s = omega*t;

        vec3f pos,tan,nor;
        if(!_curve->pos_tan_nor(_s,pos,tan,nor)) {}

        CAMERA::position = pos;
        
        CAMERA::orientation.value().set_value(vec3f(0,0,-1),tan);

        vec3f up;
        CAMERA::orientation.value().mult_vec(vec3f(0,1,0),up);
        CAMERA::orientation.value
          (CAMERA::orientation.value()*rotf(up,nor));
      }

    }

    return true;
  }
public:
  virtual void event(event_action& a_action) {
    node::event(a_action);
    do_event(a_action);
  }
public:
  camera_anim(const atime& a_start,int a_what,unsigned int a_cycle)
  :base_anim(a_start)
  ,base_cam_anim()
  ,CAMERA()
  ,m_what(a_what)
  ,m_cycle(a_cycle)
  {
    m_start_pos = CAMERA::position.value();
    m_start_rot = CAMERA::orientation.value();
  }
  camera_anim(CAMERA& a_camera,
              const atime& a_start,float,int a_what,unsigned int a_cycle)
  :base_anim(a_start)
  ,base_cam_anim()
  ,CAMERA(a_camera)
  ,m_what(a_what)
  ,m_cycle(a_cycle)
  {
    m_start_pos = CAMERA::position.value();
    m_start_rot = CAMERA::orientation.value();
  }
  virtual ~camera_anim(){}
public:
  camera_anim(const camera_anim& a_from)
  :base_anim(a_from)
  ,base_cam_anim(a_from)
  ,CAMERA(a_from)
  ,m_what(a_from.m_what)
  ,m_cycle(a_from.m_cycle)
  ,m_start_pos(a_from.m_start_pos)
  ,m_start_rot(a_from.m_start_rot)
  {}
  camera_anim& operator=(const camera_anim& a_from){
    base_anim::operator=(a_from);
    base_cam_anim::operator=(a_from);
    CAMERA::operator=(a_from);
    m_what = a_from.m_what;
    m_cycle = a_from.m_cycle;
    m_start_pos = a_from.m_start_pos;
    m_start_rot = a_from.m_start_rot;
    return *this;
  }
//public:
//  CAMERA* copy_not_anim() const {return new CAMERA(*this);}
protected:
  static float steps(float a_x) {
    if(a_x<0) return 0;
    int n = int(a_x/ftwo_pi());	
    float r = a_x-n*ftwo_pi();
    if(r<fpi()) return 1;
    return 0;
  }
protected:
  int m_what;
  unsigned int m_cycle; //secs
  vec3f m_start_pos;
  rotf m_start_rot;
};

}}

#endif

/* trash : 

    } else if(m_what==move_forback) {
      float t = float(atime::diff(a_now,m_start).value());
    //float tp = float(atime::diff(m_prev,m_start).value());

      float omega = ftwo_pi()/10.0f;

      vec3f dir;
      CAMERA::orientation.value().mult_vec(vec3f(0,0,-1),dir);

      float travel = CAMERA::focal.value()*0.95f;

      vec3f pos = m_start_pos;
      pos += dir * travel * (1.0f+fcos(fpi()+omega*t))*0.5f;
      
      CAMERA::position = pos;

*/



