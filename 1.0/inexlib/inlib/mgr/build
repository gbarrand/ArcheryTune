#!/bin/sh -f

build_verbose=no
what=

build_args=
while test $# -ge 1 ; do
  case $1 in
    -v) build_verbose=yes;build_args="${build_args} $1";;
    -*) build_args="${build_args} $1";;
     *) if [ $# = 1 ] ; then
          what=$1
        else         
          echo "unknown option : $1"
        fi
        ;;
  esac
  shift
done

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////

if [ "${what}" = "" ] ; then
  ./find_rm ../examples/cpp 'inlib_example_*'
  ./find_rm ../inlib '*.gch.*'
  ./find_rm ../inlib '*.cxx'
  find ../inlib -name "*" -exec grep exlib.license {} \;
  
  find ../inlib -name '*' -type f -exec ./build ${build_args} {} \;
  #exit

  dirs=
  dirs="${dirs} ../apps"
  dirs="${dirs} ../tests"
  for dir in ${dirs} ; do
    find ${dir} -maxdepth 1 -name '*.cpp' -type f -exec ./build ${build_args} {} \;
  done


  # NOTE : for exas, we use the local build script.
  find ../examples/cpp -maxdepth 1 -name '*.cpp' -type f -exec ./build_exa ${build_args} {} \;

  exit
fi

if [ -d "${what}" ] ; then
  find ${what} -name '*' -type f -exec ./build ${build_args} {} \;
  exit
fi

base_name=`basename ${what}`

if [ "${what}" = "${base_name}" ] ; then
  # only the name entered, find exact places :
  found="`find .. -name "${base_name}" -print`"
  if [ "${found}" = "" ] ; then
    echo "not found."
  else
    find .. -name "${base_name}" -type f -exec ./build ${build_args} {} \;
  fi
  exit
fi

if [ "`echo ${what} | grep examples`" != "" ] ; then
  ./build_exa ${build_args} ${what}
  exit
fi

#echo $1
dir=`dirname ${what}`
name=`basename ${what}`
group=`basename ${dir}`

suffix=`echo ${base_name} | sed 's:.*\.::'`
if [ "${suffix}" = "" ] ; then suffix=none;fi

name=`echo ${name} | sed -e "s:\.${suffix}::g"`

#echo "dir : ${dir}"
#echo "group : ${group}"
#echo "name : ${name}"
#exit

#////////////////////////////////////
#/// to skip : //////////////////////
#////////////////////////////////////
if [ "`echo ${what} | grep '\.help'`" != "" ] ; then exit; fi
if [ "`echo ${what} | grep '\.icc'`" != "" ] ; then exit; fi
if [ ${group} = "CVS" ] ; then exit;fi
if [ ${name} = "README" ] ; then exit;fi

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////
if [ ${build_verbose} = yes ] ; then
  echo "do : ${what}"
fi

inlib_mgr=.
. ${inlib_mgr}/build_header

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////

if [ ${build_visual} = "yes" ] ; then
  # rm painfull warnings about API strcpy, etc... deprecated.
  cppflags="${cppflags} /wd4996"
  ccflags0="${ccflags0} /wd4996"
fi

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////

use_inlib=yes

is_app=no
is_plugin=no

is_test=no
if [ ${group} = "apps" ] ; then is_app=yes; fi
if [ ${group} = "tools" ] ; then is_app=yes; fi
if [ ${group} = "tests" ] ; then
  is_app=yes
  is_test=yes
fi

if [ ${is_app} = "yes" ] ; then

  if [ ${name} = "thread" ] ; then
    if [ ${build_visual} = "yes" ] ; then
      cppflags="${cppflags} "
    else
      use_thread=yes
    fi
  fi

  if [ ${name} = "plug" ] ; then
    if [ `uname` = "Darwin" ] ; then
      libs="${libs}"
    elif [ `uname` = "Linux" ] ; then
      #libs="${libs} -L/usr/${lib} -ldl"
      libs="${libs} /usr/${lib}/libdl.so"
    fi
  fi

  if [ ${name} = "plugin" ] ; then
    is_plugin=yes
    is_app=no
    plugin=${name}
    cppfiles="${cppfiles} ${what}"
  fi

  if [ ${name} = "inline_link" ] ; then
    cppfiles="${cppfiles} ../tests/a.cpp ../tests/b.cpp"
  fi

  if [ ${name} = "utest" ] ; then
    /bin/rm -f tmp_0
    find ../tests/test -name '*.cpp' -print > tmp_0
    for file in $(cat tmp_0) ; do cppfiles="${cppfiles} ${file}";done
    /bin/rm -f tmp_0
  fi

  if [ ${name} = "unet" ] ; then
    cppfiles="${cppfiles} ../tests/test/ftp.cpp"
    cppfiles="${cppfiles} ../tests/test/http.cpp"
  fi

#  if [ ${name} = "algebra" ] ; then
#    if [ `uname` = "Darwin" ] ; then
#     libs="${libs} -framework Accelerate"
#   fi
# fi

  if [ ${name} = "a" ] ; then exit; fi
  if [ ${name} = "b" ] ; then exit; fi
  if [ ${name} = "gen_solids" ] ; then exit; fi

  if [ ${name} = "stl" ] ; then
    if [ ${build_visual} = "yes" ] ; then
      echo "stl : inlib/stl/vector does not compile."
      exit
    fi
  fi

  if [ ${name} = "utest" ] ; then use_socket=yes;fi
  if [ ${name} = "wserv_client" ] ; then use_socket=yes;fi
  if [ ${name} = "mail_file" ] ; then use_socket=yes;fi
  if [ ${name} = "file2wall" ] ; then use_socket=yes;fi
  if [ ${name} = "ftp" ] ; then use_socket=yes;fi
  if [ ${name} = "http" ] ; then use_socket=yes;fi
  if [ ${name} = "hostaddr" ] ; then use_socket=yes;fi
  if [ ${name} = "wall_data_client" ] ; then use_socket=yes;fi
  if [ ${name} = "mail" ] ; then use_socket=yes;fi

  if [ ${name} = "f77mn.out" ] ; then exit;fi
  if [ ${name} = "test_encode.txt" ] ; then exit;fi
  if [ ${name} = "input_gen" ] ; then exit;fi
fi

# ////////////////////////////////////
# ////////////////////////////////////
# ////////////////////////////////////
. ${inlib_mgr}/use_inlib

. ${inlib_mgr}/use_socket

. ${inlib_mgr}/use_thread

# ////////////////////////////////////
# ////////////////////////////////////
# ////////////////////////////////////

for file in ${cppfiles} ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.cpp::g'`
  obj="${oname}.o"
  if [ ${build_visual} = "yes" ] ; then
    eval ${cpp_compiler} /c ${cppflags} /Fo${obj} ${file}
  else
    eval ${cpp_compiler} -x c++ -c ${cppflags} -o ${obj} ${file}
  fi
  objs="${objs} ${obj}"
done

# ////////////////////////////////////
# ////////////////////////////////////
# ////////////////////////////////////

if [ ${build_verbose} = yes ] ; then
  echo "build path is ${build_path}"
fi

/bin/mkdir -p ${build_path}

if [ ${is_app} = "yes" ] ; then

  file_exe="${build_path}/${name}"
  if [ ${build_visual} = "yes" ] ; then
    file_exe="${file_exe}.exe"
  fi
 
  /bin/rm -f ${file_exe}

  if [ "${suffix}" = "c" ] ; then
    cpp_compiler="${cc_compiler}"
    cpp_linker="${cc_linker}"
    cppflags="${ccflags}"
  fi

  obj="${build_path}/main.o"
  if [ ${build_visual} = "yes" ] ; then
    eval ${cpp_compiler} /c ${cppflags} /Fo${obj} ${what}
    objs="${objs} ${obj}"
    eval ${cpp_linker} ${linker_flags} /nologo /OPT:NOREF /out:${file_exe} ${objs} ${libs}
  else
    eval ${cpp_compiler} -c ${cppflags} -o ${obj} ${what}
    objs="${objs} ${obj}"
    eval ${cpp_linker} ${linker_flags} -o ${file_exe} ${objs} ${libs}
  fi

  /bin/rm -f ${objs}

elif [ ${is_plugin} = "yes" ] ; then

  . ./build_plugin

else

  file_o="${dir}/${name}.o"

  if [ ${build_visual} = "yes" ] ; then
    eval ${cpp_compiler} /c ${cppflags} /Fo${file_o} /Tp${what}
  else
    eval ${cpp_compiler} -x c++ -c ${cppflags} -o ${file_o} ${what}
  fi

  /bin/rm -f ${file_o}
fi

