
cc_compiler=cc_not_defined

ccflags=
mflags=

if [ ${build_gnu} = "yes" ] ; then
  config_name=gnu
  is_10_9=no
  if [ `uname` = Darwin ] ; then
    osx_vers="`sw_vers -productVersion`"
    if [ "`echo ${osx_vers} | sed -e 's:10.9::g'`" != "${osx_vers}" ] ; then is_10_9=yes;fi
  fi
  if [ "${is_10_9}" = "yes" ] ; then
    cc_compiler=/opt/local/bin/gcc-mp-4.8
    cc_linker=/opt/local/bin/gcc-mp-4.8
  else
    cc_compiler=gcc
    cc_linker=gcc
  fi

elif [ ${build_gnu_11} = "yes" ] ; then
  config_name=gnu_11
  cc_compiler="gcc"
  cc_linker=gcc

elif [ ${build_intel} = "yes" ] ; then
  config_name=intel
  cc_compiler=icc
  cc_linker=icc

elif [ ${build_clang} = "yes" ] ; then
  config_name=clang
  cc_compiler=clang
  cc_linker=clang

elif [ ${build_sdk_mac} = "yes" -o ${build_sdk_mac_gnu} = "yes" ] ; then

  # options taken from the output of :
  #   Darwin> xcodebuild -sdk macosx -configuration Release build

  if [ ${build_sdk_mac} = "yes" ] ; then
    config_name=sdk_mac
    cc_compiler=clang
    cc_linker=clang
  else
    config_name=sdk_mac_gnu
    cc_compiler=gcc
    cc_linker=gcc
  fi

  # see also use_cpp :
  sdk_dirs="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs /Developer/SDKs"
  sdk_verss="10.9 10.8 10.6 10.5"
  found=no
  for sdk_dir in ${sdk_dirs} ; do
    for sdk_vers in ${sdk_verss} ; do
      if [ ${found} = no ] ; then
        macosx_sdk="${sdk_dir}/MacOSX${sdk_vers}.sdk"
        macosx_vers=${sdk_vers}
        if [ -d "${macosx_sdk}" ] ; then found=yes;fi
      fi
    done
  done
  if [ ${found} = no ] ; then
    echo "MacOSX sdk not found."
    exit
  fi
  #echo "${macosx_sdk}"
  #echo "${macosx_vers}"

  macosx_target=${macosx_vers}

  cc_compiler="${cc_compiler} -isysroot ${macosx_sdk}"
  cc_compiler="${cc_compiler} -mmacosx-version-min=${macosx_target}"

  cc_linker="${cc_linker} -isysroot ${macosx_sdk}"

  if [ `uname -p` = x86_64 ] ; then
    cpp_compiler="${cpp_compiler} -arch x86_64"
    cpp_linker="${cpp_linker} -arch x86_64"
  fi

  #LANG=en_US.US-ASCII
  #export LANG

  MACOSX_DEPLOYMENT_TARGET=${macosx_target}
  export MACOSX_DEPLOYMENT_TARGET

elif [ ${build_sdk_ios} = "yes" -o ${build_sdk_ios_gnu} = "yes" ] ; then

  # options taken from the output of :
  #   Darwin> xcodebuild -sdk iphoneos -configuration Release build

  if [ ${build_sdk_ios} = "yes" ] ; then
    config_name=sdk_ios
    cc_compiler=clang
    cc_linker=clang
  else
    config_name=sdk_ios_gnu
    cc_compiler=/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/llvm-gcc-4.2
    cc_linker=${cpp_compiler}
  fi

  # see also use_cpp :
  sdk_dirs="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs /Developer/SDKs"
  sdk_verss="7.1 5.0"
  found=no
  for sdk_dir in ${sdk_dirs} ; do
    for sdk_vers in ${sdk_verss} ; do
      if [ ${found} = no ] ; then
        ios_sdk="${sdk_dir}/iPhoneOS${sdk_vers}.sdk"
        ios_vers=${sdk_vers}
        if [ -d "${ios_sdk}" ] ; then found=yes;fi
      fi
    done
  done
  if [ ${found} = no ] ; then
    echo "iOS sdk not found."
    exit
  fi
  #echo "${ios_sdk}"
  #echo "${ios_vers}"
  #exit

  ios_target=3.2

  cc_compiler="${cc_compiler} -arch armv7 -pipe -isysroot ${ios_sdk}"

  cc_linker="${cc_linker} -arch armv7 -isysroot ${ios_sdk}"
  cc_linker="${cc_linker} -miphoneos-version-min=${ios_target}"

  ccflags="${ccflags} -miphoneos-version-min=${ios_target}"

 #ccflags="${ccflags} -gdwarf-2 -fvisibility=hidden -mno-thumb" 
 #ccflags="${ccflags} -Os"

  mflags="${mflags} -fobjc-abi-version=2 -fobjc-legacy-dispatch"

  LANG=en_US.US-ASCII
  export LANG

  IPHONEOS_DEPLOYMENT_TARGET=${ios_target}
  export IPHONEOS_DEPLOYMENT_TARGET

elif [ ${build_sdk_iossim} = "yes" ] ; then
  config_name=sdk_iossim
  cc_compiler=clang
  cc_linker=clang

  ios_vers=5.0
  ios_sdk="/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator${ios_vers}.sdk"
  if [ ! -e "${ios_sdk}" ] ; then
    echo 'iOS sdk not found.'
    exit
  fi

  cc_compiler="${cc_compiler} -arch i386 -pipe -isysroot ${ios_sdk}"

  cc_linker="${cc_linker} -arch i386 -isysroot ${ios_sdk}"
  cc_linker="${cc_linker} -miphoneos-version-min=${ios_vers}"

  mflags="${mflags} -fobjc-abi-version=2 -fobjc-legacy-dispatch"
  ccflags="${ccflags} -D__IPHONE_OS_VERSION_MIN_REQUIRED=30200"

elif [ ${build_visual} = "yes" ] ; then
  config_name=visual
  cc_compiler=cl.exe

  # NOTE : cygwin adds /usr/bin in front of PATH, and this directory
  #        contains a link.exe which is not the VisualC++ one. Then
  #        we arrange to give the full path toward the VisualC++ one.

  if [ "${MSVCDir}" != "" ] ;  then
    # Visual Studio 2003
    vc_linker_path="`cygpath \"${MSVCDir}\"/bin`"
    cc_linker="\"${vc_linker_path}\"/link.exe"
  else
    if [ "${VCINSTALLDIR}" != "" ] ;  then
      # Visual Studio 9.0
      vc_linker_path="`cygpath \"${VCINSTALLDIR}\"/bin`"
      cc_linker="\"${vc_linker_path}\"/link.exe"
    else
      echo "Env variables MSVCDir and VCINSTALLDIR not defined."
      echo "You have to setup Visual."
      exit
    fi  
  fi  

#  echo ${cc_linker}

  cc_linker="${cc_linker} /nologo" 

elif [ ${build_sdk_android} = "yes" ] ; then
  config_name=sdk_android

  sdk_home=/usr/local/Android/android-sdk_r16-macosx
  ndk_home=/usr/local/Android/android-ndk-r7

  ndk_bin=${ndk_home}/toolchains/arm-linux-androideabi-4.4.3/prebuilt/darwin-x86/bin

  ndk_platform="${ndk_home}/platforms/android-9/arch-arm"

  cc_compiler=${ndk_bin}/arm-linux-androideabi-gcc

 #ccflags="${ccflags} -MMD -MP -MF <some .d path>"
 #ccflags="${ccflags} -O2 -DNDEBUG -g"
 #ccflags="${ccflags} -Ijni"
 #ccflags="${ccflags} -I${ndk_home}/sources/cxx-stl/system/include"

  ccflags="${ccflags} -fpic"
  ccflags="${ccflags} -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__"
  ccflags="${ccflags} -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__"
  ccflags="${ccflags} -Wno-psabi -march=armv5te -mtune=xscale -msoft-float"
  ccflags="${ccflags} -mthumb"
  ccflags="${ccflags} -Os"
  ccflags="${ccflags} -Wa,--noexecstack"
  ccflags="${ccflags} -ffunction-sections -funwind-tables -fstack-protector"
  ccflags="${ccflags} -fomit-frame-pointer -fno-strict-aliasing"
  ccflags="${ccflags} -finline-limit=64"
  ccflags="${ccflags} -I${ndk_platform}/usr/include"
  ccflags="${ccflags} -DANDROID"

  cc_linker=${cc_compiler}

else
  echo 'no compiler given.'
  exit
fi

if [ ${build_visual} = "yes" ] ; then

  ccflags="${ccflags} /nologo /DWIN32 /MD /O2 /W3" 

else

  if [ ${build_debug} = "yes" ] ; then
    ccflags="${ccflags} -g"
  else
    ccflags="${ccflags} -O2"
  fi

  if [ ${build_m32} = yes ] ; then ccflags="${ccflags} -m32"; fi

fi

# NOTE : if not using plugin at all -fPIC is not needed,
#        but we have some in osc software.
if [ `uname` = "Linux" ] ; then ccflags="${ccflags} -fPIC";fi

ccflags0="${ccflags}"
