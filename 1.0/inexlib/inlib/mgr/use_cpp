
cpp_compiler=cpp_not_defined

cppflags=
mmflags=

# NOTE : is adding a compiler, think to update the inlib/os compiler() function.

if [ ${build_gnu} = "yes" ] ; then
  config_name=gnu
  is_10_9=no
  if [ `uname` = Darwin ] ; then
    osx_vers="`sw_vers -productVersion`"
    if [ "`echo ${osx_vers} | sed -e 's:10.9::g'`" != "${osx_vers}" ] ; then is_10_9=yes;fi
  fi
  if [ "${is_10_9}" = "yes" ] ; then
    cpp_compiler=/opt/local/bin/g++-mp-4.8
    cpp_linker=/opt/local/bin/g++-mp-4.8
  else
    cpp_compiler=g++
    cpp_linker=g++
  fi

elif [ ${build_gnu_11} = "yes" ] ; then
  config_name=gnu_11
  cpp_compiler="g++ -std=c++0x"
  cpp_linker=g++

elif [ ${build_intel} = "yes" ] ; then
  config_name=intel
  cpp_compiler=icpc
  cpp_linker=icpc

elif [ ${build_clang} = "yes" ] ; then
  config_name=clang
  cpp_compiler=clang++
  cpp_linker=clang++

elif [ ${build_sdk_mac} = "yes" -o ${build_sdk_mac_gnu} = "yes" ] ; then

  # options taken from the output of :
  #   Darwin> xcodebuild -sdk macosx -configuration Release build

  if [ ${build_sdk_mac} = "yes" ] ; then
    config_name=sdk_mac
    cpp_compiler=clang++
    cpp_linker=clang++
  else
    config_name=sdk_mac_gnu
    cpp_compiler=g++
    cpp_linker=g++
  fi

  # see also use_cc :
  sdk_dirs="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs /Developer/SDKs"
  sdk_verss="10.9 10.8 10.6 10.5"
  found=no
  for sdk_dir in ${sdk_dirs} ; do
    for sdk_vers in ${sdk_verss} ; do
      if [ ${found} = no ] ; then
        macosx_sdk="${sdk_dir}/MacOSX${sdk_vers}.sdk"
        macosx_vers=${sdk_vers}
        if [ -d "${macosx_sdk}" ] ; then found=yes;fi
      fi
    done
  done
  if [ ${found} = no ] ; then
    echo "MacOSX sdk not found."
    exit
  fi
  #echo "${macosx_sdk}"
  #echo "${macosx_vers}"

  macosx_target=${macosx_vers}

  cpp_compiler="${cpp_compiler} -isysroot ${macosx_sdk}"
  cpp_compiler="${cpp_compiler} -mmacosx-version-min=${macosx_target}"

  cpp_linker="${cpp_linker} -isysroot ${macosx_sdk}"

  if [ `uname -p` = x86_64 ] ; then
    cpp_compiler="${cpp_compiler} -arch x86_64"
    cpp_linker="${cpp_linker} -arch x86_64"
  fi

  #LANG=en_US.US-ASCII
  #export LANG

  MACOSX_DEPLOYMENT_TARGET=${macosx_target}
  export MACOSX_DEPLOYMENT_TARGET

elif [ ${build_sdk_ios} = "yes" -o ${build_sdk_ios_gnu} = "yes" ] ; then

  # options taken from the output of :
  #   Darwin> xcodebuild -sdk iphoneos -configuration Release build

  if [ ${build_sdk_ios} = "yes" ] ; then
    config_name=sdk_ios
    cpp_compiler=clang++
    cpp_linker=clang++
    # for ioda, to avoid the "out of range problem" :
    cppflags="${cppflags} -mno-thumb" 
  else
    config_name=sdk_ios_gnu
    cpp_compiler=/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/llvm-g++-4.2
    cpp_linker=${cpp_compiler}
  fi

  # see also use_cc :
  sdk_dirs="/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs /Developer/SDKs"
  sdk_verss="7.1 5.0"
  found=no
  for sdk_dir in ${sdk_dirs} ; do
    for sdk_vers in ${sdk_verss} ; do
      if [ ${found} = no ] ; then
        ios_sdk="${sdk_dir}/iPhoneOS${sdk_vers}.sdk"
        ios_vers=${sdk_vers}
        if [ -d "${ios_sdk}" ] ; then found=yes;fi
      fi
    done
  done
  if [ ${found} = no ] ; then
    echo "iOS sdk not found."
    exit
  fi
  #echo "${ios_sdk}"
  #echo "${ios_vers}"
  #exit

  ios_target=3.2

  cpp_compiler="${cpp_compiler} -arch armv7 -pipe -isysroot ${ios_sdk}"

  cpp_linker="${cpp_linker} -arch armv7 -isysroot ${ios_sdk}"
  cpp_linker="${cpp_linker} -miphoneos-version-min=${ios_target}"

  cppflags="${cppflags} -miphoneos-version-min=${ios_target}"

 #cppflags="${cppflags} -gdwarf-2 -fvisibility=hidden -mno-thumb" 
 #cppflags="${cppflags} -Os"

 #cppflags="${cppflags} -D__IPHONE_OS_VERSION_MIN_REQUIRED=30200"
 #cppflags="${cppflags} -Wno-trigraphs -Wreturn-type -Wunused-variable"
 #cppflags="${cppflags} -fmessage-length=0 -fpascal-strings"
 #cppflags="${cppflags} -fexceptions -fasm-blocks -fvisibility=hidden"
 #cppflags="${cppflags} -fvisibility-inlines-hidden"
 #cppflags="${cppflags} -gdwarf-2"

  mmflags="${mmflags} -fobjc-abi-version=2 -fobjc-legacy-dispatch"

  LANG=en_US.US-ASCII
  export LANG

  IPHONEOS_DEPLOYMENT_TARGET=${ios_target}
  export IPHONEOS_DEPLOYMENT_TARGET

elif [ ${build_sdk_iossim} = "yes" ] ; then
  config_name=sdk_iossim
  cpp_compiler=clang++
  cpp_linker=clang++

  ios_vers=5.0
  ios_sdk="/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator${ios_vers}.sdk"
  if [ ! -d "${ios_sdk}" ] ; then
    echo 'iOS sdk not found.'
    exit
  fi

  cpp_compiler="${cpp_compiler} -arch i386 -pipe -isysroot ${ios_sdk}"

  cpp_linker="${cpp_linker} -arch i386 -isysroot ${ios_sdk}"

  cppflags="${cppflags} -D__IPHONE_OS_VERSION_MIN_REQUIRED=30200"
  mmflags="${mmflags} -fobjc-abi-version=2 -fobjc-legacy-dispatch"

#  MACOSX_DEPLOYMENT_TARGET=10.6
#  export MACOSX_DEPLOYMENT_TARGET
#  cpp_linker="${cpp_linker} -mmacosx-version-min=10.6"
#  cpp_linker="${cpp_linker} -miphoneos-version-min=${ios_vers}"
#  cpp_linker="${cpp_linker} -Xlinker -objc_abi_version -Xlinker 2"

elif [ ${build_visual} = "yes" ] ; then
  config_name=visual
  cpp_compiler=cl.exe

  # NOTE : cygwin adds /usr/bin in front of PATH, and this directory
  #        contains a link.exe which is not the VisualC++ one. Then
  #        we arrange to give the full path toward the VisualC++ one.

  if [ "${MSVCDir}" != "" ] ;  then
    # Visual Studio 2003
    vc_linker_path="`cygpath \"${MSVCDir}\"/bin`"
    cpp_linker="\"${vc_linker_path}\"/link.exe"
  else
    if [ "${VCINSTALLDIR}" != "" ] ;  then
      # Visual Studio >= 9.0
      vc_linker_path="`cygpath \"${VCINSTALLDIR}\"/bin`"
      cpp_linker="\"${vc_linker_path}\"/link.exe"
    else
      echo "Env variables MSVCDir and VCINSTALLDIR not defined."
      echo "You have to setup Visual."
      exit
    fi  
  fi  

#  echo ${cpp_linker}

  cpp_linker="${cpp_linker} /nologo" 

elif [ ${build_sdk_android} = "yes" ] ; then
  config_name=sdk_android

  sdk_home=/usr/local/Android/android-sdk_r16-macosx
  ndk_home=/usr/local/Android/android-ndk-r7

  ndk_bin=${ndk_home}/toolchains/arm-linux-androideabi-4.4.3/prebuilt/darwin-x86/bin
  ndk_platform="${ndk_home}/platforms/android-9/arch-arm"

  cpp_compiler=${ndk_bin}/arm-linux-androideabi-g++

 #cppflags="${cppflags} -MMD -MP -MF <some .d path>"
 #cppflags="${cppflags} -Ijni"
 #cppflags="${cppflags} -O2 -DNDEBUG -g"
 #cppflags="${cppflags} -I${ndk_home}/sources/cxx-stl/system/include"

  # same options as use_cc/ccflags :
  cppflags="${cppflags} -fpic"
  cppflags="${cppflags} -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__"
  cppflags="${cppflags} -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__"
  cppflags="${cppflags} -Wno-psabi -march=armv5te -mtune=xscale -msoft-float"
  cppflags="${cppflags} -mthumb"
  cppflags="${cppflags} -Os"
  cppflags="${cppflags} -Wa,--noexecstack"
  cppflags="${cppflags} -ffunction-sections -funwind-tables -fstack-protector"
  cppflags="${cppflags} -fomit-frame-pointer -fno-strict-aliasing"
  cppflags="${cppflags} -finline-limit=64"
  cppflags="${cppflags} -I${ndk_platform}/usr/include"

  cppflags="${cppflags} -DANDROID"

  # c++ flags :
#  cppflags="${cppflags} -fno-exceptions -fno-rtti"
  cppflags="${cppflags} -I${ndk_home}/sources/cxx-stl/gnu-libstdc++/include"
  cppflags="${cppflags} -I${ndk_home}/sources/cxx-stl/gnu-libstdc++/libs/armeabi/include"

  cpp_linker=${cpp_compiler}

else
  echo 'no compiler given.'
  exit
fi

# NOTE : if not using plugin at all -fPIC is not needed,
#        but we have some in osc software.
if [ `uname` = "Linux" ] ; then cppflags="${cppflags} -fPIC";fi

if [ ${build_visual} = "yes" ] ; then

  cppflags="${cppflags} /nologo /DWIN32 /MD /O2 /W3 /EHsc /GR" 

  if [ ${build_mem} = "yes" ] ; then cppflags="${cppflags} /DINLIB_MEM"; fi

  cppflags="${cppflags} /I.."

else

  if [ ${build_debug} = "yes" ] ; then
    cppflags="${cppflags} -g"
  else
    cppflags="${cppflags} -O2"
   #cppflags="${cppflags} -Os"
  fi

  if [ ${build_mem} = "yes" ] ; then cppflags="${cppflags} -DINLIB_MEM"; fi

  if [ ${build_m32} = yes ] ; then cppflags="${cppflags} -m32"; fi

fi

#///////////////////////////////////////////////////////////
#/// G4 flags //////////////////////////////////////////////
#///////////////////////////////////////////////////////////

G4_cppflags=
if [ ${build_visual} = "yes" ] ; then
  echo dummy > /dev/null

elif [ ${build_intel} = "yes" ] ; then
  G4_cppflags="-ansi -Wno-non-virtual-dtor -Wwrite-strings -Wpointer-arith -Woverloaded-virtual"

elif [ ${build_clang} = "yes" ] ; then
  G4_cppflags="-Wno-non-virtual-dtor -Wwrite-strings -Wpointer-arith -Woverloaded-virtual"

elif [ ${build_gnu_11} = "yes" ] ; then
  G4_cppflags="-W -Wall -pedantic -Wno-non-virtual-dtor -Wno-long-long -Wwrite-strings -Wpointer-arith -Woverloaded-virtual"

elif [ ${build_sdk_ios} = "yes" -o ${build_sdk_iossim} = "yes" ] ; then
  G4_cppflags="-Wno-non-virtual-dtor -Wwrite-strings -Wpointer-arith -Woverloaded-virtual"

elif [ ${build_sdk_android} = "yes" ] ; then
  echo dummy > /dev/null

else
  G4_cppflags="-W -Wall -ansi -pedantic -Wno-non-virtual-dtor -Wno-long-long -Wwrite-strings -Wpointer-arith -Woverloaded-virtual"
  G4_cppflags="${G4_cppflags} -Wshadow"
fi

if [ ${build_g4flags} = "yes" ] ; then
  cppflags="${G4_cppflags} ${cppflags}"
fi

#///////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////

cppflags0="${cppflags}"
