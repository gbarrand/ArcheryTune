// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file ArcheryTune.license for terms.

#ifndef ArcheryTune_dac
#define ArcheryTune_dac

//dac = data accessor

#include <inlib/sg/gui_viewer>
#include <inlib/sg/ring>
#include <inlib/sg/event_dispatcher>
#include <exlib/sg/text_freetype>

#include "ghost"

namespace ArcheryTune {

class params {
public:
  params()
  :m_diamScope(0.029)
  ,m_dsoe(0.8)
  ,m_dCible(50)
  ,m_dioptrie(0.75)
  ,m_diamPastille(0.002)
  ,m_slider_dist_min(10)
  ,m_slider_dist_max(80)
  ,m_scope_radius(0)
  ,m_wruler(0)
  ,m_hruler(0)
  {}
  params(const params& a_from)
  :m_diamScope(a_from.m_diamScope)
  ,m_dsoe(a_from.m_dsoe)
  ,m_dCible(a_from.m_dCible)
  ,m_dioptrie(a_from.m_dioptrie)
  ,m_diamPastille(a_from.m_diamPastille)
  ,m_slider_dist_min(a_from.m_slider_dist_min)
  ,m_slider_dist_max(a_from.m_slider_dist_max)
  ,m_scope_radius(a_from.m_scope_radius)
  ,m_wruler(a_from.m_wruler)
  ,m_hruler(a_from.m_hruler)
  {}
  params& operator=(const params& a_from){
    m_diamScope = a_from.m_diamScope;
    m_dsoe = a_from.m_dsoe;
    m_dCible = a_from.m_dCible;
    m_dioptrie = a_from.m_dioptrie;
    m_diamPastille = a_from.m_diamPastille;
    m_slider_dist_min = a_from.m_slider_dist_min;
    m_slider_dist_max = a_from.m_slider_dist_max;
    m_scope_radius = a_from.m_scope_radius;
    m_wruler = a_from.m_wruler;
    m_hruler = a_from.m_hruler;
    return *this;
  }
public:
  double m_diamScope;
  double m_dsoe;
  double m_dCible;
  double m_dioptrie;
  double m_diamPastille;
  double m_slider_dist_min;
  double m_slider_dist_max;
  // sg parameters :
  float m_scope_radius;
  float m_wruler;
  float m_hruler;
};

class dac {
public:
  INLIB_SCLASS(ArcheryTune::dac)
public:
  dac(inlib::sg::gui_viewer& a_gv)
  :m_gv(a_gv)
  ,m_scope_ghost(m_scope_ghost_matrix)
  {}
  virtual ~dac(){}
protected:
  dac(const dac& a_from)
  :m_gv(a_from.m_gv)
  ,m_slider(a_from.m_slider)
  ,m_scope(a_from.m_scope)
  ,m_cache(a_from.m_cache)
  ,m_pastille(a_from.m_pastille)
  ,m_dpt(a_from.m_dpt)
  ,m_tscp_matrix(a_from.m_tscp_matrix)
  ,m_infos_text(a_from.m_infos_text)
  ,m_infos_matrix(a_from.m_infos_matrix)
  ,m_back_to_menu_button(a_from.m_back_to_menu_button)
  ,m_back_to_menu_matrix(a_from.m_back_to_menu_matrix)
  ,m_parameters(a_from.m_parameters)
  ,m_sight_chart_dpt(a_from.m_sight_chart_dpt)
  ,m_sight_chart_matrix(a_from.m_sight_chart_matrix)
  ,m_sight_chart_camera_container(a_from.m_sight_chart_camera_container)
#ifdef CURSOR_BUTTON
  ,m_cursor_button(a_from.m_cursor_button)
  ,m_cursor_button_matrix(a_from.m_cursor_button_matrix)
  ,m_cursor_switch(a_from.m_cursor_switch)
#endif
  ,m_scope_ghost_matrix(a_from.m_scope_ghost_matrix)
  ,m_scope_ghost(a_from.m_scope_ghost)
  {}
  dac& operator=(const dac& a_from){
    m_slider = a_from.m_slider;
    m_scope = a_from.m_scope;
    m_cache = a_from.m_cache;
    m_pastille = a_from.m_pastille;
    m_dpt = a_from.m_dpt;
    m_tscp_matrix = a_from.m_tscp_matrix;
    m_infos_text = a_from.m_infos_text;
    m_infos_matrix = a_from.m_infos_matrix;
    m_back_to_menu_button = a_from.m_back_to_menu_button;
    m_back_to_menu_matrix = a_from.m_back_to_menu_matrix;
    m_parameters = a_from.m_parameters;
    m_sight_chart_dpt = a_from.m_sight_chart_dpt;
    m_sight_chart_matrix = a_from.m_sight_chart_matrix;
    m_sight_chart_camera_container = a_from.m_sight_chart_camera_container;
#ifdef CURSOR_BUTTON
    m_cursor_button = a_from.m_cursor_button;
    m_cursor_button_matrix = a_from.m_cursor_button_matrix;
    m_cursor_switch = a_from.m_cursor_switch;
#endif
    m_scope_ghost_matrix = a_from.m_scope_ghost_matrix;
    m_scope_ghost = a_from.m_scope_ghost;
    return *this;
  }
public:
  inlib::sg::gui_viewer& m_gv;
public:
  inlib::sg::slider m_slider;
  inlib::sg::ring m_scope;
  inlib::sg::ring m_cache;
  inlib::sg::ring m_pastille;
  inlib::sg::event_dispatcher m_dpt;
  inlib::sg::matrix m_tscp_matrix;
  exlib::sg::text_freetype m_infos_text;
  inlib::sg::matrix m_infos_matrix;
  inlib::sg::image_button m_back_to_menu_button;
  inlib::sg::matrix m_back_to_menu_matrix;
  params m_parameters;
  inlib::sg::event_dispatcher m_sight_chart_dpt;
  inlib::sg::matrix m_sight_chart_matrix;
  inlib::sg::group m_sight_chart_camera_container;
#ifdef CURSOR_BUTTON
  inlib::sg::image_button m_cursor_button;
  inlib::sg::matrix m_cursor_button_matrix;
  inlib::sg::_switch m_cursor_switch;
#endif
  inlib::sg::matrix m_scope_ghost_matrix;
  ghost m_scope_ghost;
};

inline dac* cast_dac(inlib::sg::viewer& a_viewer) {
  return inlib::safe_cast<inlib::sg::viewer,dac>(a_viewer);
}

}

#endif
