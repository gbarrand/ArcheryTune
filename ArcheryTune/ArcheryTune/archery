// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file ArcheryTune.license for terms.

#ifndef ArcheryTune_ArcheryTune_archery
#define ArcheryTune_ArcheryTune_archery

#include <cmath>

namespace ArcheryTune {

inline bool scope_proj(double a_diamScope, //in meter
                       double a_dsoe,      //in meter
                       double a_dCible,    //in meter
                       double a_dioptrie,  //in 1/meter
                       double& a_value) {  //in meter

    /* JEC mathematica formula :
    DiamBlason[d2, dv, d1, dsoe, dCible, diamScope] := (
      dCible diamScope)/(
      dsoe Abs[dCible/(
        dCible - d1 dCible dsoe + d1 dsoe^2 + 
          d2 (dsoe - dv) (dCible + dv - d1 dCible dv + dsoe (-1 + d1 dv)))])
    */

    double d2 = 0;
    double dv = 0;

    double tmp_1  =
      a_dCible - a_dioptrie*a_dCible*a_dsoe + a_dioptrie*a_dsoe*a_dsoe + 
      d2 * (a_dsoe - dv) *
      (a_dCible + dv - a_dioptrie*a_dCible*dv + a_dsoe*(-1.0 + a_dioptrie*dv));

    if(!tmp_1) {a_value=0;return false;}

    double tmp_2 = a_dsoe * ::fabs(a_dCible/tmp_1);
    if(!tmp_2) {a_value=0;return false;}

    a_value = (a_dCible * a_diamScope)/tmp_2;

    return true;
}

inline double Power(double a_x,double a_y) {return ::pow(a_x,a_y);}
inline double Cos(double a_x) {return ::cos(a_x);}
inline double Sin(double a_x) {return ::sin(a_x);}
inline double Sqrt(double a_x) {return ::sqrt(a_x);}

inline double sight_chart(double doesco, double hoenock, double qpDegree, double v0, double auTomm, double xF) {
  double g = 9.81;  //(acceleration pesanteur en m/s^2)
  double xFmax = (0.09290340576035999*Power(v0,2))/g;
  // (transformation Deg -> Rad, le "-" pour se caler
  // avec la convention interne)
  double qp = -0.017453292519943295*qpDegree;
  hoenock *= 0.0254;                     //      (tranformation inch -> m)
  doesco *= 0.0254;
  double tan0 = (4*xFmax*Cos(qp)*(xF*Cos(qp) - 3*hoenock*Sin(qp)) - 
     2*Sqrt(Cos(qp)*Power(xF*Cos(qp) - hoenock*Sin(qp),2)*
     (-12*hoenock*xFmax - (Power(hoenock,2) + 3*Power(xF,2) - 
     4*Power(xFmax,2))*Cos(qp) + 4*hoenock*xFmax*Cos(2*qp) + 
     (hoenock - xF)*(hoenock + xF)*Cos(3*qp) + 
     2*hoenock*xF*Sin(qp) + 4*xF*xFmax*Sin(2*qp) + 
     2*hoenock*xF*Sin(3*qp))))/
     (8*hoenock*xFmax + (Power(hoenock,2) + 3*Power(xF,2))*Cos(qp) - 
      8*hoenock*xFmax*Cos(2*qp) + 
     (-Power(hoenock,2) + Power(xF,2))*Cos(3*qp) - 2*hoenock*xF*Sin(qp) - 
      4*xF*xFmax*Sin(2*qp) - 2*hoenock*xF*Sin(3*qp));
  //transformation mm->unite arbitraire du viseur
  double mark = -doesco * tan0 * 1000;
  return mark*auTomm;
}	

inline double FOC_LA(double a_L,double a_A){
  return 100*(a_A/a_L-0.5);
}

inline double FOC_dm(double a_old,double a_new,double a_mass){
  return ((a_new - a_old)/(50 - a_new)) * a_mass;
}

inline void FOC_full(double a_m_Pt,double a_rho_T,
                     double a_L_T,double a_m_PL,
                     double a_m_W,double a_m_B,
                     double a_m_Pn,double a_m_N,
                     double& a_m_Tot,double& a_FOC) {
  double m_Tube = a_rho_T*a_L_T;
  double m_Ntot = a_m_PL + a_m_W + a_m_B + a_m_Pn + a_m_N;
  a_m_Tot = a_m_Pt + m_Tube + m_Ntot;
  a_FOC = 100 * 0.5 * (a_m_Pt-m_Ntot)/a_m_Tot;
}


}

///////////////////////////////////////////////////////////////////////////////////
/// blasons and related tables : //////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

namespace ArcheryTune {

///////////////////////////////////////////////////////////////////////////////////
/// blason ids : //////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

inline unsigned int blason_indoor_80()            {return 110;}
inline unsigned int blason_indoor_60()            {return 111;}
inline unsigned int blason_indoor_40()            {return 112;}
inline unsigned int blason_indoor_40_31()         {return 113;}

inline unsigned int blason_outdoor_122()          {return 114;}
inline unsigned int blason_outdoor_80()           {return 115;}
inline unsigned int blason_outdoor_80_22()        {return 116;}

inline unsigned int blason_field_80()             {return 117;}
inline unsigned int blason_field_60()             {return 118;}
inline unsigned int blason_field_40_22()          {return 119;}
inline unsigned int blason_field_20_34()          {return 120;}

inline unsigned int blason_nature_hippopotame()    {return 140;}
inline unsigned int blason_nature_chameau()        {return 141;}
inline unsigned int blason_nature_daim  ()           {return 142;}
inline unsigned int blason_nature_loupgris()       {return 143;}
inline unsigned int blason_nature_paon()           {return 144;}
inline unsigned int blason_nature_pandaroux()      {return 145;}
inline unsigned int blason_nature_canardmandarin() {return 146;}
inline unsigned int blason_nature_lapin()          {return 147;}

}

///////////////////////////////////////////////////////////////////////////////////
/// blason names : ////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

#include <map>
#include <inlib/S_STRING>

namespace ArcheryTune {

INLIB_GLOBAL_STRING(indoor_80)
INLIB_GLOBAL_STRING(indoor_60)
INLIB_GLOBAL_STRING(indoor_40)
INLIB_GLOBAL_STRING(indoor_40_31)

INLIB_GLOBAL_STRING(outdoor_122)
INLIB_GLOBAL_STRING(outdoor_80)
INLIB_GLOBAL_STRING(outdoor_80_22)

INLIB_GLOBAL_STRING(field_80)
INLIB_GLOBAL_STRING(field_60)
INLIB_GLOBAL_STRING(field_40_22)
INLIB_GLOBAL_STRING(field_20_34)

INLIB_GLOBAL_STRING(nature_hippopotame)
INLIB_GLOBAL_STRING(nature_chameau)
INLIB_GLOBAL_STRING(nature_daim)
INLIB_GLOBAL_STRING(nature_loupgris)
INLIB_GLOBAL_STRING(nature_paon)
INLIB_GLOBAL_STRING(nature_pandaroux)
INLIB_GLOBAL_STRING(nature_canardmandarin)
INLIB_GLOBAL_STRING(nature_lapin)

inline const std::map<unsigned int,std::string>& blason_names() {
    static std::map<unsigned int,std::string> s_v;
    if(s_v.empty()) {
      s_v[blason_indoor_80()] = s_indoor_80();
      s_v[blason_indoor_60()] = s_indoor_60();
      s_v[blason_indoor_40()] = s_indoor_40();
      s_v[blason_indoor_40_31()] = s_indoor_40_31();

      s_v[blason_outdoor_122()] = s_outdoor_122();
      s_v[blason_outdoor_80()] = s_outdoor_80();
      s_v[blason_outdoor_80_22()] = s_outdoor_80_22();

      s_v[blason_field_80()] = s_field_80();
      s_v[blason_field_60()] = s_field_60();
      s_v[blason_field_40_22()] = s_field_40_22();
      s_v[blason_field_20_34()] = s_field_20_34();

      s_v[blason_nature_hippopotame()] = s_nature_hippopotame();
      s_v[blason_nature_chameau()]     = s_nature_chameau();
      s_v[blason_nature_daim  ()]        = s_nature_daim();
      s_v[blason_nature_loupgris()]    = s_nature_loupgris();
      s_v[blason_nature_paon()]        = s_nature_paon();
      s_v[blason_nature_pandaroux()]   = s_nature_pandaroux();
      s_v[blason_nature_canardmandarin()] = s_nature_canardmandarin();
      s_v[blason_nature_lapin()]       = s_nature_lapin();

    }
    return s_v;
}

}

///////////////////////////////////////////////////////////////////////////////////
/// distances : ///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
#include <vector>

namespace ArcheryTune {

INLIB_GLOBAL_STRING(5)
INLIB_GLOBAL_STRING(10)
INLIB_GLOBAL_STRING(15)
INLIB_GLOBAL_STRING(18)
INLIB_GLOBAL_STRING(20)
INLIB_GLOBAL_STRING(25)
INLIB_GLOBAL_STRING(30)
INLIB_GLOBAL_STRING(35)
INLIB_GLOBAL_STRING(40)
INLIB_GLOBAL_STRING(45)
INLIB_GLOBAL_STRING(50)
INLIB_GLOBAL_STRING(55)
INLIB_GLOBAL_STRING(60)
INLIB_GLOBAL_STRING(70)

typedef std::vector<std::string> dists_t;
typedef std::pair<dists_t,std::string> distelem;
inline const std::map<unsigned int,distelem>& blason_dists() {
    static std::map<unsigned int,distelem> s_v;
    if(s_v.empty()) {

     {dists_t def;
      def.push_back(s_18());
      def.push_back(s_25());
      def.push_back(s_30());
      def.push_back(s_50());
      def.push_back(s_70());
      s_v[blason_indoor_80()] = distelem(def,s_25());
      s_v[blason_indoor_60()] = distelem(def,s_18());}

     {dists_t def;
      def.push_back(s_18());
      def.push_back(s_30());
      def.push_back(s_50());
      def.push_back(s_70());
      s_v[blason_indoor_40()] = distelem(def,s_18());
      s_v[blason_indoor_40_31()] = distelem(def,s_18());}

     {dists_t def;
      def.push_back(s_18());
      def.push_back(s_30());
      def.push_back(s_50());
      def.push_back(s_60());
      def.push_back(s_70());
      s_v[blason_outdoor_122()] = distelem(def,s_50());}

     {dists_t def;
      def.push_back(s_18());
      def.push_back(s_30());
      def.push_back(s_40());
      def.push_back(s_50());
      def.push_back(s_70());
      s_v[blason_outdoor_80()] = distelem(def,s_40());
      s_v[blason_outdoor_80_22()] = distelem(def,s_50());}

     {dists_t def;
      def.push_back(s_5());
      def.push_back(s_10());
      def.push_back(s_15());
      def.push_back(s_18());
      def.push_back(s_20());
      def.push_back(s_25());
      def.push_back(s_30());
      def.push_back(s_35());
      def.push_back(s_40());
      def.push_back(s_45());
      def.push_back(s_50());
      def.push_back(s_55()); 
      def.push_back(s_70());

      s_v[blason_field_80()] = distelem(def,s_35());
      s_v[blason_field_60()] = distelem(def,s_25());
      s_v[blason_field_40_22()] = distelem(def,s_18());
      s_v[blason_field_20_34()] = distelem(def,s_10());

      s_v[blason_nature_hippopotame()] = distelem(def,s_35());
      s_v[blason_nature_chameau()] = distelem(def,s_35());

      s_v[blason_nature_daim  ()] = distelem(def,s_25());
      s_v[blason_nature_loupgris()] = distelem(def,s_25());

      s_v[blason_nature_paon()] = distelem(def,s_18());
      s_v[blason_nature_pandaroux()] = distelem(def,s_18());

      s_v[blason_nature_canardmandarin()] = distelem(def,s_10());
      s_v[blason_nature_lapin()] = distelem(def,s_10());
     }
    }
    return s_v;
}

///////////////////////////////////////////////////////////////////////////////////
/// min/max distances : ///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

typedef std::pair<double,double> mnmx_t;
inline const std::map<unsigned int,mnmx_t>& blason_mnmxs() {
    static std::map<unsigned int,mnmx_t> s_v;
    if(s_v.empty()) {
      s_v[blason_indoor_80()] = mnmx_t(10,80);
      s_v[blason_indoor_60()] = mnmx_t(10,80);
      s_v[blason_indoor_40()] = mnmx_t(10,80);
      s_v[blason_indoor_40_31()] = mnmx_t(10,80);

      s_v[blason_outdoor_122()] = mnmx_t(10,80);
      s_v[blason_outdoor_80()] = mnmx_t(10,80);
      s_v[blason_outdoor_80_22()] = mnmx_t(10,80);

      s_v[blason_field_80()] = mnmx_t(20,55);
      s_v[blason_field_60()] = mnmx_t(15,35);
      s_v[blason_field_40_22()] = mnmx_t(10,25);
      s_v[blason_field_20_34()] = mnmx_t(5,15);

      s_v[blason_nature_hippopotame()] = mnmx_t(30,40);
      s_v[blason_nature_chameau()] = mnmx_t(30,40);

      s_v[blason_nature_daim  ()] = mnmx_t(20,35);
      s_v[blason_nature_loupgris()] = mnmx_t(20,35);

      s_v[blason_nature_paon()] = mnmx_t(15,25);
      s_v[blason_nature_pandaroux()] = mnmx_t(15,25);

      s_v[blason_nature_canardmandarin()] = mnmx_t(5,15);
      s_v[blason_nature_lapin()] = mnmx_t(5,15);

    }
    return s_v;
}

///////////////////////////////////////////////////////////////////////////////////
/// nature images : ///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

inline const std::map<unsigned int,std::string>& nature_images() {
    static std::map<unsigned int,std::string> s_v;
    if(s_v.empty()) {
      s_v[blason_nature_hippopotame()] = "ams_gg0036_grand_hippopotame.jpg";
      s_v[blason_nature_chameau()]     = "ams_gg0051_grand_chammeau.jpg";
      s_v[blason_nature_daim()]        = "ams_mg0061_moyen_daim.jpg";
      s_v[blason_nature_loupgris()]    = "ams_mg0064_moyen_loupgris.jpg";
      s_v[blason_nature_paon()]        = "ams_pg0065_petit_paon.jpg";
      s_v[blason_nature_pandaroux()]   = "ams_pg0068_petit_pandaroux.jpg";
      s_v[blason_nature_canardmandarin()] = "ams_pa0088_petita_canardmandarin.jpg";
      s_v[blason_nature_lapin()]       = "ams_pa0092_petita_lapin.jpg";
    }
    return s_v;
}

///////////////////////////////////////////////////////////////////////////////////
/// nature image heights : /////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

inline const std::map<unsigned int,double>& nature_heights() {
    static std::map<unsigned int,double> s_v;
    if(s_v.empty()) {
      //100x70
      s_v[blason_nature_hippopotame()] = 70;
      s_v[blason_nature_chameau()]    = 100;
      //70x50
      s_v[blason_nature_daim()]        = 70;
      s_v[blason_nature_loupgris()]    = 50;
      //50x35
      s_v[blason_nature_paon()]        = 35;
      s_v[blason_nature_pandaroux()]   = 50;
      //35x25
      s_v[blason_nature_canardmandarin()] = 25;
      s_v[blason_nature_lapin()]          = 35;
    }
    return s_v;
}

}

#endif
