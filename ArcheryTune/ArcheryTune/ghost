// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file ArcheryTune.license for terms.

#ifndef ArcheryTune_ghost
#define ArcheryTune_ghost

#include <inlib/sg/ghost>
#include <inlib/sg/matrix>
#include <inlib/mathf>

namespace ArcheryTune {

class ghost : public inlib::sg::ghost {
  INLIB_NODE(ghost,ArcheryTune::ghost,inlib::sg::ghost)
public:
  virtual void event(inlib::sg::event_action& a_action) {
    if(!m_active) return;
    if(inlib::sg::mouse_move_event* mevt = inlib::sg::event_cast<inlib::sg::event,inlib::sg::mouse_move_event>(a_action.get_event())) {

      const inlib::sg::state& state = a_action.state();

      float x,y,z;
      if(!state.screen2wc(mevt->x(),mevt->y(),x,y,z)) return;

      float h2 = height*0.5f;
      float w2 = width*0.5f;

      if((y<-h2)||(h2<y)) return;
      if((x<-w2)||(w2<x)) return;

      inlib::vec3f dmevt(float(mevt->x())-float(mevt->ox()),float(mevt->y())-float(mevt->oy()),0);
      float win_diag = inlib::fsqrt(float(state.m_ww)*float(state.m_ww)+float(state.m_wh)*float(state.m_wh));
      float mevt_fac = dmevt.length()/win_diag;

      inlib::vec3f u(dmevt[0],dmevt[1],0);
      u.normalize();
      u *= height.value() * mevt_fac * m_factor;

      m_matrix.mul_translate(u.x(),u.y(),u.z());

      a_action.set_done(true); //it triggers a render in m_gv.touch_move()
    }
  }
public:
  ghost(inlib::sg::matrix& a_matrix,float a_factor = 1.0F)
  :parent()
  ,m_matrix(a_matrix)
  ,m_factor(a_factor)
  ,m_active(true)
  {}
  virtual ~ghost(){}
public:
  ghost(const ghost& a_from)
  :parent(a_from)
  ,m_matrix(a_from.m_matrix)
  ,m_factor(a_from.m_factor)
  ,m_active(a_from.m_active)
  {}
  ghost& operator=(const ghost& a_from){
    parent::operator=(a_from);
    m_factor = a_from.m_factor;
    m_active = a_from.m_active;
    return *this;
  }
public:
  void set_active(bool a_value) {m_active = a_value;}
protected:
  inlib::sg::matrix& m_matrix;
  float m_factor;
  bool m_active;
};

}

#endif
