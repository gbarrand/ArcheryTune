
  To build :
    UNIX> cd <app>/mgr
    UNIX> ./build  # Cocoa version on macOS, X11 on Linux, win32 on a Windows-10/cygwin.
  ( UNIX> ./build -v)
   macOS> ./build -x11 -bin_x11  # to build the X11 version.
    UNIX> ./build -offscreen -bin_offscreen
    UNIX> ./build -webgl -bin_webgl  # to display within a web browser.
    
 (here UNIX is for Linux, macOS, Windows-10/cygwin)

  If the GNU parallel application is known from your prompt, you can use the "-parallel"
 option so that C and C++ file compilations are distributed on your cores. This feature
 had been tested with success on macOS with a MacPorts installation of the GNU parallel program
 and on centos7 by using the GNU distribution. Since good part of the code of our
 apps is pure header, it will not boost the "main" part of them, but it clearly boosts the
 build of the ourex externals, in particular if using some ourex/geant4<versio> one.

  At end, you should have a distribution file :
    bin_<config>/distrib/<app>-<version>-<platform>.zip
    
  To run :
    UNIX> cd <app>/mgr
 the offscreen version :
    UNIX> ./bin_offscreen/distrib/<app>/<version>/bin/<app>
 the OSX Cocoa version :
   macOS> open ./bin_sdk_mac/distrib/<app>/<version>/<app>.app
 the OSX X11 version :
   macOS> ./bin_x11/distrib/<app>/<version>/bin/<app>
 the Linux X11 version :
   Linux> ./bin_gnu/distrib/<app>/<version>/bin/<app>
 the Windows version :
  cygwin> ./bin_visual/distrib/<app>/<version>/bin/<app>.exe

  For the WebGL version within a web browser :
    UNIX> ./bin_webgl/distrib/<app>/<version>/bin/<app>.exe -verbose -host=0.0.0.0 -port=8000
 and then open a page with 0.0.0.0:8000 into a web browser supporting WebGL. (it works for us
 with Safari, Chrome, Firefox running on macOS).

  See the <app> section on http://gbarrand.github.io for more.

