// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#import "GLView.h"

#include "NSLog_streambuf"

#include "../../sg/pv_holder"
#include "../../sg/GL_VIEWER"

namespace app_Cocoa {

//IMPORTANT : pv_holder must come first.

template <class APP_MAIN>
class main : protected exlib::sg::pv_holder, public APP_MAIN {
  typedef APP_MAIN parent;
public:
  EXLIB_GL_VIEWER_METHODS
public:
  virtual void win_render() {
    //NSLog(@"debug : win_render");
    [[m_GLView openGLContext] makeCurrentContext];
    render();
    [[m_GLView openGLContext] flushBuffer];
  }
  virtual bool has_open_panel() {return true;}
  virtual bool open_panel(std::string& a_path) {
    NSOpenPanel *panel = [NSOpenPanel openPanel]; //We are not owner.
    [panel retain];

    [panel setCanChooseFiles:YES];
    [panel setCanChooseDirectories:NO];
    [panel setAllowsMultipleSelection:NO];
    //[panel setAllowedFileTypes:[NSArray arrayWithObject:@"txt"]];

    bool get_path = false;
    if([panel runModal] == NSOKButton) {
      NSURL* ns_url = [[panel URLs]objectAtIndex:0];
      if([ns_url isFileURL]) {
        a_path = [[ns_url path] UTF8String];
        get_path = true;
      }
    }
    if(!get_path) a_path.clear();
    [panel release];
    [[NSApp mainWindow] makeKeyWindow];
    return get_path;
  }
public:
  main(std::ostream& a_out,
       const std::string& a_data_dir,
       const std::string& a_res_dir,
       const std::string& a_out_dir,
       const std::string& a_tmp_dir,
       GLView* a_GLView)
  :exlib::sg::pv_holder(a_out)
  ,APP_MAIN(a_out,
            exlib::sg::pv_holder::m_mgr_GL,exlib::sg::pv_holder::m_ttf,
            a_data_dir,a_res_dir,a_out_dir,a_tmp_dir,false,0)
  ,m_GLView(a_GLView)
  {
    this->push_home();
  }
  inline virtual ~main(){}
private:
  GLView* m_GLView;
};

}


// for a full screen window to receive keyboard events.
@interface FSWindow : NSWindow {}
- (BOOL)canBecomeKeyWindow;
@end
@implementation FSWindow
- (BOOL)canBecomeKeyWindow {return YES;}
@end

//#define USE_NSAPP_RUN

#ifdef USE_NSAPP_RUN

@interface ForTimer : NSObject {
  app_main_t* m_main;
}
- (id)initWithMain:(app_main_t*)a_main;
- (void)dealloc;
- (void)work_timer_proc:(id)sender;
@end
@implementation ForTimer
- (id)initWithMain:(app_main_t*)a_main{
  if(self = [super init]) {
    m_main = a_main;
  }
  return self;
}
- (void)dealloc {[super dealloc];}
- (void)work_timer_proc:(id)sender{
  m_main->do_works();
  if(m_main->to_exit()) {
    //NSLog(@"debug : to_exit");
    [NSApp terminate:self];
    return;
  }
}
@end

#if MAC_OS_X_VERSION_MAX_ALLOWED <= 1050
@interface app_delegate : NSObject {
#else
@interface app_delegate : NSObject<NSApplicationDelegate> {
#endif
  app_main_t* m_main;
  NSTimer* m_timer;
}
- (id)initWithMain:(app_main_t*)a_main timer:(NSTimer*)a_timer;
- (void)dealloc;
- (NSApplicationTerminateReply)applicationShouldTerminate:(NSApplication*)a_app;
- (BOOL)application:(NSApplication*)a_app openFile:(NSString*)a_file;
@end
@implementation app_delegate
- (id)initWithMain:(app_main_t*)a_main timer:(NSTimer*)a_timer {
  if(self = [super init]) {
    m_main = a_main;
    m_timer = a_timer;
  }
  return self;
}
- (void)dealloc {
  [m_timer invalidate];
  [super dealloc];
}
- (NSApplicationTerminateReply)applicationShouldTerminate:(NSApplication*)a_app {
  //NSLog(@"debug : app_delegate::applicationShouldTerminate");
  [m_timer invalidate];
  (void)a_app;
  return NSTerminateNow;
}
- (BOOL)application:(NSApplication*)a_app openFile:(NSString*)a_file {
  //NSLog(@"debug : open : %@\n",a_file);
  if(!m_main) return NO;
  std::string document = [a_file UTF8String];

  bool done;
  if(!m_main->opener().open(document,inlib::file::s_format_guessed(),inlib::args(),done)) {}
  if(!done) {}

  m_main->win_render();
  return YES;
}
@end

#if MAC_OS_X_VERSION_MAX_ALLOWED <= 1050
@interface win_delegate : NSObject {
#else
@interface win_delegate : NSObject<NSWindowDelegate> {
#endif
}
- (void)dealloc;
- (void)windowWillClose:(NSNotification*)a_not;
@end
@implementation win_delegate
- (void)dealloc {
  [super dealloc];
}
- (void)windowWillClose:(NSNotification*)a_not {
  //NSLog(@"debug : win_delegate::windowWillClose");
  [NSApp terminate:self];
  //NSLog(@"debug : win_delegate::windowWillClose : end");
}
@end

#else

#if MAC_OS_X_VERSION_MAX_ALLOWED <= 1050
@interface app_delegate : NSObject {
#else
@interface app_delegate : NSObject<NSApplicationDelegate> {
#endif
  app_main_t* m_main;
}
- (id)initWithMain:(app_main_t*)a_main;
- (void)dealloc;
- (NSApplicationTerminateReply)applicationShouldTerminate:(NSApplication*)a_app;
- (BOOL)application:(NSApplication*)a_app openFile:(NSString*)a_file;
@end
@implementation app_delegate
- (id)initWithMain:(app_main_t*)a_main {
  if(self = [super init]) {
    m_main = a_main;
  }
  return self;
}
- (void)dealloc {
  [super dealloc];
}
- (NSApplicationTerminateReply)applicationShouldTerminate:(NSApplication*)a_app {
  m_main->clear_tmp();
  (void)a_app;
  return NSTerminateNow;
}
- (BOOL)application:(NSApplication*)a_app openFile:(NSString*)a_file {
  //NSLog(@"debug : open : %@\n",a_file);
  if(!m_main) return NO;
  std::string document = [a_file UTF8String];

  bool done;
  if(!m_main->opener().open(document,inlib::file::s_format_guessed(),inlib::args(),done)) {}
  if(!done) {}

  m_main->win_render();
  (void)a_app;
  return YES;
}
@end

#if MAC_OS_X_VERSION_MAX_ALLOWED <= 1050
@interface win_delegate : NSObject {
#else
@interface win_delegate : NSObject<NSWindowDelegate> {
#endif
  app_main_t* m_main;
}
- (id)initWithMain:(app_main_t*)a_main;
- (void)dealloc;
- (void)windowWillClose:(NSNotification*)a_not;
@end
@implementation win_delegate
- (id)initWithMain:(app_main_t*)a_main {
  if(self = [super init]) {
    m_main = a_main;
  }
  return self;
}
- (void)dealloc {
  [super dealloc];
}
- (void)windowWillClose:(NSNotification*)a_not {
  //NSLog(@"debug : win_delegate::windowWillClose");
  m_main->set_to_exit();
  (void)a_not;
}
@end

#endif

#include <inlib/app>

template <class APP_CONTEXT,class APP_MAIN>
int exlib_main(const std::string& a_app_name,int argc, char** argv,bool a_land = true) {
  bool verbose = false;

  //NSLog(@"debug : exlib_main : 006");

  NSLog_streambuf nsbuf;
  std::ostream nsout(&nsbuf);

  ////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////

  NSAutoreleasePool* pool = [[NSAutoreleasePool alloc] init];

  NSApplication* app = [NSApplication sharedApplication];

  NSString* ns = [[NSString alloc] initWithString:@"MainMenu"];
#if MAC_OS_X_VERSION_MAX_ALLOWED <= 1070
  BOOL status = [NSBundle loadNibNamed:ns owner:app];
#else
  BOOL status = [[NSBundle mainBundle] loadNibNamed:ns owner:app topLevelObjects:NULL];
#endif
  if(!status) {
    NSLog(@"debug : load MainMenu nib failed.");
  }
  [ns release];

  //NOTE : with open, we can pass args with : --args <args>
  inlib::args args(argc,argv);
  if(a_land) args.add("-land","");

  verbose = args.is_arg("-verbose");

  unsigned int ww,wh;
  inlib::window_size_from_args(args,ww,wh);

  unsigned int monitor = 0;
  bool full_screen = false;
  //bool full_screen = true;
  unsigned int window_x = 0;
  unsigned int window_y = 0;
  unsigned int window_width = ww;
  unsigned int window_height = wh;
  //std::string document;

  NSScreen* screen = 0;
 {NSArray* scrs = [NSScreen screens];
  int number = [scrs count];
  //NSLog(@"debug : screens %d",number);
  if(int(monitor)<number) {
    screen = (NSScreen*)[scrs objectAtIndex:monitor];
   //NSLog(@"debug : screen %d %lu",monitor,(NSScreen*)[scrs objectAtIndex:0]);
  }}

  NSRect screen_rect = [screen frame];
  //NSLog(@"debug : screen : %g %g %g %g",
  //  rect.origin.x,rect.origin.y,
  //  rect.size.width,rect.size.height);}

  // Create window :
  // origin = bottom, left.
  NSRect rect;
  if(full_screen) {
    rect = [screen frame];
    rect.origin.x = 0;
    rect.origin.y = 0;
  } else {
    rect.origin.x = window_x;
    rect.origin.y = screen_rect.size.height-(window_y+window_height),
    rect.size.width = window_width;
    rect.size.height = window_height;
    if(args.is_arg("-no_decos")) {
      rect.origin.y -= 23; //size of APPLE menubar.
    }
  }

  NSWindow* window = 0;
  if(full_screen) {
    unsigned int mask = NSBorderlessWindowMask;
    window = [[FSWindow alloc] initWithContentRect:rect
                               styleMask:mask
                               backing:NSBackingStoreBuffered
                               defer:NO //we are the owner.
                               screen:screen];
    [window setLevel:NSStatusWindowLevel];
  } else {
    unsigned int mask = NSTitledWindowMask;
    mask |= NSResizableWindowMask;
    mask |= NSClosableWindowMask;
    mask |= NSMiniaturizableWindowMask;
    if(args.is_arg("-no_decos")) mask = 0;
    window = [[NSWindow alloc] initWithContentRect:rect
                               styleMask:mask
                               backing:NSBackingStoreBuffered
                               defer:NO //we are the owner.
                               screen:screen];
    NSString* title = [NSString stringWithUTF8String:a_app_name.c_str()];
    [window setTitle:title];
    [window setShowsResizeIndicator:YES];
    [window setAcceptsMouseMovedEvents:YES];
  }

  GLView* view = [[GLView alloc] initWithFrame:rect];
  [window setContentView:view];
  [view release];

  [window makeKeyAndOrderFront:app];

  ////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////
  //NSDictionary* environ = [[NSProcessInfo processInfo] environment];
  //BOOL is_sandboxed = (nil != [environ objectForKey:@"APP_SANDBOX_CONTAINER_ID"]);
  bool is_sandboxed = inlib::isenv("APP_SANDBOX_CONTAINER_ID");

  // Get the .app directory :
  NSString* ns_bundle_dir = [[NSBundle mainBundle] bundlePath];
  std::string bundle_dir = [ns_bundle_dir UTF8String];
  std::string res_dir = bundle_dir+"/Contents/Resources";

  // Get the tmp directory :
  NSString* ns_tmp_dir = NSTemporaryDirectory();
  std::string tmp_dir = [ns_tmp_dir UTF8String];

  // Get the Documents directory :
  NSArray* paths = NSSearchPathForDirectoriesInDomains
                     (NSDocumentDirectory,NSUserDomainMask,YES);
  NSString* ns_doc_dir = [paths objectAtIndex:0];

  std::string doc_dir = [ns_doc_dir UTF8String];
  if(!is_sandboxed) doc_dir += inlib::sep()+a_app_name;
  std::string data_dir = doc_dir;
  std::string out_dir = doc_dir;

  APP_CONTEXT context(res_dir);

  app_Cocoa::main<APP_MAIN> _main(nsout,data_dir,res_dir,out_dir,tmp_dir,view);

 {std::string DOCUMENT;
  args.files_at_end(); //take care of the upper -land.
  if(!args.file(DOCUMENT)) args.find("-document",DOCUMENT);  
  if(verbose) {
    NSLog(@"exlib_main : document is %s.",DOCUMENT.c_str());
  }
  //Xcode-4 : app is spawned with args : -NSDocumentRevisionsDebugMode YES
  if(DOCUMENT.size()&&(DOCUMENT!="YES")) {
    _main.create_gui();
    bool done;
    _main.opener().open(DOCUMENT,inlib::file::s_format_guessed(),
                        inlib::args(),done);
  }}

  [view set_main:&_main];
  rect = [window frame];
  rect = [window contentRectForFrameRect:rect]; //window content true size.
  [view drawRect:rect];

  //////////////////////////////////////////////////////////////////
  /// steering /////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////

#ifdef USE_NSAPP_RUN
  win_delegate* win_del = [[win_delegate alloc] init];
  [window setDelegate:win_del];

  double seconds = 1./60.; // 0.016666
  ForTimer* for_timer = [[ForTimer alloc] initWithMain:&_main];
  NSTimer* work_timer = 
    [NSTimer scheduledTimerWithTimeInterval:seconds
                    target:for_timer selector:@selector(work_timer_proc:)
                    userInfo:nil repeats:TRUE];

  // With [app run], a delegate is needed to stop the work
  // timer when exiting.
  app_delegate* app_del = [[app_delegate alloc] initWithMain:&_main timer:work_timer];
  [NSApp setDelegate:app_del];

  [app run];

  // We never pass here ! We stop the work timer by using the app_delegate.

  [pool release];

#else //try to handle a main loop of our own.

  win_delegate* win_del = [[win_delegate alloc] initWithMain:&_main];
  [window setDelegate:win_del];

  app_delegate* app_del = [[app_delegate alloc] initWithMain:&_main];
  [app setDelegate:app_del];

  [app finishLaunching];

  [pool release];

//#ifdef WALL_DATA_CLIENT
//   FIXME : handle data client events.
//#endif

  //NSLog(@"debug : enter main loop...");

  while(!_main.to_exit()) { 

    pool = [[NSAutoreleasePool alloc] init];

    NSDate* date = 0;
    if(_main.num_cbks()) {
      _main.do_works();

      date = [NSDate distantPast];
    } else {
      date = [NSDate distantFuture]; //it will permit to block on the below.
    }

    if(NSEvent* event = [app nextEventMatchingMask:NSAnyEventMask
                             untilDate:date
                             inMode:NSDefaultRunLoopMode
                             dequeue:YES]) {
      //nsout << "debug : nsevent " << [event type] << std::endl;
      [app sendEvent:event];
      [app updateWindows];
      //nsout << "debug : nsevent : end " << std::endl;
    }

    if(_main.to_exit()) break;
    //FIXME : we have the upper line to avoid a crash
    //        in the below when closing window. But it should not be here !

    [pool release];
  }

#endif
  //////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////

  //NSLog(@"debug : exiting...");

  return EXIT_SUCCESS;
}
