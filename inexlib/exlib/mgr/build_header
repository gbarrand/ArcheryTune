
#//////////////////////////////////////////////////////
#/// related to exlib and graphics ////////////////////
#//////////////////////////////////////////////////////

if [ "${exlib_mgr}" = "" ] ; then
  echo "exlib/mgr/build_header : exlib_mgr variable not set."
  exit
fi

inlib_mgr=${exlib_mgr}/../../inlib/mgr

#//////////////////////////////////////////////////////
#/// args : ///////////////////////////////////////////
#//////////////////////////////////////////////////////
build_batch=no
build_x11=no
build_x11_no_gl=no
build_no_gl=no
build_cocoa=no
build_cocoa_gnu=no
build_ios=no
build_ios_gnu=no
build_iossim=no
build_android=no
build_WebGL=no
build_tntnet=no
build_no_screen=no
build_no_wall=no

build_install=no

inlib_args=
for arg in ${build_args} ; do
  case ${arg} in
     -batch)          build_batch=yes;;
     -x11)            build_x11=yes;;
     -X11)            build_x11=yes;;
     -X11_no_gl)      build_x11=yes;build_x11_no_gl=yes;;
     -x11_no_gl)      build_x11=yes;build_x11_no_gl=yes;;
     -no_gl)          build_no_gl=yes;;
     -cocoa)          build_cocoa=yes;;
     -cocoa_gnu)      build_cocoa_gnu=yes;;
     -ios)            build_ios=yes;;
     -ios_gnu)        build_ios_gnu=yes;;
     -iossim)         build_iossim=yes;;
     -android)        build_android=yes;;
     -webgl)          build_WebGL=yes;;
     -WebGL)          build_WebGL=yes;;
     -tntnet)         build_tntnet=yes;;
     -no_screen)      build_no_screen=yes;;
     -sys_Python)     build_use_not_our_Python=yes;;
     -no_wall)        build_no_wall=yes;;
     # etc :
     -install)    build_install=yes;;
     -*)          inlib_args="${inlib_args} ${arg}";;
      *)          inlib_args="${inlib_args} ${arg}";;
  esac
done

#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////
#//////////////////////////////////////////////////////

# guess preferred screen handling :
if [ ${build_no_screen} = "yes" ] ; then
  # Then let inlib/mgr/build_* choose the config and compiler.
  # This option does not induce a "build distrib".
  echo dummy > /dev/null

elif [ ${build_batch} = "yes" ] ; then
  # take default compiler : clang on Mac, gnu on Linux.
  echo dummy > /dev/null
elif [ ${build_x11} = "yes" ] ; then
  # take default compiler : clang on Mac, gnu on Linux.
  echo dummy > /dev/null
elif [ ${build_cocoa} = "yes" ] ; then
  inlib_args="${inlib_args} -sdk_mac"
elif [ ${build_cocoa_gnu} = "yes" ] ; then
  inlib_args="${inlib_args} -sdk_mac_gnu"
elif [ ${build_ios} = "yes" ] ; then
  inlib_args="${inlib_args} -sdk_ios"
elif [ ${build_ios_gnu} = "yes" ] ; then
  inlib_args="${inlib_args} -sdk_ios_gnu"
elif [ ${build_iossim} = "yes" ] ; then
  inlib_args="${inlib_args} -sdk_iossim"

elif [ ${build_android} = "yes" ] ; then
  inlib_args="${inlib_args} -sdk_android"

elif [ ${build_WebGL} = "yes" ] ; then
  # take default compiler : clang on Mac, gnu on Linux.
  echo dummy > /dev/null

elif [ ${build_tntnet} = "yes" ] ; then
  # take default compiler : clang on Mac, gnu on Linux.
  echo dummy > /dev/null

else
  if [ `uname` = "Darwin" ] ; then
    build_cocoa=yes

    ${inlib_mgr}/check_app clang++
    build_status=$?;
    if [ ${build_status} = 0 ] ; then
      inlib_args="${inlib_args} -sdk_mac"
    else
      inlib_args="${inlib_args} -sdk_mac_gnu"
    fi

  elif [ `uname` = "Linux" ] ; then
    build_x11=yes
    # take default compiler : clang on Mac, gnu on Linux.
  fi
fi

build_args="${inlib_args}"

. ${exlib_mgr}/build_ourex_args

. ${inlib_mgr}/build_app_header

if [ "${app}" = "" ] ; then
  echo "exlib/mgr/build_header : app variable not set."
  exit
fi

if [ ${build_x11_no_gl} = "yes" ] ; then
  cppflags="${cppflags} -DEXLIB_X11_NO_GL"
fi

if [ ${build_no_gl} = "yes" ] ; then
  cppflags="${cppflags} -DEXLIB_NO_GL"
fi

if [ "${build_no_wall}" = "no" ] ; then
  cppflags="${cppflags} -DRM_WALL_DATA_CLIENT"
fi


