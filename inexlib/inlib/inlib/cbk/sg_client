// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_sg_client
#define inlib_cbk_sg_client

#include "../sg/plots"
#include "../sg/view_evd"

#include "../sg/view_sg_client"

namespace inlib {
namespace cbk {

inline sg::return_action action_send_to_screen(sg::gui_viewer& a_gv,sg::entries& a_node,const args& a_data) {
  sg::view_sg_client* vsc = sg::cast_view_sg_client(a_gv);
  if(!vsc) {
    a_gv.map_warn("viewer is not a sg_client");
    return sg::return_none;
  }

  const std::string& what = a_node.values[0];

  args opts(a_data);
  opts.add(sg::s_send_scale(),a_node.values[1]);

  //if(a_grid.back_selected())

  bool status = false;
  if(what=="plots") {
    sg::plots* _plots = sg::search_selectable<sg::plots>(a_gv.out(),a_gv.scene());
    if(!_plots) {
      a_gv.map_warn("no plots given");
      return sg::return_none;
    }
    status = vsc->send_sg(*_plots,opts);
  } else if(what=="static") {
    sg::view_evd* _evd = sg::cast_view_evd(a_gv);
    if(!_evd) return sg::return_none;
    status = vsc->send_sg(_evd->static_sg(),opts);
  } else if(what=="dynamic") {
    sg::view_evd* _evd = sg::cast_view_evd(a_gv);
    if(!_evd) return sg::return_none;
    status = vsc->send_sg(_evd->dynamic_sg(),opts);
  }

  if(!status) a_gv.map_warn_failed();
  else        a_gv.map_warn_done();

  return sg::return_to_render;
}

inline sg::return_action action_what(sg::gui_viewer& a_gv,sg::button_grid<sg::simple_button>& a_node) {
  args _args;
  _args.add(sg::s_send_placement(),sg::s_placement_screen());
  _args.add(sg::s_col(),tos((unsigned int)a_node.m_selected_col));
  _args.add(sg::s_row(),tos((unsigned int)a_node.m_selected_row));

  sg::entries* entries = new sg::entries(a_gv.ttf());
  a_gv.set_style(*entries);

 {std::vector<std::string> opts;
  opts.push_back("static");
  opts.push_back("dynamic");
  opts.push_back("plots");
  entries->add_opts("what",opts[0],opts);}
  entries->add_float("scale",1);

  sg::add_callback(a_gv,*entries,action_send_to_screen,_args);

  a_gv.push_list(entries);
  return sg::return_to_render;
}

inline sg::return_action action_send_to_a_screen(sg::gui_viewer& a_gv) {
  sg::view_sg_client* vsc = sg::cast_view_sg_client(a_gv);
  if(!vsc) return sg::return_none;
  if(!vsc->is_connected()) {
    a_gv.map_warn_not_connected();
    return sg::return_to_render;
  }

  // ask sg_serv cols rows :

  float wall_aspect = 1;
  unsigned int cols = 1;
  unsigned int rows = 1;

 {unsigned int ww,wh,bw,bh;
  std::string s;
  if(!vsc->sg_client().get_sg_serv_params(s)){
    a_gv.map_warn_net_error();
    return sg::return_to_render;
  }
  if(!sg::s2params(s,ww,wh,bw,bh,cols,rows)) {
    a_gv.map_warn("can't get sg_serv params");
    return sg::return_to_render;
  }
  unsigned int wall_ww = cols * (ww+2*bw);
  unsigned int wall_wh = rows * (wh+2*bh);
  wall_aspect = float(wall_ww-2*bw)/float(wall_wh-2*bh);}

  float wcw,wch;
 {float tx,ty,aspect;
  a_gv.get_gui_wcw_wch(wcw,wch,tx,ty,aspect);}

  sg::button_grid<sg::simple_button>* grid = new sg::button_grid<sg::simple_button>();
  a_gv.set_colors(*grid);

  grid->cols = cols;
  grid->rows = rows;
  grid->width = wcw*0.98f;
  grid->height = grid->width.value()/wall_aspect;

  grid->border_height = grid->height*0.1f; //border should be touchable.
  grid->border_width = grid->border_height;

  grid->auto_resize = true;

  sg::add_callback(a_gv,*grid,action_what);

  a_gv.push_list(grid);
  return sg::return_to_render;
}

inline sg::return_action action_connect(sg::gui_viewer& a_gv,sg::entries& a_node) {
  sg::view_sg_client* vsc = sg::cast_view_sg_client(a_gv);
  if(!vsc) return sg::return_none;
  const std::string& host = a_node.values[0];
  unsigned int port;
  if(!to<unsigned int>(a_node.values[1],port)) {
    a_gv.map_warn_nan();
    return sg::return_to_render;
  }
  if(!vsc->sg_client().initialize(host,port)) {
    std::string s("can't connect to ");
    s += host;
    s += " ";
    s += tos(port);
    a_gv.map_warn(s);
    return sg::return_to_render;
  }
  vsc->update_camenu_send_button(a_gv.m_params);
  a_gv.map_warn("connected",false);
  return sg::return_to_render;
}

inline sg::return_action action_walls(sg::gui_viewer& a_gv) {
  sg::view_sg_client* vsc = sg::cast_view_sg_client(a_gv);
  if(!vsc) return sg::return_none;

  //std::string host;
  //if(!net::host_name(a_gv.out(),host)){
  //  a_gv.map_warn("cannot get host name");
  //  return sg::return_to_render;
  //}

  //::printf("debug : \"%s\"\n",host.c_str());
  sg::entries* entries = new sg::entries(a_gv.ttf());
  a_gv.set_style(*entries);
  sg::add_callback(a_gv,*entries,action_connect);
  entries->label = "connect";

 {std::vector<std::string> opts;
  //opts.push_back(host);
  const std::vector<xml::wall_host>& walls = vsc->walls()._walls();
  inlib_vforcit(xml::wall_host,walls,it) opts.push_back((*it).host());
  if(opts.empty()) {
    entries->add_ip("sg serv ip","");
  } else {
    entries->add_combo_string("sg_serv",opts[0],opts);
  }
  }
  entries->add_uint("port",50800);

  a_gv.push_list(entries);
  return sg::return_to_render;
}


//////////////////////////////////////////////////
/// remote wall control //////////////////////////
//////////////////////////////////////////////////
/*
inline sg::return_action action_gui_wall(sg::gui_viewer& a_gv) {
  sg::view_sg_client* vsc = sg::cast_view_sg_client(a_gv);
  if(!vsc) return sg::return_none;
  vsc->show_wall_menu();
  return sg::return_to_render;
}
inline sg::return_action action_clear_static_scene(sg::gui_viewer& a_gv) {
  sg::view_sg_client* vsc = sg::cast_view_sg_client(a_gv);
  if(!vsc) return sg::return_none;
  if(!vsc->is_connected()) {
    a_gv.map_warn_not_connected();
    return sg::return_to_render;
  }
  if(!vsc->send_string(sg::s_protocol_clear_static_sg())) {}
  return sg::return_none;
}
*/

/*
inline sg::return_action action_reset(sg::gui_viewer& a_gv) {
  sg::view_sg_client* vsc = sg::cast_view_sg_client(a_gv);
  if(!vsc) return sg::return_none;
  if(!vsc->is_connected()) {
    a_gv.map_warn_not_connected();
    return sg::return_to_render;
  }
  if(!vsc->send_string(wall::protocol::s_rwc_reset_camera())) {}
  return sg::return_none;
}

inline sg::return_action action_toggle_cursor(sg::gui_viewer& a_gv) {
  sg::view_sg_client* vsc = sg::cast_view_sg_client(a_gv);
  if(!vsc) return sg::return_none;
  if(!vsc->is_connected()) {
    a_gv.map_warn_not_connected();
    return sg::return_to_render;
  }
  if(!vsc->send_string(wall::protocol::s_rwc_toggle_cursor())) {}
  return sg::return_none;
}

inline sg::return_action action_toggle_menu(sg::gui_viewer& a_gv) {
  sg::view_sg_client* vsc = sg::cast_view_sg_client(a_gv);
  if(!vsc) return sg::return_none;
  if(!vsc->is_connected()) {
    a_gv.map_warn_not_connected();
    return sg::return_to_render;
  }
  if(!vsc->send_string(wall::protocol::s_rwc_toggle_menu())) {}
  return sg::return_none;
}
*/

inline sg::return_action action_send_static_sg(sg::gui_viewer& a_gv) {
  sg::view_sg_client* vsc = sg::cast_view_sg_client(a_gv);
  if(!vsc) return sg::return_none;
  sg::view_evd* _evd = sg::cast_view_evd(a_gv);
  if(!_evd) return sg::return_none;

  if(!vsc->is_connected()) {
    a_gv.map_warn_not_connected();
    return sg::return_to_render;
  }
  //::printf("debug : scene_radius %g\n",scene_radius);
  args opts;
  opts.add(sg::s_send_placement(),sg::s_placement_static());
//opts.add(sg::s_send_radius(),tos(a_gv.scene_camera_radius()));

  if(!vsc->send_sg(_evd->static_sg(),opts)){
    a_gv.map_warn_failed();
    return sg::return_to_render;
  }
  return sg::return_none;
}

inline sg::return_action action_send_dynamic_sg(sg::gui_viewer& a_gv) {
  sg::view_sg_client* vsc = sg::cast_view_sg_client(a_gv);
  if(!vsc) return sg::return_none;
  sg::view_evd* _evd = sg::cast_view_evd(a_gv);
  if(!_evd) return sg::return_none;

  if(!vsc->is_connected()) {
    a_gv.map_warn_not_connected();
    return sg::return_to_render;
  }
  //::printf("debug : scene_radius %g\n",scene_radius);
  args opts;
  opts.add(sg::s_send_placement(),sg::s_placement_dynamic());
//opts.add(sg::s_send_radius(),tos(a_gv.scene_camera_radius()));

  if(!vsc->send_sg(_evd->dynamic_sg(),opts)){
    a_gv.map_warn_failed();
    return sg::return_to_render;
  }
  return sg::return_none;
}

inline sg::return_action action_disconnect(sg::gui_viewer& a_gv) {
  sg::view_sg_client* vsc = sg::cast_view_sg_client(a_gv);
  if(!vsc) return sg::return_none;
  vsc->disconnect_from_sg_serv();
  vsc->update_camenu_send_button(a_gv.m_params);
  return sg::return_none;
}

inline sg::return_action action_menu_sg_client(sg::gui_viewer& a_gv) {
  sg::view_sg_client* vsc = sg::cast_view_sg_client(a_gv);
  if(!vsc) return sg::return_none;

  sg::list* list = new sg::list(a_gv.ttf());
  a_gv.set_style(*list);

  sg::add_item(a_gv,*list,"connect",action_walls);
  sg::add_item(a_gv,*list,"send static sg",action_send_static_sg);
  sg::add_item(a_gv,*list,"send dynamic sg",action_send_dynamic_sg);
  sg::add_item(a_gv,*list,"send to a screen",action_send_to_a_screen);
//sg::add_item(a_gv,*list,"clear",action_clear);
//sg::add_item(a_gv,*list,"reset",action_reset);
//sg::add_item(a_gv,*list,"toggle cursor",action_toggle_cursor);
//sg::add_item(a_gv,*list,"toggle menu",action_toggle_menu);
//sg::add_item(a_gv,*list,"gui wall",action_gui_wall);
  sg::add_item(a_gv,*list,"disconnect",action_disconnect);

  a_gv.push_list(list);
  return sg::return_to_render;
}

inline sg::return_action action_sg_client_main(sg::gui_viewer& a_gv) {return action_menu_sg_client(a_gv);} //deprecated.


}}

#endif
