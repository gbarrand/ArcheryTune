// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_out
#define inlib_cbk_out

#include "mail"

namespace inlib {
namespace cbk {

inline sg::return_action action_menu_export(sg::gui_viewer& a_gv,const sg::pos_data& a_data) {
  sg::list* list = new sg::list(a_gv.ttf());
  a_gv.set_style(*list);
  sg::add_item_insh(a_gv,*list,"window to out.jpeg","window_to_jpeg");
  sg::add_item_insh(a_gv,*list,"window to out.png" ,"window_to_png");

  sg::add_item_insh(a_gv,*list,"scene to out_zb.ps"   ,"gui_hide_main_menu\nscene_write_to_paper -format=inzb_ps   -out_dir -scale=2 out_zb.ps");
  sg::add_item_insh(a_gv,*list,"scene to out_zb.png"  ,"gui_hide_main_menu\nscene_write_to_paper -format=inzb_png  -out_dir -scale=2 out_zb.png");
  sg::add_item_insh(a_gv,*list,"scene to out_zb.jpeg" ,"gui_hide_main_menu\nscene_write_to_paper -format=inzb_jpeg -out_dir -scale=2 out_zb.jpeg");
  sg::add_item_insh(a_gv,*list,"scene to out_gl2ps.eps","gui_hide_main_menu\nscene_write_to_paper -format=gl2ps_eps -out_dir out_gl2ps.eps");
  sg::add_item_insh(a_gv,*list,"scene to out_gl2ps.ps" ,"gui_hide_main_menu\nscene_write_to_paper -format=gl2ps_ps  -out_dir out_gl2ps.ps");
  sg::add_item_insh(a_gv,*list,"scene to out_gl2ps.pdf","gui_hide_main_menu\nscene_write_to_paper -format=gl2ps_pdf -out_dir out_gl2ps.pdf");
  sg::add_item_insh(a_gv,*list,"scene to out_gl2ps.svg","gui_hide_main_menu\nscene_write_to_paper -format=gl2ps_svg -out_dir out_gl2ps.svg");
  sg::add_item_insh(a_gv,*list,"scene to out_gl2ps.tex","gui_hide_main_menu\nscene_write_to_paper -format=gl2ps_tex -out_dir out_gl2ps.tex");
  sg::add_item_insh(a_gv,*list,"scene to out_gl2ps.pgf","gui_hide_main_menu\nscene_write_to_paper -format=gl2ps_pdf -out_dir out_gl2ps.pgf");
//#if defined(IODA_DEV) || defined(G4VIEW_DEV)
//  sg::add_item(a_gv,*list,"scene to out.exsg",sg::action_exsg);
//#endif
  sg::add_item_insh(a_gv,*list,"scene to out.bsg","scene_write_to_bsg -out_dir out.bsg");
  sg::add_item_insh(a_gv,*list,"static scene in out_static.bsg","scene_write_static_to_bsg -out_dir out_static.bsg");
  sg::add_item_insh(a_gv,*list,"dynamic scene in out_dynamic.bsg","scene_write_dynamic_to_bsg -out_dir out_dynamic.bsg");
  if(a_gv.has_mail_panel()) {
    sg::add_item(a_gv,*list,"mail...",cbk::action_mail,a_data);
  }
  a_gv.show_widget(a_data,list);
  return sg::return_to_render;
}

}}

namespace inlib {
namespace out {
inline sg::return_action action_main(sg::gui_viewer& a_gv,const sg::pos_data& a_data) { //deprecated.
  return cbk::action_menu_export(a_gv,a_data);
}
}}

#endif
