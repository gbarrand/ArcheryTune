// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_cbk_mail
#define inlib_cbk_mail

#include "../sg/gui_viewer"

namespace inlib {
namespace cbk {

inline void file_to_mail(sg::gui_viewer& a_gv,const std::string& a_file,const std::string& a_subject,const std::string& a_msg) {
  if(a_gv.has_mail_panel()) {
    std::string mime;
    if(!file::mime_type(a_file,mime)){
      //mime set to application/octet_stream
    }
    std::string to; //get from address book.
    if(!a_gv.mail_panel(to,a_subject,a_msg,a_file,mime)) {
      a_gv.map_warn_failed();
      return;
    }
   //a_gv.map_warn("iPhone send msg done");
  } else {
    a_gv.map_warn("mail not supported on this platform");
    (void)a_file;
    (void)a_subject;
    (void)a_msg;
/*
    const std::string& from    = vals[3];
    const std::string& to      = vals[4];
    const std::string& smtp    = vals[5];

    const std::string& sport   = vals[6];
    const std::string& sauth   = vals[7];
    const std::string& user    = vals[8];
    const std::string& pass    = vals[9];

    unsigned int port;
    if(!to(sport,port)) {
      m_gv.map_warn("port not an uint");
      return sg::return_to_render;
    }

    bool auth;
    if(!to(sauth,auth)) {
      m_gv.map_warn("auth not a bool");
      return sg::return_to_render;
    }

    bool verbose = false;

    if(!mail_file(m_gv.out(),_path,smtp,port,from,to,auth,user,pass,subject,msg,verbose)) {
      m_gv.map_warn_failed();
      return sg::return_to_render;
    }
    m_gv.map_warn_done();
*/
  }
}

inline void def_subject(sg::gui_viewer& a_gv,std::string& a_s) {a_s = a_gv.app_name()+" export";}
inline void def_msg(sg::gui_viewer& a_gv,std::string& a_s) {a_s = "sent from "+a_gv.app_name()+" app.";}

inline sg::return_action action_send_mail(sg::gui_viewer& a_gv,sg::entries& a_entries) {
  const std::vector<std::string>& vals = a_entries.values.values();
  const std::string& file = vals[0];
  std::string _path;
  if(a_gv.out_dir().size()) {
    if(!check_dir(a_gv.out(),a_gv.out_dir())) return sg::return_to_render;
    _path = a_gv.out_dir()+sep();
  }
  _path += file;
  file_to_mail(a_gv,_path,vals[1],vals[2]);
  return sg::return_to_render;
}

inline sg::return_action action_mail(sg::gui_viewer& a_gv,const sg::pos_data& a_data) {
  sg::entries* _entries = new sg::entries(a_gv.ttf());
  a_gv.set_style(*_entries);
  add_callback(a_gv,*_entries,action_send_mail);

  _entries->label = "mail";

 {std::vector<std::string> opts;
  opts.push_back("out.jpeg");
  opts.push_back("out.jpg");
  opts.push_back("out.png");
  opts.push_back("out.ps");
  opts.push_back("out.exsg");
  _entries->add_opts("file",opts[0],opts);} //0

  ///////////////////////////////////////////////
  /// mail params ///////////////////////////////
  ///////////////////////////////////////////////
  _entries->add_string("subject",a_gv.app_name()+" export");            //1
  _entries->add_string("message","sent from "+a_gv.app_name()+" app."); //2

  if(a_gv.has_mail_panel()) {
  } else {
    _entries->add_string("from","barrand@lal.in2p3.fr"); //3
    _entries->add_string("to","barrand@lal.in2p3.fr");   //4

    _entries->add_string("smtp","smtp.lal.in2p3.fr");    //5
   {std::vector<std::string> opts;
    opts.push_back("587");
    opts.push_back("25");
    _entries->add_opts("port",opts[0],opts);} //6

    // show the two below if "to" is not <user>@lal.in2p3.fr :
    _entries->add_bool("auth",false);             //7
    _entries->add_string("auth=true -> user",""); //8
    _entries->add_string("auth=true -> pass",""); //9
  }

  a_gv.show_widget(a_data,_entries);
  return sg::return_to_render;
}

class mail_cbk : public sg::acbk {
  typedef acbk parent;
public:
  static unsigned int action_png()       {return 1;}
  static unsigned int action_png2mail()  {return 2;}
public:
  virtual sg::return_action action() {
    if(m_action==action_png()) { //out.png.
      m_gv.hide_main_menu();
      //bool old_border = m_gv.plots().view_border;
      //m_gv.plots().view_border = false;
      m_gv.set_produce_out_png(true);
      //send_restore(old_border);
      return sg::return_to_render;

    } else if(m_action==action_png2mail()) {

      std::string _path;
      if(m_gv.out_dir().size()) _path = m_gv.out_dir()+sep();
      _path += "out.png";
      std::string dsub;
      def_subject(m_gv,dsub);
      std::string dmsg;
      def_msg(m_gv,dmsg);
      file_to_mail(m_gv,_path,dsub,dmsg);
      return sg::return_to_render;
    }
    return sg::return_none;
  }
  virtual sg::bcbk* copy() const {return new mail_cbk(*this);}
public:
  mail_cbk(sg::gui_viewer& a_gv,unsigned int a_action)
  :parent(a_action)
  ,m_gv(a_gv)
  {}
  virtual ~mail_cbk(){}
public:
  mail_cbk(const mail_cbk& a_from)
  :parent(a_from)
  ,m_gv(a_from.m_gv)
  {}
  mail_cbk& operator=(const mail_cbk& a_from){
    parent::operator=(a_from);
    return *this;
  }
protected:
  sg::gui_viewer& m_gv;
};

inline sg::return_action action_mail_png(sg::gui_viewer& a_gv) {
  // used in ArcheryTune.
 {mail_cbk* _cbk = new mail_cbk(a_gv,mail_cbk::action_png());
  _cbk->set_single_shoot(true);
  a_gv.add_work(_cbk);}
 {mail_cbk* _cbk = new mail_cbk(a_gv,mail_cbk::action_png2mail());
  _cbk->set_single_shoot(true);
  a_gv.add_work(_cbk);}
  return sg::return_none;
}

}}

#endif
