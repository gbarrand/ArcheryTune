// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_object_manager
#define inlib_sg_object_manager

// for example, to handle histos created with insh commands.

#include "group"
#include "holder"
#include "../sout"

namespace inlib {
namespace sg {

class object_manager {
public:
  INLIB_SCLASS(inlib::sg::object_manager)
public:
  object_manager(std::ostream& a_out):m_out(a_out) {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~object_manager(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
protected:
  object_manager(const object_manager& a_from):m_out(a_from.m_out) {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
    //WARNING : m_nodes is not copied.
  }
  object_manager& operator=(const object_manager&){
    //WARNING : m_nodes is not copied.
    return *this;
  }
public:
  std::ostream& out() const {return m_out;}
  const group& nodes() const {return m_nodes;} //for histos created with insh commands.
  group& nodes() {return m_nodes;}

  base_holder* find_base_holder(const std::string& a_name) const {
    inlib_vforcit(node*,m_nodes.children(),it) {
      base_holder* bh = safe_cast<node,base_holder>(*(*it));
      if(bh && (bh->name()==a_name)) return bh;
    }
    return 0;
  }

  template <class T>
  T* find_object(const std::string& a_name) const {
    inlib_vforcit(node*,m_nodes.children(),it) {
      holder<T>* h = cast_holder<T>(*(*it));
      if(h && (h->name()==a_name)) return h->object();
    }
    return 0;
  }

  template <class T>
  bool manage_object(T*& a_object,const std::string& a_name,bool a_check_existing,bool a_overwrite,bool a_warn,bool a_own=true) {
    if(a_check_existing) {
      if(base_holder* bh = find_base_holder(a_name)) {
        if(a_overwrite) {
	  if(a_warn) {
            m_out << "inlib::sg::gui_viewer::manage_object :"
                  << " warning : an object with name " << sout(a_name) << " alredy exist. Replace it."
                  << std::endl;
	  }
          m_nodes.remove(bh);
          delete bh;
	} else {
          m_out << "inlib::sg::gui_viewer::manage_object :"
                << " an object with name " << sout(a_name) << " alredy exist."
                << std::endl;
	  if(a_own) {
            delete a_object;
            a_object = 0;
          }
	  return false;
	}
      }
    }
    m_nodes.add(new holder<T>(a_object,a_name,a_own));
    return true;
  }

  bool remove_object(const std::string& a_name,bool a_delete,bool a_warn) {
    base_holder* bh = find_base_holder(a_name);
    if(!bh) {
      if(a_warn) m_out << "inlib::sg::object_manager : warning : object " << sout(a_name) << " not found." << std::endl;
      return false;
    }
    m_nodes.remove(bh);
    if(a_delete) delete bh;
    return true;
  }

  void remove_node(node* a_node,bool a_delete) {
    m_nodes.remove(a_node);
    if(a_delete) delete a_node;
  }

  void clear() {m_nodes.clear();}

  template <class T>
  void remove_by_class() {
    std::vector<node*>& vec = m_nodes.children();
    typedef std::vector<node*>::iterator it_t;
    for(it_t it=vec.begin();it!=vec.end();) {
      node* entry  = *it;
      if(sg::cast_holder_object<T>(*entry)) {
        it = vec.erase(it);
        delete entry;
      } else {
        it++;
      }
    }
  }

public:
  void add_source(node* a_node,const std::string& a_name) {m_sources.push_back(named_node(a_name,a_node));}
  node* find_source(const std::string& a_name) const {
    inlib_vforcit(named_node,m_sources,it) {
      if((*it).first==a_name) return (*it).second;
    }
    return 0;
  }
  /*
  bool remove_source(const std::string& a_name,bool a_delete) const {
    typedef std::vector<named_node>::iterator it_t;
    for(it_t it=m_sources.begin();it!=m_sources.end();) {
      if((*it).first==a_name) {
        node* _node = (*it).second;
        it = vec.erase(it);
        if(a_delete) delete _node;
        return true;
      } else {
        it++;
      }
    }
    return false;
  }
  */
protected:
  std::ostream& m_out;
  group m_nodes;
  typedef std::pair<std::string,node*> named_node;
  std::vector<named_node> m_sources;
};

}}

#endif

