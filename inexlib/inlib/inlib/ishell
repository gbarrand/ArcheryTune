// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_ishell
#define inlib_ishell

#include <string>
#include <vector>
#include <ostream>
#include <sstream>

namespace inlib {

class ishell {
public:
  virtual ~ishell() {}
public:
  virtual bool in_backquote() const = 0;
  virtual void warn(const std::string&,bool /*a_to_stop*/ = true) = 0;
  virtual void out_begin() = 0;
  virtual void out(const std::string&,bool /*a_append*/ = false,bool /*a_endl*/ = true) = 0;
  virtual void out(const std::vector<std::string>& a_ss,bool a_append = false,bool a_endl = true) = 0;
  virtual void unix_print(const std::vector<std::string>&,size_t /*a_spaces*/ = 2) const = 0;
  virtual std::ostream& out() const = 0;
  virtual void set_to_stop() = 0;
public:
  template <class T>
  void out_num(const T& a_v,bool a_append = false,bool a_endl = true)  {
    std::ostringstream oss;
    oss.str().clear();
    oss << a_v;
    out(oss.str(),a_append,a_endl);
  }
};

#define INLIB_ISHELL_GET_ARG_STRING(a__args,a__variable)\
   {std::string svalue;\
    std::string _key = std::string("-")+#a__variable;\
    if(a__args.find(_key,svalue)) {\
      s##a__variable  = svalue;\
      a__args.remove(_key);\
    }}

#define INLIB_ISHELL_GET_ARG_FLOAT(a__insh,a__args,a__where,a__variable,a__return)\
   {std::string svalue;\
    std::string _key = std::string("-")+#a__variable;\
    if(a__args.find(_key,svalue)) {\
      float _value;\
      if(!inlib::to<float>(svalue,_value)) {\
        a__insh.warn(std::string(#a__where)+" : "+svalue+" is not a float.");\
        return a__return;\
      }\
      a__variable  = _value;\
      a__args.remove(_key);\
    }}

#define INLIB_ISHELL_GET_ARG_DOUBLE(a__insh,a__args,a__where,a__variable,a__return)\
   {std::string svalue;\
    std::string _key = std::string("-")+#a__variable;\
    if(a__args.find(_key,svalue)) {\
      double _value;\
      if(!inlib::to<double>(svalue,_value)) {\
        a__insh.warn(std::string(#a__where)+" : "+svalue+" is not a double.");\
        return a__return;\
      }\
      a__variable  = _value;\
      a__args.remove(_key);\
    }}

#define INLIB_ISHELL_GET_ARG_UINT(a__insh,a__args,a__where,a__variable,a__return)\
   {std::string svalue;\
    std::string _key = std::string("-")+#a__variable;\
    if(a__args.find(_key,svalue)) {\
      unsigned int _value;\
      if(!inlib::to<unsigned int>(svalue,_value)) {\
        a__insh.warn(std::string(#a__where)+" : "+svalue+" is not a uint.");\
        return a__return;\
      }\
      a__variable  = _value;\
      a__args.remove(_key);\
    }}

#define INLIB_ISHELL_GET_ARG_UINT64(a__insh,a__args,a__where,a__variable,a__return)\
   {std::string svalue;\
    std::string _key = std::string("-")+#a__variable;\
    if(a__args.find(_key,svalue)) {\
      uint64 _value;\
      if(!inlib::to<uint64>(svalue,_value)) {\
        a__insh.warn(std::string(#a__where)+" : "+svalue+" is not a uint64.");\
        return a__return;\
      }\
      a__variable  = _value;\
      a__args.remove(_key);\
    }}

#define INLIB_ISHELL_GET_ARG_BOOL(a__insh,a__args,a__where,a__variable,a__return)\
   {std::string svalue;\
    std::string _key = std::string("-")+#a__variable;\
    if(a__args.find(_key,svalue)) {\
      bool _value;\
      if(!inlib::to(svalue,_value)) {\
        a__insh.warn(std::string(#a__where)+" : "+svalue+" is not a bool.");\
        return a__return;\
      }\
      a__variable  = _value;\
      a__args.remove(_key);\
    }}

}

#endif
