
# source from a build script. It must come after use_cc, use_cpp.

# pgex : plugin suffix.

if [ `uname` = Darwin ] ; then
  #NOTE : on my MacBookPro :
  #         "uname -p" returns i386
  #         "uname -m" returns x86_64
  lib=lib
  pgex=bundle
else
  if [ `uname -p` = x86_64 ] ; then
    lib=lib64
  else
    lib=lib
  fi
  pgex=so
fi
if [ ${build_sdk_android} = "yes" ] ; then
  pgex=so
fi

if [ "${cc_compiler}" = "" ] ; then
  echo "use_sys must be after use_cc and/or use_cpp".
  exit
fi

#////////////////////////////////////////////////////////////////
#/// options to build shared lib : //////////////////////////////
#////////////////////////////////////////////////////////////////

# shex : shared lib suffix.
# WARNING : someone must not confuse a shared lib and a plugin.
#           Just in case, we remember that a plugin is some
#           kind of program without a main which is targeted
#           to be dynamically loaded with dlopen. Being a kind
#           of program it must be fully linked. A shared lib must
#           be seen as a kind of advanced archive, and as such
#           don't have to be linked.

shopts=
if [ ${build_sdk_android} = "yes" ] ; then
  shex=so
  shopts="${shopts} -shared"

  ar_cmd=${ndk_bin}/arm-linux-androideabi-ar
  ranlib_cmd=${ndk_bin}/arm-linux-androideabi-ranlib

  strip_cmd="${ndk_bin}/arm-linux-androideabi-strip --strip-unneeded"

elif [ `uname` = Darwin ] ; then
  shex=dylib
  shopts="${shopts} -dynamiclib -twolevel_namespace"
  shopts="${shopts} -undefined dynamic_lookup -dynamic -single_module"

  ar_cmd=ar
  ranlib_cmd=ranlib

else
  shex=so
  shopts="${shopts} -shared"

  ar_cmd=ar
  ranlib_cmd=ranlib
fi

cc_shlib_builder="${cc_compiler} ${shopts}"
cpp_shlib_builder="${cpp_compiler} ${shopts}"

if [ ${build_visual} = "yes" ] ; then
  pgpy=pyd
else
  pgpy=so
fi

#////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////
linker_flags=
if [ ${build_visual} = "no" ] ; then
  if [ ${build_m32} = yes ] ; then linker_flags="${linker_flags} -m32"; fi
fi
