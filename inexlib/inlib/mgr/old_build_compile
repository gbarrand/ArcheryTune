
# to be sourced from another build script.

if [ "${build_args_file}" != "" ] ; then
  mmfiles=
  cfiles=
  ccfiles=
  f77files=
  cppfiles="${build_args_file}"
fi

if [ ${build_verbose} = yes ] ; then
  echo "build path is ${build_path}"
fi

/bin/mkdir -p ${build_path}

if [ ${build_verbose} = yes ] ; then
  echo "inlib/mgr/build_compile : package ${build_pack} ..."
fi

for file in ${cfiles} ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.c::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ ${build_visual} = "yes" ] ; then
    /bin/rm -f ./cl_exe_tmp
    eval ${cc_compiler} /c ${ccflags} /Fo${obj} ${file} > ./cl_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi
    /bin/rm -f ./cl_exe_tmp
  else
    eval ${cc_compiler} -c ${ccflags} -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done

for file in ${ccfiles} ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.cc::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ ${build_visual} = "yes" ] ; then
    /bin/rm -f ./cl_exe_tmp
    eval ${cpp_compiler} /c ${cppflags} /Fo${obj} /Tp${file} > ./cl_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi
    /bin/rm -f ./cl_exe_tmp
  else
    eval ${cpp_compiler} -x c++ -c ${cppflags} -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done

for file in ${cxxfiles} ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.cxx::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ ${build_visual} = "yes" ] ; then
    /bin/rm -f ./cl_exe_tmp
    eval ${cpp_compiler} /c ${cppflags} /Fo${obj} /Tp${file} > ./cl_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi
    /bin/rm -f ./cl_exe_tmp
  else
    eval ${cpp_compiler} -x c++ -c ${cppflags} -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done

for file in ${cppfiles} ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.cpp::g'`

  for item in ${archive_headers} ; do
    if [ ${item} = ${oname} ] ; then
      _cppflags="-DINLIB_TAKE_CODE"
    fi
  done

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ ${build_visual} = "yes" ] ; then
    /bin/rm -f ./cl_exe_tmp
    eval ${cpp_compiler} /c ${cppflags} ${_cppflags} /Fo${obj} /Tp${file} > ./cl_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi
    /bin/rm -f ./cl_exe_tmp
  else
    eval ${cpp_compiler} -x c++ -c ${cppflags} ${_cppflags} -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done

for file in ${C_files} ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.C::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ ${build_visual} = "yes" ] ; then
    /bin/rm -f ./cl_exe_tmp
    eval ${cpp_compiler} /c ${cppflags} /Fo${obj} /Tp${file} > ./cl_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi
    /bin/rm -f ./cl_exe_tmp
  else
    eval ${cpp_compiler} -x c++ -c ${cppflags} -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done

for file in ${f77files} ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.f::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ ${build_visual} = "yes" ] ; then
    eval ${f77_compiler} ${f77flags} /object=${obj} ${file}
  else
    eval ${f77_compiler} ${f77flags} -c -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done

for file in ${mfiles} ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.m::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ ${build_visual} = "yes" ] ; then
    echo "inlib/mgr/build_compile : visual can't compile Objective-C files."
    exit
  else
    eval ${cpp_compiler} -x objective-c -c ${cppflags} ${mflags} -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done
  
for file in ${mmfiles} ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.mm::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ ${build_visual} = "yes" ] ; then
    echo "inlib/mgr/build_compile : visual can't compile Objective-C files."
    exit
  else
    eval ${cpp_compiler} -x objective-c++ -c ${cppflags} ${mmflags} -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done
  
if [ -f ./f_tmp ] ; then
for file in $(cat ./f_tmp) ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.f::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ ${build_visual} = "yes" ] ; then
    eval ${f77_compiler} ${f77flags} /object=${obj} ${file}
  else
    eval ${f77_compiler} ${f77flags} -c -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done
/bin/rm -f ./f_tmp
fi

if [ -f ./F_tmp ] ; then
for file in $(cat ./F_tmp) ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.F::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ ${build_visual} = "yes" ] ; then
    eval ${f77_compiler} ${f77flags} /object=${obj} ${file}
  else
    eval ${f77_compiler} ${f77flags} -c -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done
/bin/rm -f ./F_tmp
fi

if [ -f c_tmp ] ; then
for file in $(cat c_tmp) ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.c::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ -f ${obj} ] ; then
    echo "inlib/mgr/build_compile : WARNING : ${obj} already exists."
  fi
  if [ ${build_visual} = "yes" ] ; then
    /bin/rm -f ./cl_exe_tmp
    eval ${cc_compiler} /c ${ccflags} /Fo${obj} ${file} > ./cl_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi
    /bin/rm -f ./cl_exe_tmp
  else
    eval ${cc_compiler} -c ${ccflags} -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done
/bin/rm -f c_tmp
fi

if [ -f cc_tmp ] ; then
for file in $(cat cc_tmp) ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.cc::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ -f ${obj} ] ; then
    echo "inlib/mgr/build_compile : WARNING : ${obj} already exists."
  fi
  if [ ${build_visual} = "yes" ] ; then
    /bin/rm -f ./cl_exe_tmp
    eval ${cpp_compiler} /c ${cppflags} /Fo${obj} /Tp${file} > ./cl_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi
    /bin/rm -f ./cl_exe_tmp
  else
    eval ${cpp_compiler} -x c++ -c ${cppflags} -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done
/bin/rm -f cc_tmp
fi

if [ -f cpp_tmp ] ; then
for file in $(cat cpp_tmp) ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.cpp::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ -f ${obj} ] ; then
    echo "inlib/mgr/build_compile : WARNING : ${obj} already exists."
  fi
  if [ ${build_visual} = "yes" ] ; then
    /bin/rm -f ./cl_exe_tmp
    eval ${cpp_compiler} /c ${cppflags} /Fo${obj} /Tp${file} > ./cl_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi
    /bin/rm -f ./cl_exe_tmp
  else
    eval ${cpp_compiler} -x c++ -c ${cppflags} -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done
/bin/rm -f cpp_tmp
fi

if [ -f cxx_tmp ] ; then
for file in $(cat cxx_tmp) ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.cxx::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ -f ${obj} ] ; then
    echo "inlib/mgr/build_compile : WARNING : ${obj} already exists."
  fi
  if [ ${build_visual} = "yes" ] ; then
    /bin/rm -f ./cl_exe_tmp
    eval ${cpp_compiler} /c ${cppflags} /Fo${obj} /Tp${file} > ./cl_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi
    /bin/rm -f ./cl_exe_tmp
  else
    eval ${cpp_compiler} -x c++ -c ${cppflags} -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done
/bin/rm -f cxx_tmp
fi

if [ -f mm_tmp ] ; then
for file in $(cat mm_tmp) ; do
  oname=`basename ${file}`
  oname=`echo ${oname} | sed -e 's:\.mm::g'`

  if [ "${build_diro}" = "yes" ] ; then
    dname=`dirname ${file}`
    diro=`basename ${dname}`
    /bin/mkdir -p "${build_path}/${diro}"
    obj="${build_path}/${diro}/${oname}.o"
  else
    obj="${build_path}/${oname}.o"
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_compile : do ${file} ..."
  fi
  if [ ${build_visual} = "yes" ] ; then
    echo "inlib/mgr/build_compile : visual can't compile Objective-C files."
    exit
  else
    eval ${cpp_compiler} -x objective-c++ -c ${cppflags} ${mmflags} -o ${obj} ${file}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi
  objs="${objs} ${obj}"
done
/bin/rm -f mm_tmp
fi
  
