
# to be sourced from another build script.

if [ "${plugin}" = "" ] ; then
  echo "inlib/mgr/build_plugin : variable plugin not defined."
  exit
fi

if [ "${objs}" = "" ] ; then
  echo "inlib/mgr/build_plugin : no objs."
else

  if [ ${build_visual} = "yes" ] ; then

    file_o="${build_path}/${plugin}.o"
    file_a="${build_path}/${plugin}.a"
    file_symbs="${build_path}/${plugin}.symbs"
    file_def="${build_path}/${plugin}.def"
    file_lib="${build_path}/${plugin}.lib"
    file_exp="${build_path}/${plugin}.exp"

    file_plugin="${build_path}/${plugin}.dll"

    lib.exe /nologo /out:${file_a} ${objs}

    # Build the obuild_windef.exe utility program :
    cl.exe /nologo /DWIN32 /MD /O2 /W3 /wd4996 /Feinlib_windef.exe ${inlib_mgr}/../apps/windef.c

    # Building the .def file :
    dumpbin.exe /symbols /out:${file_symbs} ${file_a}

    ./inlib_windef.exe ${plugin} < ${file_symbs} > ${file_def}

    # It produces a .exp file.
    lib.exe /nologo /out:${file_lib} /def:${file_def}

    # Building the dynamically loadable library (dll) :
    eval ${cpp_linker} /nologo /dll /out:${file_plugin} ${file_exp} ${file_a} ${libs}

    /bin/rm -f ${file_a} ${file_o} ${file_symbs} ${file_def} ${file_lib} ${file_exp} inlib_windef.exe
    /bin/rm -f windef.obj inlib_windef.exe.manifest

  else

    if [ ${build_sdk_android} = "yes" ] ; then
      pgflags="${pgflags} -Wl,-soname,${plugin}.so"
	
      pgflags="${pgflags} -shared"
      pgflags="${pgflags} --sysroot=${ndk_home}/platforms/android-8/arch-arm"
      pgflags="${pgflags} -Wl,--no-undefined -Wl,-z,noexecstack"

      # NOTE : it is very touchy concerning the order in the below :
      libs="${libs} ${ndk_home}/sources/cxx-stl/gnu-libstdc++/libs/armeabi/libgnustl_static.a"
      libs="${libs} ${ndk_home}/toolchains/arm-linux-androideabi-4.4.3/prebuilt/darwin-x86/bin/../lib/gcc/arm-linux-androideabi/4.4.3/libgcc.a"
  
      libs="${libs} -L${ndk_home}/platforms/android-8/arch-arm/usr/lib -lGLESv1_CM"
      libs="${libs} -ldl -llog -lz -lc -lm"

    elif [ `uname` = Darwin ] ; then
      pgflags="${pgflags} -bundle -twolevel_namespace"
      pgflags="${pgflags} -Wl,-headerpad_max_install_names -Wl,-headerpad,800"

    else
      pgflags="${pgflags} -shared"
    fi

    if [ ${build_m32} = yes ] ; then
      pgflags="${pgflags} -m32"
    fi

    /bin/mkdir -p ${build_path}

    file_plugin="${build_path}/${plugin}.${pgex}"
    /bin/rm -f ${file_plugin}
    if [ ${build_verbose} = yes ] ; then
      echo "inlib/mgr/build_plugin : link ${file_plugin} ..."
    fi

    eval ${cpp_linker} ${pgflags} -o ${file_plugin} ${objs} ${libs}

    if [ ${build_sdk_android} = "yes" ] ; then
      ${strip_cmd} ${file_plugin}
    fi

  fi

  if [ "${pyname}" != "" ] ; then
    to="${build_path}/${pyname}.${pgpy}"
    if [ ${build_verbose} = yes ] ; then
      echo "inlib/mgr/build_plugin : py : mv plugin to ${to} ..."
    fi
    if [ ${file_plugin} != ${to} ] ; then /bin/mv "${file_plugin}" "${to}"; fi
  fi

fi

