// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_app_batch_main_cpp
#define exlib_app_batch_main_cpp

#include <inlib/sg/viewer>
#include <inlib/dirmanip>
#include <inlib/sys/file>
#include <inlib/sg/base_camera>

#include "../../png"
#include "../../jpeg"

#include "../../set_img"
#include "../../sg/text_freetype"

//exlib_build_use inlib glutess freetype png jpeg zlib

//#define EXLIB_BATCH_MAIN_USE_GL2PS
//ex_lib_build_use gl2ps

#ifdef EXLIB_BATCH_MAIN_USE_GL2PS
#include "../../sg/render_gl2ps"
#else
#include <inlib/sg/render_zb>
#include <inlib/wps>
#endif

class pv_holder {
public:
  pv_holder(std::ostream& a_out)
  :m_out(a_out)
  ,m_ttf()
  {}
  virtual ~pv_holder(){}
protected:
  pv_holder(const pv_holder& a_from)
  :m_out(a_from.m_out)
  ,m_ttf(a_from.m_ttf)
  {}
  pv_holder& operator=(const pv_holder& a_from) {
    m_ttf = a_from.m_ttf;
    return *this;
  }
public:
  inlib::sg::gl_manager& gra_mgr() {return m_mgr_gra;}
  inlib::sg::base_freetype& ttf() {return m_ttf;}
protected:
  std::ostream& m_out;
  exlib::sg::text_freetype m_ttf;
#ifdef EXLIB_BATCH_MAIN_USE_GL2PS
  exlib::sg::manager_gl2ps m_mgr_gra;
#else
  inlib::sg::manager_zb m_mgr_gra;
#endif
};
typedef pv_holder pv_holder_t;

namespace app_batch {

template <class APP_MAIN>
class main : protected pv_holder_t, public APP_MAIN { //IMPORTANT : pv_holder must come first.
  typedef pv_holder_t pvh;
  typedef APP_MAIN parent;
public:
  virtual void render() {
    this->check_gui_cursor();
    if(!parent::m_ww||!parent::m_wh) return;

    if(m_out_file.empty()) {
      parent::m_out << "app_batch::main::render() :"
                    << " no output file given."
                    << std::endl;
      return;
    }

#ifdef EXLIB_BATCH_MAIN_USE_GL2PS
    pvh::m_mgr_gra.begin_render(parent::m_ww,parent::m_wh,
                                parent::m_clear_color.r(),
                                parent::m_clear_color.g(),
                                parent::m_clear_color.b(),
                                parent::m_clear_color.a());

    exlib::sg::render_gl2ps action(parent::m_out,parent::m_ww,parent::m_wh);

   {const inlib::colorf& bg = parent::m_clear_color;
    action.set_background(bg[0],bg[1],bg[2]);} //must be before the below open().

    //parent::m_out << "debug : app_batch::main::render() : file " << inlib::sout(m_out_file) << "." << std::endl;

    if(!action.open(m_out_file)) {
      parent::m_out << "app_batch::main::render() :"
                    << " can't open " << inlib::sout(m_out_file) << "."
                    << std::endl;
      return;
    }

    action.state().m_use_gsto = parent::m_use_gsto;

    parent::m_sg.render(action);
    if(!action.end()) {
      parent::m_out << "app_batch::main::render() :"
                    << " bad exlib::X11::render::end() failed."
                    << std::endl;
    }

    action.close();

    pvh::m_mgr_gra.end_render();
#else
    inlib::sg::render_zb action(this->zb_manager(),parent::m_out,parent::m_ww,parent::m_wh);

    const inlib::colorf& bg = parent::m_clear_color;
    action.zbuffer().clear_color_buffer(0);
    action.add_color(bg.r(),bg.g(),bg.b());
    action.zbuffer().clear_depth_buffer();

    parent::m_sg.render(action);

    inlib::wps wps(parent::m_out);
    if(!wps.open_file(m_out_file)) {
      parent::m_out << "app_batch::main::render() :"
                    << " can't open " << m_out_file << std::endl;
      return;
    }
    wps.PS_BEGIN_PAGE();
    wps.PS_PAGE_SCALE(float(parent::m_ww),float(parent::m_wh));
    // put zbuffer in m_out_file. The get_rgb function is the bridge
    // between render_zb and wps.
    wps.PS_IMAGE(parent::m_ww,parent::m_wh,inlib::wps::rgb_4,inlib::sg::render_zb::get_rgb,&action);
    wps.PS_END_PAGE();
    wps.close_file();

#endif
    //this->after_render();

  }
public:
  virtual bool set_img_from_file(std::ostream& a_out,
                                 const std::string& a_res_dir,
                                 const std::string& a_file,
                                 inlib::img_byte& a_img) {
    return exlib::set_img_from_file(a_out,a_res_dir,a_file,a_img);
  }
public: //exlib::sg::viewer
  //virtual bool set_cursor_shape(inlib::sg::cursor_shape a_shape) {}
public:
  virtual void win_render() {
    m_to_render = true; //do not do render() here to avoid a too much flashing window.
  }
public:
  main(std::ostream& a_out
       ,const std::string& a_data_dir
       ,const std::string& a_res_dir
       ,const std::string& a_out_dir
       ,const std::string& a_tmp_dir
       ,bool a_verbose
       )
  :pv_holder_t(a_out)
  ,parent(a_out,
          pv_holder_t::gra_mgr(),pv_holder_t::ttf(),
          a_data_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,0)
  ,m_to_render(false)
  ,m_out_file()
  {
    //m_out_file = a_out_dir+inlib::sep()+"out.ps";
    parent::m_params.m_image_buttons = false;
    this->push_home(); //NOTE : it can't call a potential push_home() done on an inheriting class.
  }
  virtual ~main(){}
protected:
  main(const main&){}
  main& operator=(const main&){return *this;}
public:
  void set_out_file(const std::string& a_file) {m_out_file = a_file;}
  void do_paint() {
    if(m_to_render) {
      //::printf("debug : app_batch::main::do_paint : render()\n");
      render();
      m_to_render = false;
    }
  }
  const std::string& out_file() const {return m_out_file;}
protected:
  bool m_to_render;
  std::string m_out_file;
};

}

#ifdef INLIB_MEM
#include <inlib/mem>
#endif

#include <inlib/args>
#include <inlib/sargs>

#include <iostream>
#include <cstdlib>

#include <inlib/app>

#include <inlib/sg/list>

template <class APP_CONTEXT,class APP_MAIN>
int exlib_main(const std::string& a_app_name,int argc,char** argv,bool a_land = true) {
  //NOTE : we enforce landscape by default for desktop oapps.
  bool verbose = false;

#ifdef INLIB_MEM
  inlib::mem::set_check_by_class(true);{
#endif

  //////////////////////////////////////////////////////////////////
  /// args /////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////
  std::string exe_path; //for res_dir
  if(!inlib::program_path(argv[0],exe_path)) {
    std::cout << "exlib_main : can't get exe path." << std::endl;
    return EXIT_FAILURE;
  }

  inlib::args args(argc,argv);
  if(a_land) args.add("-land","");

  verbose = args.is_arg("-verbose");

  if(verbose) args.dump(std::cout,"main arguments :");

  unsigned int ww,wh;
  inlib::window_size_from_args(args,ww,wh);

  std::string DOCUMENT;
  args.files_at_end(); //take care of the upper -land.
  if(!args.file(DOCUMENT)) args.find("-document",DOCUMENT);  
  if(verbose) {
    std::cout << "exlib_main :"
              << " document is " << inlib::sout(DOCUMENT) << "."
              << std::endl;
  }

  std::string orders;
  args.find(inlib::s_arg_orders(),orders,"batch");

  //////////////////////////////////////////////////////////////////
  /// dirs : ///////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////

  std::string home_dir;
  inlib::dir::home(home_dir);
  if(home_dir.empty()) {
    std::cout << "exlib_main : can't get home directory." << std::endl;
    return EXIT_FAILURE;
  }  
  std::string doc_app_dir = "Documents";
  doc_app_dir += inlib::sep();
  doc_app_dir += a_app_name;

  std::string doc_dir = home_dir;
  doc_dir += inlib::sep();
  doc_dir += doc_app_dir;

  std::string data_dir = doc_dir;
  std::string res_dir; //application data.
  if(exe_path.size()) {
    res_dir = exe_path+inlib::sep()+".."+inlib::sep()+"res";
  }
  std::string out_dir = doc_dir;

/* WIN32 : does not work. But in fact out_dir is not yet used in batch apps.
  if(!inlib::check_dir(std::cout,out_dir)) {
    std::cout << "can't create out_dir " << inlib::sout(out_dir) << std::endl;
    return EXIT_FAILURE;
  }
*/

  std::string tmp_dir;
  if(!inlib::tmpdir(tmp_dir)) {
    std::cout << "exlib_main : inlib::tmpdir() failed." << std::endl;
    return EXIT_FAILURE;
  }

  if(verbose) {
    std::cout << "exe_path : " << inlib::sout(exe_path) << std::endl;
    std::cout << "home_dir : " << inlib::sout(home_dir) << std::endl;
    std::cout << "data_dir : " << inlib::sout(data_dir) << std::endl;
    std::cout << "res_dir : " << inlib::sout(res_dir) << std::endl;
    std::cout << "out_dir : " << inlib::sout(out_dir) << std::endl;
    std::cout << "tmp_dir : " << inlib::sout(tmp_dir) << std::endl;
  }

  //////////////////////////////////////////////////////////////////
  /// app_context : ////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////

 {std::string app_exe;
  if(!args.prog_name(app_exe)) {
    std::cout << "no app exe." << std::endl;
  } else {
    std::string _res_dir;
    if(!inlib::app_res_dir(app_exe,_res_dir)) {
      std::cout << "can't get res_dir." << std::endl;
    } else {
      APP_CONTEXT app_context(_res_dir);
    }
  }}

  //////////////////////////////////////////////////////////////////
  /// create main and steer : //////////////////////////////////////
  //////////////////////////////////////////////////////////////////

 {app_batch::main<APP_MAIN> _main(std::cout,data_dir,res_dir,out_dir,tmp_dir,verbose);

  if(DOCUMENT.size()) {
    _main.create_gui();
    bool done;
    _main.opener().open(DOCUMENT,inlib::file::s_format_guessed(),inlib::args(),done);
  }

  if(verbose) {
    std::cout << "out_file : " << inlib::sout(_main.out_file()) << std::endl;
  }

  _main.set_size(ww,wh);
  _main.meta_zone_had_been_shown();

  //_main.do_works();

 {std::string _path = orders;
  if(!inlib::file::exists(_path)) {
// {std::string _path;
//  if(!_main.find_file("batch",_path)){
    std::cout << _path << " order file not found." << std::endl;
  } else {
    std::vector<std::string> lines;
    if(!inlib::file::read(_path,lines)) {
      std::cout << "can't read " << _path << "." << std::endl;
    } else {
      inlib_vforcit(std::string,lines,it) {
        const std::string& line = *it;
        if(line.empty()) continue;
        if(line.substr(0,1)=="#") continue;
        if(verbose) std::cout << "exec line : " << inlib::sout(line) << std::endl;

        std::vector<std::string> words;
        inlib::words(line," ",false,words);
        const std::string& cmd = words[0];

        if(cmd=="do_paint") {
          if(words.size()==2) {
            //m_out_file = parent::out_dir()+inlib::sep()+a_file;
            _main.set_out_file(words[1]);
          } else {
            _main.set_out_file("out.ps");
          }

          _main.win_render();
          _main.do_paint();

        } else if(cmd=="adapt_camera_to_scene") {
          _main.adapt_camera_to_scene();
        } else if(cmd=="swap_camera_kind") {
          _main.swap_camera_kind();
        } else if(cmd=="camera_rotate_around_y_half_pi") {
          inlib::sg::base_camera* _cam = _main.scene_camera();
          if(_cam) _cam->rotate_around_y_at_focal(inlib::fhalf_pi());
        } else if(cmd=="camera_rotate_around_y_minus_half_pi") {
          inlib::sg::base_camera* _cam = _main.scene_camera();
          if(_cam) _cam->rotate_around_y_at_focal(-inlib::fhalf_pi());

        //} else if(cmd=="examiner") {
        //  _main.set_plane_viewer(false);
        //  _main.set_camera_menu_labels();

        } else if(cmd=="main_home") {
          _main.push_home();
        } else if(cmd=="main_back"){
          _main.push_back_item();
        } else if(!_main.find_exec_menu_item(line)) {
          std::cout << "menu item " << line << " not found." << std::endl;
          break;
        }
      }
    }
  }}

  }

#ifdef INLIB_MEM
  }inlib::mem::balance(std::cout);
#endif

  if(verbose) {
    std::cout << "exlib_main : exit..." << std::endl;
  }

  return EXIT_SUCCESS;
}

//exlib_build_use inlib expat
//exlib_build_use exlib png jpeg zlib glutess freetype

#endif
