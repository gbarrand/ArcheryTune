# to be sourced in <app>/mgr/build scripts.

#////////////////////////////////////
#////////////////////////////////////
#////////////////////////////////////

if [ "${app_src}" = "" ] ; then
  echo "inlib/mgr/build_app : variable app_src not defined."
  exit
fi

if [ "${app_exe}" = "" ] ; then
  echo "inlib/mgr/build_app : variable app_exe not defined."
  exit
fi

if [ ${build_verbose} = yes ] ; then
  echo "build path is ${build_path}"
fi

/bin/mkdir -p ${build_path}

if [ ${build_clean} = "yes" ] ; then
  /bin/rm -R -f ${build_path}
  exit
fi

. ${inlib_mgr}/build_compile
	  
if [ "${build_app}" = "no" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_app : do not build app."
  fi
  file_exe=${build_path}/${app_exe}
else #build_app

suffix=`echo ${app_src} | sed 's:.*\.::'`
if [ "${suffix}" = "" ] ; then suffix=none;fi

obj="${build_path}/main.o"

link_it=no

old_build_do_compile=${build_do_compile}
if [ ${build_compile_main_only} = "yes" ] ; then build_do_compile=yes;fi

if [ "${suffix}" = "c" ] ; then

  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_app : compile ${app_src} ..."
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    /bin/rm -f ./cl_exe_tmp
    eval ${cc_compiler} /c ${ccflags} /Fo${obj} ${app_src} > ./cl_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi
    /bin/rm -f ./cl_exe_tmp
  else
    eval ${cc_compiler} -c ${ccflags} -o ${obj} ${app_src}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi

  objs="${obj} ${objs}"
  link_it=yes

elif [ "${suffix}" = "cpp" ] ; then

  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_app : compile ${app_src} ..."
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    /bin/rm -f ./cl_exe_tmp
    eval ${cpp_compiler} /c ${cppflags} /Fo${obj} ${app_src} > ./cl_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi
    /bin/rm -f ./cl_exe_tmp
  else
    eval ${cpp_compiler} -c ${cppflags} -o ${obj} ${app_src}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi

  objs="${obj} ${objs}"
  link_it=yes

elif [ "${suffix}" = "cc" ] ; then

  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_app : compile ${app_src} ..."
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    /bin/rm -f ./cl_exe_tmp
    eval ${cpp_compiler} /c ${cppflags} /Fo${obj} ${app_src} > ./cl_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi
    /bin/rm -f ./cl_exe_tmp
  else
    eval ${cpp_compiler} -c ${cppflags} -o ${obj} ${app_src}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi

  objs="${obj} ${objs}"
  link_it=yes

elif [ "${suffix}" = "cxx" ] ; then

  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_app : compile ${app_src} ..."
  fi

  if [ ${build_do_compile} = "yes" ] ; then
  if [ ${build_visual} = "yes" ] ; then
    /bin/rm -f ./cl_exe_tmp
    eval ${cpp_compiler} /c ${cppflags} /Fo${obj} ${app_src} > ./cl_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./cl_exe_tmp;/bin/rm -f ./cl_exe_tmp;exit ${use_status}; fi
    /bin/rm -f ./cl_exe_tmp
  else
    eval ${cpp_compiler} -c ${cppflags} -o ${obj} ${app_src}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
  fi

  objs="${obj} ${objs}"
  link_it=yes

elif [ "${suffix}" = "m" ] ; then

  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_app : compile ${app_src} ..."
  fi

  if [ ${build_do_compile} = "yes" ] ; then
    eval ${cc_compiler} -x objective-c -c ${ccflags} ${mflags} -o ${obj} ${app_src}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi

  objs="${obj} ${objs}"
  link_it=yes

elif [ "${suffix}" = "mm" ] ; then

  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_app : compile ${app_src} ..."
  fi

  if [ ${build_do_compile} = "yes" ] ; then
    eval ${cpp_compiler} -x objective-c++ -c ${cppflags} ${mmflags} -o ${obj} ${app_src}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi

  objs="${obj} ${objs}"
  link_it=yes

elif [ "${suffix}" = "java" ] ; then

  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_app : treat ${app_src} ..."
  fi

  plugin=lib${app}
  if [ ${build_plugin} = "yes" ] ; then . ${inlib_mgr}/build_plugin; fi

  if [ ${build_sdk_android} = "yes" ] ; then
    if [ ${build_verbose} = yes ] ; then
      echo "inlib/mgr/build_app : android java part ..."
    fi

    echo "inlib/mgr/build_app : android : java part not yet ready."
    echo "  java and .apk packing still done by ant."
#    exit

    ${inlib_mgr}/check_app ant 'ant program not found. Arrange to have it in your PATH.'
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi

    save_dir=`pwd`
    cd ../Android
    /bin/mv ./ant.properties tmp_props
    /bin/cp ../mgr/ant.properties .

    if [ ${build_debug} = "yes" ] ; then
      ant debug
    else
      ant -silent release
    fi
    /bin/mv tmp_props ./ant.properties
    cd ${save_dir}

  fi

  link_it=no

elif [ "${suffix}" = "ecpp" ] ; then

. ${inlib_mgr}/build_ecpp

else
  echo "inlib/mgr/build_app : suffix ${suffix} not treated"        
  exit
fi

if [ ${build_compile_main_only} = "yes" ] ; then
  if [ ${build_verbose} = yes ] ; then
    echo "do not link"
  fi
  link_it=no;
fi

if [ "${link_it}" = "yes" ] ; then
if [ ${build_sdk_android} = "yes" ] ; then
  echo "inlib/mgr/build_app : sdk_android : can't build a non java app."
else

  file_exe=${build_path}/${app_exe}
  if [ ${build_verbose} = yes ] ; then
    echo "inlib/mgr/build_app : link ${file_exe} ..."
  fi
  if [ ${build_visual} = "yes" ] ; then
    file_exe="${file_exe}.exe"
    /bin/rm -f ./link_exe_tmp
    eval ${cpp_linker} ${linker_flags} /out:${file_exe} ${objs} ${libs} > ./link_exe_tmp
    use_status=$?;if [ ${use_status} != 0 ] ; then cat ./link_exe_tmp;/bin/rm -f ./link_exe_tmp;exit ${use_status}; fi
    file_exe_manifest="${file_exe}.manifest"
  else
    eval ${cpp_linker} ${linker_flags} -o ${file_exe} ${objs} ${libs}
    use_status=$?;if [ ${use_status} != 0 ] ; then exit ${use_status};fi
  fi
    
  #/bin/rm -f ${objs}
    
  if [ `uname` = Darwin ] ; then
    if [ ${build_debug} = "yes" ] ; then
      if [ ! -f ${file_exe} ] ; then
        echo "inlib/mgr/build_app : exe not built : can't build .dSYM"
      else
        if [ ${build_verbose} = yes ] ; then
          echo "inlib/mgr/build_app : build ${file_exe}.dSYM ..."
        fi
        /bin/rm -R -f ${file_exe}.dSYM
        dsymutil --out=${file_exe}.dSYM ${file_exe}
      fi
    fi
  fi 
    
fi # sdk_android    
fi # link_it
fi # build_app

build_do_compile=${old_build_do_compile}
