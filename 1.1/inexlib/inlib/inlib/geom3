// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_geom3
#define inlib_geom3

#include "vec3"

namespace inlib {

// Parametric description:
//  l(t) = pos + t * dir

template <class T>
class line {
public:
  line(){}
  line(const vec3<T>& a_p0,const vec3<T>& a_p1) {
    // Construct a line from two points lying on the line.  If you
    // want to construct a line from a position and a direction, use
    // line(p, p + d).
    // line is directed from p0 to p1.
    m_pos = a_p0;
    //m_dir = a_p1-a_p0;
    m_dir = a_p0;
    m_dir.multiply(-1);
    m_dir.add(a_p1);
    m_dir.normalize();
  }
  line(const T& a_0_x,const T& a_0_y,const T& a_0_z,
       const T& a_1_x,const T& a_1_y,const T& a_1_z) {
    m_pos.set_value(a_0_x,a_0_y,a_0_z);
    m_dir.set_value(a_1_x-a_0_x,a_1_y-a_0_y,a_1_z-a_0_z);
    m_dir.normalize();
  }
  virtual ~line() {}
public:
  line(const line& a_from)
  :m_pos(a_from.m_pos)
  ,m_dir(a_from.m_dir)
  {}
  line& operator=(const line& a_from) {
    m_pos = a_from.m_pos;
    m_dir = a_from.m_dir;
    return *this;
  }
public:
  void set_value(const vec3<T>& a_p0,const vec3<T>& a_p1) {
    m_pos = a_p0;
    m_dir = a_p0;
    m_dir.multiply(-1);
    m_dir.add(a_p1);
    m_dir.normalize();
  }
  void set_value(const T& a_0_x,const T& a_0_y,const T& a_0_z,
                 const T& a_1_x,const T& a_1_y,const T& a_1_z) {
    m_pos.set_value(a_0_x,a_0_y,a_0_z);
    m_dir.set_value(a_1_x-a_0_x,a_1_y-a_0_y,a_1_z-a_0_z);
    m_dir.normalize();
  }

  const vec3<T>& position() const {return m_pos;}
  const vec3<T>& direction() const {return m_dir;}

/* not tested :
  vec3<T> closest_point(const vec3<T>& a_point) const {
    //from coin3d/SbLine.cpp.

    //
    //           a_out
    // m_pos x-----x-------> m_dir
    //        \    |
    //         \   |
    //          \  |
    //           \ |
    //            \|
    //             x a_point

    return m_pos + m_dir * ((a_point - m_pos).dot(m_dir));
  }


  bool closest_points(const line<T>& a_line,
                      vec3<T>& a_on_this,vec3<T>& a_on_line) const {
    //from coin3d/SbLine.cpp.

    //WARNING : if ret false, a_on_this, a_on_line not set.

    // Check if the lines are parallel.
    // FIXME: should probably use equals() here.
    if(a_line.m_dir == m_dir) return false;
    if(a_line.m_dir == T(-1)*m_dir) return false;

    vec3<T> P0 = m_pos;
    vec3<T> P1 = a_line.m_pos;
    vec3<T> D0 = m_dir;
    vec3<T> D1 = a_line.m_dir;
    vec3<T> D0N = D0;
  
    T c[3], d[3];
  
    for(unsigned int i=0;i<3;i++) {
      d[i] =
        D1[i] - D0N[i]*(D0[0]*D1[0] + D0[1]*D1[1] + D0[2]*D1[2]);
      c[i] =
        P1[i] - P0[i] + D0N[i]*(D0[0]*P0[0] + D0[1]*P0[1] + D0[2]*P0[2]);
    }
  
    T den = d[0]*d[0]+d[1]*d[1]+d[2]*d[2];
    if(den==T()) return false;

    T t = -(c[0]*d[0]+c[1]*d[1]+c[2]*d[2]) / den;
  
    a_on_line = a_line.m_pos + a_line.m_dir * t;
    a_on_this = closest_point(a_on_line);
    return true;
  }
  
  bool intersect(const line<T>& a_line,vec3<T>& a_out,const T& a_prec) const {
    vec3<T> p,q;
    if(!closest_points(a_line,p,q)) return false;
    if((q-p).length()>a_prec) return false;
    a_out = p;
    return true;
  }
*/
  
protected:
  vec3<T> m_pos;
  vec3<T> m_dir; //normalized.
};

template <class T>
class plane {
public:
  plane(){}

  plane(const vec3<T>& a_p0,const vec3<T>& a_p1,const vec3<T>& a_p2) {
    // Construct a plane given 3 points.
    // Orientation is computed by taking (p1 - p0) x (p2 - p0) and
    // pointing the normal in that direction.
  
    vec3<T> P = a_p1;
    P.subtract(a_p0);
    vec3<T> P2 = a_p2;
    P2.subtract(a_p0);
    m_normal = P.cross(P2);
    if(!m_normal.normalize()) {} //throw
    m_distance = 
      m_normal.v0() * a_p0.v0() + 
      m_normal.v1() * a_p0.v1() + 
      m_normal.v2() * a_p0.v2();
  }

  plane(const vec3<T>& a_normal,const T& a_distance){
    set(a_normal,a_distance);
  }

  plane(const vec3<T>& a_normal,const vec3<T>& a_point){
    set(a_normal,a_point);
  }

  virtual ~plane() {}
public:
  plane(const plane& a_from)
  :m_normal(a_from.m_normal)
  ,m_distance(a_from.m_distance)
  {}
  plane& operator=(const plane& a_from) {
    m_normal = a_from.m_normal;
    m_distance = a_from.m_distance;
    return *this;
  }

public:
  bool is_valid() const {return m_normal.length()?true:false;}

  void offset(const T& a_distance){
    // Offset a plane by a given distance.
    m_distance += a_distance;
  }
  
  bool intersect(const line<T>& a_line,vec3<T>& a_intersection) const {
    // Intersect line and plane, returning true if there is an intersection
    // false if line is parallel to plane
    const vec3<T>& pos = a_line.position();
    const vec3<T>& dir = a_line.direction();
    T d = m_normal.dot(dir);
    if(d==T()) return false;
    T t = (m_distance - m_normal.dot(pos))/d;
    a_intersection = dir;
    a_intersection.multiply(t);
    a_intersection.add(pos);
    //a_intersection = pos + t * dir;
    return true;
  }
  
  bool is_in_half_space(const vec3<T>& a_point) const {
    // Returns true if the given point is within the half-space
    // defined by the plane
    //vec pos = m_normal * m_distance;
    vec3<T> pos = m_normal;
    pos.multiply(-m_distance);
    pos.add(a_point);
    return (m_normal.dot(pos) >= T() ? true : false);
  }
  
  const vec3<T>& normal() const {return m_normal;}

  T distance_from_origin() const {return m_distance;}
  
  T distance(const vec3<T>& a_point) const {
    // Return the distance from point to plane. Positive distance means
    // the point is in the plane's half space.
    return a_point.dot(m_normal) - m_distance;
  }

  void set(const vec3<T>& a_normal,const T& a_distance){
    m_normal = a_normal;
    if(!m_normal.normalize()) {} //throw
    m_distance = a_distance;
  }

  void set(const vec3<T>& a_normal,const vec3<T>& a_point){
    // Construct a plane given normal and a point to pass through
    // Orientation is given by the normal vector n.
    m_normal = a_normal;
    if(!m_normal.normalize()) {} //throw
    m_distance = 
      m_normal.v0() * a_point.v0() + 
      m_normal.v1() * a_point.v1() + 
      m_normal.v2() * a_point.v2();
  }

public: //iv2sg
  const vec3<T>& getNormal() const {return m_normal;}
protected:
  // equation of the plane is :
  //  norm[0]*x+norm[1]*y+norm[2]*z = dist

  vec3<T> m_normal; //normalized.
  T m_distance;
};


template <class T>
class cubic {
public:
  cubic(const vec3<T>& a_p0,const vec3<T>& a_v0,
        const vec3<T>& a_p1,const vec3<T>& a_v1) {
    // Construct a cubic given 2 points and their tangents.
    initialize(a_p0.x(),a_p0.y(),a_p0.z(),
               a_v0.x(),a_v0.y(),a_v0.z(),
               a_p1.x(),a_p1.y(),a_p1.z(),
               a_v1.x(),a_v1.y(),a_v1.z());
  }
  cubic(const T& a_p0_x,const T& a_p0_y,const T& a_p0_z,
        const T& a_v0_x,const T& a_v0_y,const T& a_v0_z,
        const T& a_p1_x,const T& a_p1_y,const T& a_p1_z,
        const T& a_v1_x,const T& a_v1_y,const T& a_v1_z){
    initialize(a_p0_x,a_p0_y,a_p0_z,
               a_v0_x,a_v0_y,a_v0_z,
               a_p1_x,a_p1_y,a_p1_z,
               a_v1_x,a_v1_y,a_v1_z);
  }

  virtual ~cubic() {}
public:
  cubic(const cubic& a_from)
  :m_a(a_from.m_a)
  ,m_b(a_from.m_b)
  ,m_c(a_from.m_c)
  ,m_d(a_from.m_d)
  {}
  cubic& operator=(const cubic& a_from) {
    m_a = a_from.m_a;
    m_b = a_from.m_b;
    m_c = a_from.m_c;
    m_d = a_from.m_d;
    return *this;
  }
public:
  void get_point(unsigned int a_index,unsigned int a_num,vec3<T>& a_p){
    //a_index = 0        is a_p0
    //a_index = a_num-1  is a_p1
    T s = T(a_index)/T(a_num-1);
    T s2 = s*s;
    T s3 = s2*s;
    a_p = m_a*s3 + m_b*s2 + m_c*s + m_d;
  }
  void get_point(unsigned int a_index,unsigned int a_num,
                 T& a_x,T& a_y,T& a_z){
    //a_index = 0        is a_p0
    //a_index = a_num-1  is a_p1
    T s = T(a_index)/T(a_num-1);
    T s2 = s*s;
    T s3 = s2*s;
    a_x = m_a.x()*s3 + m_b.x()*s2 + m_c.x()*s + m_d.x();
    a_y = m_a.y()*s3 + m_b.y()*s2 + m_c.y()*s + m_d.y();
    a_z = m_a.z()*s3 + m_b.z()*s2 + m_c.z()*s + m_d.z();
  }
protected:
  void initialize(const T& a_p0_x,const T& a_p0_y,const T& a_p0_z,
                  const T& a_v0_x,const T& a_v0_y,const T& a_v0_z,
                  const T& a_p1_x,const T& a_p1_y,const T& a_p1_z,
                  const T& a_v1_x,const T& a_v1_y,const T& a_v1_z){
    // Construct a cubic given 2 points and their tangents.

    //  f(s) = a s**3 + b s**2 + c s + d
    // f'(s) = 3 a s**2 + 2 b s + c

    //  f(0) = d = p0 
    // f'(0) = c = v0 

    //  f(1) =   a +   b + v0 + p0 = p1
    // f'(1) = 3 a + 2 b + v0 = v1

    //  f(1) =   a +   b = p1 - v0 - p0
    // f'(1) = 3 a + 2 b = v1 - v0

    // b = 3(p1-v0-p0)-(v1-v0)
    // a = p1-v0-p0 - b = p1-v0-p0-3(p1-v0-p0)+(v1-v0)
    // a = -2p1 + v0 + 2p0 + v1

    T a_x = -2*a_p1_x + a_v0_x + 2*a_p0_x + a_v1_x;
    T a_y = -2*a_p1_y + a_v0_y + 2*a_p0_y + a_v1_y;
    T a_z = -2*a_p1_z + a_v0_z + 2*a_p0_z + a_v1_z;
    m_a.set_value(a_x,a_y,a_z); 

    T b_x = 3*(a_p1_x - a_v0_x - a_p0_x) - (a_v1_x - a_v0_x);
    T b_y = 3*(a_p1_y - a_v0_y - a_p0_y) - (a_v1_y - a_v0_y);
    T b_z = 3*(a_p1_z - a_v0_z - a_p0_z) - (a_v1_z - a_v0_z);
    m_b.set_value(b_x,b_y,b_z);

    m_c.set_value(a_v0_x,a_v0_y,a_v0_z);
    m_d.set_value(a_p0_x,a_p0_y,a_p0_z);

  }

protected:
  vec3<T> m_a;
  vec3<T> m_b;
  vec3<T> m_c;
  vec3<T> m_d;
};

}

#include <vector>

namespace inlib {

// not tested yet.
template <class T>
class clip {
public:
  clip():m_cur(0){}
  virtual ~clip() {}
private:
  clip(const clip&):m_cur(0){}
  clip& operator=(const clip&){return *this;}
public:
  void reset() {
    m_data[0].clear();
    m_data[1].clear();
    m_cur = 0;
  }
  void add(const vec3<T>& a_point) {
    m_data[m_cur].push_back(a_point);
  }

  void execute(const plane<T>& plane) {
    //Clip polygon against plane. This might change the number of
    //vertices in the polygon.

    unsigned int n = m_data[m_cur].size();
    if (n == 0) return;

    // create a loop :
    vec3<T> dummy = m_data[m_cur][0];
    m_data[m_cur].push_back(dummy);

    const vec3<T>& planeN = plane.normal();

    for(unsigned int i = 0; i < n; i++) {
      vec3<T> v0 = m_data[m_cur][i];
      vec3<T> v1 = m_data[m_cur][i+1];
  
      T d0 = plane.distance(v0);
      T d1 = plane.distance(v1);
  
      if (d0 >= 0.0f && d1 < 0.0f) { // exit plane
        vec3<T> dir = v1-v0;
        // we know that v0 != v1 since we got here
        dir.normalize();
        T dot = dir.dot(planeN);
        vec3<T> newvertex = v0 - dir * (d0/dot);
        out_point(newvertex);
      } else if (d0 < 0.0f && d1 >= 0.0f) { // enter plane
        vec3<T> dir = v1-v0;
        // we know that v0 != v1 since we got here
        dir.normalize();
        T dot = dir.dot(planeN);
        vec3<T> newvertex = v0 - dir * (d0/dot);
        out_point(newvertex);
        out_point(v1);
      } else if (d0 >= 0.0f && d1 >= 0.0f) { // in plane
        out_point(v1);
      }
    }
    m_data[m_cur].clear();
    m_cur ^= 1;
  }

  const std::vector< vec3<T> >& result() const {
    return m_data[m_cur];
  }

protected:
  void out_point(const vec3<T>& a_p) {
    m_data[m_cur ^ 1].push_back(a_p);
  }
  
protected:
  std::vector< vec3<T> > m_data[2];
  unsigned int m_cur;
};

template <class T>
inline vec3<T> direction(const vec3<T>& a_p0,
                         const vec3<T>& a_p1,
                         const vec3<T>& a_p2) {
  // Orientation is computed by taking (p1 - p0) x (p2 - p0)
  vec3<T> P = a_p1;
  P.subtract(a_p0);
  vec3<T> P2 = a_p2;
  P2.subtract(a_p0);
  return P.cross(P2);
}

template <class T>
inline vec3<T> direction(const T& a_0_x,const T& a_0_y,const T& a_0_z,
                         const T& a_1_x,const T& a_1_y,const T& a_1_z,
                         const T& a_2_x,const T& a_2_y,const T& a_2_z) {
  return direction(vec3<T>(a_0_x,a_0_y,a_0_z),
                   vec3<T>(a_1_x,a_1_y,a_1_z),
                   vec3<T>(a_2_x,a_2_y,a_2_z));
}

}

#endif
