// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_sg_style_color
#define inlib_sg_style_color

#include "../colorf"

#ifdef INLIB_MEM
#include "../mem"
#include "../S_STRING"
#endif

namespace inlib {
namespace sg {

class style_color : public std::pair<std::string,colorf> {
#ifdef INLIB_MEM
  INLIB_SCLASS(inlib::sg::style_color)
#endif
public:
  style_color()
  :std::pair<std::string,colorf>("",colorf()){
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  style_color(const std::string& a_name,const colorf& a_color)
  :std::pair<std::string,colorf>(a_name,a_color)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  style_color(const std::string& a_name,float a_r,float a_g,float a_b)
  :std::pair<std::string,colorf>(a_name,colorf(a_r,a_g,a_b))
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  virtual ~style_color(){
#ifdef INLIB_MEM
    mem::decrement(s_class().c_str());
#endif
  }
public:
  style_color(const style_color& a_from)
  :std::pair<std::string,colorf>(a_from.first,a_from.second)
  {
#ifdef INLIB_MEM
    mem::increment(s_class().c_str());
#endif
  }
  style_color& operator=(const style_color& a_from){
    first = a_from.first;
    second = a_from.second;
    return *this;
  }
};

}}

#endif



