// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file ArcheryTune.license for terms.

#ifndef ArcheryTune_ArcheryTune_main
#define ArcheryTune_ArcheryTune_main

#include <string>

namespace ArcheryTune {

class context {
public:
  context(const std::string&) {}
  virtual ~context() {}
protected:
  context(const context&){}
  context& operator=(const context&){return *this;}
};

}

#include "version"

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

#include "gui"
#include "dac"

#include <exlib/app/main>
#include <exlib/cbk/out>
#ifdef WALL_DATA_CLIENT
#include <exlib/cbk/wall>
#endif //WALL_DATA_CLIENT

namespace ArcheryTune {

inline inlib::sg::bcbk::return_action action_export_png(inlib::sg::gui_viewer& a_gv) {
  inlib::sg::list* list = new inlib::sg::list(a_gv.ttf());
  a_gv.set_colors(*list);
  inlib::sg::add_label_item(a_gv,*list,"out.png",exlib::out::action_png);
  a_gv.push_list(list);
  return inlib::sg::bcbk::return_to_render;
}

class main : public exlib::app::main,public dac {
  typedef exlib::app::main parent;
public:
  INLIB_SCLASS(ArcheryTune::main)
  virtual void* cast(const std::string& a_class) const {
    if(void* p = inlib::cmp_cast<main>(this,a_class)) return p;
    if(void* p = inlib::cmp_cast<dac>(this,a_class)) return p;
    return parent::cast(a_class);
  }
protected:
  virtual inlib::sg::node* create_main_menu() {
    //m_out << "ArcheryTune::main::create_home_menu : " << std::endl;

    inlib::sg::list* list = new inlib::sg::list(ttf());
    set_colors(*list);

    list->text_hjust = inlib::sg::center; //if layout_text_under_image

    inlib::sg::add_image_item(*this,*list,"Scope","scope.jpg",action_main_scope);
    inlib::sg::add_image_item(*this,*list,"F.O.C","white.jpg",action_main_FOC);
    inlib::sg::add_image_item(*this,*list,"Sight Charts","white.jpg",action_main_sight_charts);

#ifdef WALL_DATA_CLIENT
    if(m_xml_wall.walls().size()) {
      inlib::sg::add_image_item(*this,*list,"Wall","connect_to_wall.jpg",exlib::wall::action_main);
    }
#endif //WALL_DATA_CLIENT

    if(has_mail_panel()) {
      inlib::sg::add_image_item(*this,*list,"Mail...","document_export.jpg",exlib::out::action_mail_png);
    } else {
      //inlib::sg::add_image_item(*this,*list,"export","document_export.jpg",exlib::out::action_main);
      inlib::sg::add_image_item(*this,*list,inlib::sg::s_export(),"document_export.jpg",action_export_png);
    }

    //list_add(*list,"utils","tools.jpg",new exlib::cbk::utils(*this));

    inlib::sg::add_image_item(*this,*list,"About","icon.jpg",inlib::sg::action_about,&m_about);

    if(!inlib::device::stop_app_button()){
      inlib::sg::add_image_item(*this,*list,"Exit","application_exit.jpg",inlib::sg::action_exit);
    }

    return list;
  }

  virtual void set_list_layout(inlib::sg::list& a_node,
                               float a_wcw,float a_wch,float a_hbutton,
                               inlib::sg::matrix& a_mtx) const {
    //if(inlib::device::small_screen()) a_wcw *= 0.8/0.7;
    unsigned int old_params_list_visible_items = m_params.m_list_visible_items;
    unsigned int vitems = inlib::mn<unsigned int>(m_params.m_list_visible_items,a_node.number_of_items()/*+a_node.extra_items()*/);
    vitems = inlib::mx<unsigned int>(vitems,5);
    main& self = const_cast<main&>(*this);
    self.m_params.m_list_visible_items = vitems;
    parent::set_list_layout(a_node,a_wcw,a_wch,a_hbutton,a_mtx); //it will set a_node.visible_items to vitems.
    self.m_params.m_list_visible_items = old_params_list_visible_items;
  }

  virtual void set_entries_layout(inlib::sg::entries& a_node,
                                  float a_wcw,float a_wch,float a_hbutton,
                                  inlib::sg::matrix& a_mtx) const {

    unsigned int old_params_list_visible_items = m_params.m_list_visible_items;
    unsigned int vitems = inlib::mn<unsigned int>(m_params.m_list_visible_items,a_node.number_of_items()/*+a_node.extra_items()*/);
    vitems = inlib::mx<unsigned int>(vitems,5);
    main& self = const_cast<main&>(*this);
    self.m_params.m_list_visible_items = vitems;
    parent::set_entries_layout(a_node,a_wcw,a_wch,a_hbutton,a_mtx);
    self.m_params.m_list_visible_items = old_params_list_visible_items;

    a_node.width = a_wcw*0.95f;
    a_node.scroll_width = a_wcw*0.1f;
    a_node.buttons_to_arrows_factor = 0.1f;
    a_node.entry_label_result_factor = 0.7f;

  }  

public:
  main(std::ostream& a_out,
       inlib::sg::gl_manager& a_gl_mgr,
       const inlib::sg::base_freetype& a_ttf,
       const std::string& a_data_dir,
       const std::string& a_res_dir,
       const std::string& a_out_dir,
       const std::string& a_tmp_dir,
       bool a_verbose,
       unsigned int a_mem_limit)
  :parent("ArcheryTune",ARCHERYTUNE_VERSION,a_out,a_gl_mgr,a_ttf,a_data_dir,a_res_dir,a_out_dir,a_tmp_dir,a_verbose,a_mem_limit)
  ,dac(*((inlib::sg::gui_viewer*)this))
  {
    params_button_visible = false;
    camera_button_visible = false;
  //m_params.m_touch_move = false;
    m_params.m_console_scale = 2;

    meta_zone_had_been_shown();

    m_params.m_gsto_mode = inlib::sg::s_gsto_gl_vbo();
    set_use_gsto(true);

    set_param_viewing(false); //to move targets.

    m_about.push_back("Version : "+std::string(ARCHERYTUNE_VERSION));
    m_about.push_back("Archery : Jean-Eric Campagne");
    m_about.push_back("Software : Guy Barrand");
    m_about.push_back("Animals : Actilia Multimedia");

    //m_params.m_list_visible_items = 8; //for FOC from Weights.
    m_params.m_list_visible_items = 9; //for Std Marks (speed known).
  }
  virtual ~main() {}
protected:
  main(const main& a_from)
  :parent(a_from)
  ,dac(a_from)
  {}
private:
  main& operator=(const main&){return *this;}
protected:
  std::vector<std::string> m_about;
};

}

#endif
